#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER5
#┃演出モジュール（爆発）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通	import class汎用 as 共通

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ.クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class爆発:

    #┬
    #□開始時の半径
    #□終了時の半径
    定数_半径_開始   = 1
    定数_半径_終了   = 8
    #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標		#③ Ｙ座標
        ):
		#┬
        #○引数を退避する
        self.objGame	= 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        #│
        #○基本データ(半径)を初期化する
        self.半径       = class爆発.定数_半径_開始
        #│
        #〇爆発を生成(リスト追加)する
        self.objGame.obj爆発.append(self)
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #○描画タイミングを確認する
        if pyxel.frame_count % 2 != 0: return
        #│＼（描画するターンではない場合）
        #│ ▼処理を中断する
        #│
        #○半径を大きくする
        self.半径 += 1
        if self.半径 > class爆発.定数_半径_終了:
        #　 ＼（半径が最大になった場合）
            #○爆発を抹消(リストから除外)する
            self.objGame.obj爆発.remove(self)
            #│
            #◇┐終了のBGMを流す
            if self.objGame.シーン == 共通.定数_シーン_終了:
            #　├→（シーンが『終了』の場合）
                #○終了のBGMを流す
                pyxel.playm(7, loop=True)
            #　└┐（その他）
        #┴　┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○爆発を描画する
        pyxel.circ (self.座標_X軸, self.座標_Y軸, self.半径,  7)
        pyxel.circb(self.座標_X軸, self.座標_Y軸, self.半径, 10)
        #┴