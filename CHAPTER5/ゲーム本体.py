#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER5
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通
from キャラクタ	import classプレイヤー, classザコキャラ, classボスキャラ
from 演出		import class背景

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class Game:

    #┬
    #□ゲームオーバー表示待ち(単位：フレーム)
	定数_終了待ち時間   		= 300
	#│
	#□└┐出現カウント(30で１秒)
		#□ボスキャラ用
		#□ザコキャラ用
	定数_追加間隔_ザコキャラ	= 300
	定数_追加間隔_ボスキャラ	= 200
    #┴ ┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def __init__(self):
		#┬
        #○Pyxelを初期化する
		self.初期化_リソース()
        #│
        #○└┐制御データを初期化する
            #○スコアを初期化する
            #○シーンを初期化する
		self.得点      	= 0
		self.シーン      	= None
		self.残り時間_終了シーン 	= 0
            #┴
		#│
        #○└┐インスタンスを初期化する
            #○背景を初期化する
            #○自機を初期化する
            #○ザコキャラを初期化する
            #○ボスキャラを初期化する
            #○爆発を初期化する
		self.obj背景		= None
		self.objプレイヤー	= None
		self.objザコキャラ	= []
		self.objボスキャラ	= []
		self.obj爆発		= [] 
            #┴
        #│
        #○└┐最終準備
            #●背景を生成する(背景はシーンによらず常に存在する)
            #●タイトル画面を準備する
            #○ゲームの実行を開始する
		class背景(self)
		self.共通_シーン切替(共通.定数_シーン_タイトル)
		pyxel.run(self.更新処理, self.描画処理)
		#┴　┴
	#────────────────────────────────────	
	def 初期化_リソース(self):
		#┬
		#○画面を初期化する
		pyxel.init(300, 200, "ザコキャラ捕獲ゲーム　Ver.2025/05/01-01")
		#│
		#○リソースファイルを読み込む
		#pyxel.load("リソース/org.pyxres")		# 最初のリソース
		pyxel.load("リソース/Kureha.pyxres")		# 呉羽のリソース
		#pyxel.load("リソース/Sumin.pyxres")		# スー民のリソース
		#│
		#○Soundデータを登録する
		pyxel.sounds[50].mml(
			"t100 @1 o2 q7 v7 l4" +
			"l8d4a4g2.fed4c<b->c<a>e4d1.a4>" +
			"c4<b2.gfe4fga1&a1d4a4g2.fed4c<b->c<a>e4d1."
			)
		pyxel.sounds[51].mml(
			"t100 @0 o1 q7 v4 l2" +
			"l8dafadbgbd>c<a>c<db-fb-e>c<a>c" +
			"<daf+adaf+agb-a>c" +
			"<dafadbgbdbgbdb-g+b-c" +
			"+aeadaeac+aea<b>ac+adafadbgbd>c" +
			"<a>c<db-fb-e>c<a>c<daf+adaf+adaf+a"
			)
		#│
		#○Musicデータを登録する
		pyxel.musics[7].set([50],[51])
		#┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．アプリを更新
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 更新処理(self):
		#┬
        #●背景を更新する
		self.obj背景.更新処理()
		#│
        #○└┐キャラクタを更新する
			#●プレイヤーを更新する
			#●敵キャラを更新する
		self.更新処理_プレイヤー()
		self.更新処理_ザコキャラ()
		self.更新処理_ボスキャラ()
		#│
        #○└┐その他を更新する
            #●破壊を更新する
            #●画面を更新する
		self.更新処理_爆発()
		self.更新処理_シーン()
        #┴　┴
	#────────────────────────────────────	
	def 更新処理_プレイヤー(self):
		#┬
        #◇┐自機を更新する
		if self.objプレイヤー is not None:
        #　├→（自機が存在する場合）
            #●自機を更新する
			self.objプレイヤー.更新処理()
			#┴
		#　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
	def 更新処理_ザコキャラ(self):
		#┬
		#◎└┐すべてのザコキャラとの接触を判定する
		for tmpObj in self.objザコキャラ.copy():
			#│＼（すべてのザコキャラを処理し終えた場合）
			#│ ▼繰り返し処理を抜ける
			#●ザコキャラを更新する
			tmpObj.更新処理()
			#│
			#◇┐ザコキャラを更新する
			if self.objプレイヤー is not None:
			#　├→（自機が存在する場合）
                #●自機との接触を調べる
				if 共通.Fn衝突処理(tmpObj, self.objプレイヤー):
                #　 ＼（接触している場合）
                    #●ザコキャラを消滅する
					tmpObj.衝突処理()
			#┴　┴　┴
	#────────────────────────────────────	
	def 更新処理_ボスキャラ(self):
		#┬
		#◎└┐すべてのボスキャラとの接触を判定する
		for tmpObj in self.objボスキャラ:
			#│＼（すべてのスキャラを処理し終えた）
			#│ ▼繰り返し処理を抜ける
			#●ボスキャラを更新する
			tmpObj.更新処理()
			#│
			#◇┐ザコキャラを更新する
			if self.objプレイヤー is not None:
			#　├→（自機が存在する場合）
                #●自機との接触を調べる
				if 共通.Fn衝突処理(tmpObj, self.objプレイヤー):
				#　 ＼（接触している場合）
					#●自機を爆破する
					self.objプレイヤー.衝突処理()
				#┴　┴
			#　└┐（その他）
		#┴　┴　┴
	#────────────────────────────────────	
	def 更新処理_爆発(self):
		#┬
        #◎└┐すべての爆発を更新する
		for tmpObj in self.obj爆発.copy():
            #│＼（すべての爆発を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●当該の爆発を更新
			tmpObj.更新処理()
        #┴　┴
	#────────────────────────────────────	
	def 更新処理_シーン(self):
		#┬
        #◇┐シーンを更新する
		if self.シーン == 共通.定数_シーン_タイトル: 
        #　├→（シーンが『タイトル』の場合）
			#◇┐が押されている場合：
			if 共通.Fun発射あり():
			#　├→（ジェット噴射の指示が『ある』場合）
                #○BGMの再生を止める
                #●プレー画面を準備する
				pyxel.stop()
				self.共通_シーン切替(共通.定数_シーン_プレイ)
                #┴
            #　└┐（その他）
                #┴

		elif self.シーン == 共通.定数_シーン_プレイ:
        #　├→（シーンが『プレイ』の場合）
			#◇┐ザコキャラを追加する
			if self.残り時間_追加_ザコキャラ == 0:
			#　├→（タイマーがゼロの場合）
				#●出現する座標を求める
				#○ザコキャラのリストに追加する
				#○タイマーをリセットする
				座標 = 共通.Fun座標取得(
					classザコキャラ.定数_出現距離,
					self.objプレイヤー.座標_X軸,
					self.objプレイヤー.座標_Y軸
					)
				classザコキャラ(self, 座標[0], 座標[1])
				self.残り時間_追加_ザコキャラ = self.定数_追加間隔_ザコキャラ
				#┴

			else:
			#　└┐（その他）
				#○タイマーを減らす
				self.残り時間_追加_ザコキャラ -= 1
				#┴
			#│
			#◇┐ボスキャラを追加する
			if self.残り時間_追加_ボスキャラ == 0:
			#　├→（タイマーがゼロの場合）
				#●出現する座標を求める
				#○ボスキャラのリストに追加する
				#○タイマーをリセットする
				座標 = 共通.Fun座標取得(
					classボスキャラ.定数_出現距離,
					self.objプレイヤー.座標_X軸,
					self.objプレイヤー.座標_Y軸
					)
				classボスキャラ(self, 座標[0], 座標[1])
				self.残り時間_追加_ボスキャラ = self.定数_追加間隔_ボスキャラ
				#┴

			else:
			#　└┐（その他）
				#○タイマーを減らす
				self.残り時間_追加_ボスキャラ -= 1
			#┴　┴

		elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『ゲームオーバー』の場合）
            #◇┐待ち時間を減らす
			if self.残り時間_終了シーン > 0:
            #　├→（画面表示時間が残っている場合）
                #●待ち時間をカウントダウンする
				self.残り時間_終了シーン -= 1
                #┴

			else:
            #　└┐（その他）
                #●タイトル画面を準備する
				self.共通_シーン切替(共通.定数_シーン_タイトル)
            #┴　┴
		#　└┐（その他）
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 描画処理(self):
		#┬
        #○画面をクリアする
        #●背景を描画する
		pyxel.cls(0)
		self.obj背景.描画処理()
        #│
        #◇┐自機を描画する
		if self.objプレイヤー is not None:
        #　├→（自機が存在する場合）
            #●描画する
			self.objプレイヤー.描画処理()
			#┴
		#　└┐（その他）
			#┴
        #│
        #◎└┐ザコキャラを描画する
		for tmpObj in self.objザコキャラ:
            #│＼（すべてのザコキャラを処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
			tmpObj.描画処理()
			#┴
        #│
        #◎└┐ボスキャラを描画する
		for tmpObj in self.objボスキャラ:
            #│＼（すべてのボスキャラを処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
			tmpObj.描画処理()
			#┴
        #│
        #◎└┐爆発エフェクトを描画する
		for tmpObj in self.obj爆発:
            #│＼（すべての爆発を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
			tmpObj.描画処理()
			#┴
        #│
        #○スコアを描画する
		pyxel.text(3, 3, f"SCORE {self.得点:3}", 7)
        #│
        #◇┐シーンを描画する
		if self.シーン == 共通.定数_シーン_タイトル:
        #　├→（シーンが『タイトル』の場合）
            #〇タイトル画面を表示する
			表示文字 = "- Press [SPACE] Key or [UP] Button -"
			pyxel.text(76, 71, 表示文字, 5)
			pyxel.text(75, 70, 表示文字, 7)
			#┴

		elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『ゲームオーバー』の場合）
            #〇ゲームオーバー画面を表示する
			表示文字 = "- GAME OVER -"
			pyxel.text(121, 71, 表示文字, 5)
			pyxel.text(120, 70, 表示文字, pyxel.frame_count % 16)
			#┴
        #　└┐（その他）
        #┴　┴
		
#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーンを切替える
#┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃【引き数】① 整数型：シーン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 共通_シーン切替(self,
        argScene    #① シーン
        ):
		#┬
        #○引数を退避する
		self.シーン = argScene
        #│
        #◇┐画面を表示する
		if self.シーン == 共通.定数_シーン_タイトル:
        #　├→（シーンが『タイトル』の場合）
			#□└┐タイマー
				#□ザコキャラの出現（初期値：ゼロ）
				#□ボスキャラの出現（初期値：ゼロ）
				#□ゲームオーバー
			self.残り時間_追加_ザコキャラ	= 0
			self.残り時間_追加_ボスキャラ	= 0
			self.残り時間_終了シーン		= self.定数_終了待ち時間
				#┴
			#│
            #〇自機を抹消する
			self.objプレイヤー = None
            #│
            #○BGMを鳴らす
			pyxel.playm(0, loop=True)
            #┴

		elif self.シーン == 共通.定数_シーン_プレイ:
        #　├→（シーンが『プレイ』の場合）
            #〇ザコキャラを抹消(リスト全体をクリア)する
            #〇ボスキャラを抹消(リスト全体をクリア)する
			self.objザコキャラ.clear()
			self.objボスキャラ.clear()
            #│
            #○スコアをリセットする
            #○BGMを鳴らす
			self.得点      = 0
			pyxel.playm(1, loop=True)
            #│
            #●プレイヤーを生成する
			classプレイヤー(self, (pyxel.width -4)/2, pyxel.height/4)
            #┴

		elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『ゲームオーバー』の場合）
            #○待ち時間をセットする
			self.残り時間_終了シーン = self.定数_終了待ち時間
            #│
            #●レイヤーを抹消する
			self.objプレイヤー = None
            #┴
		#　└┐（その他）
        #┴　┴