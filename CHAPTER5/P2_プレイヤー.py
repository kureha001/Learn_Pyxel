#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER5
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import P0_共通	as		Common
from P9_爆発    import	classCrush

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┬
#□└┐プレイヤーの移動
	#□左右方向の加速度
	#□上方向(上昇)の加速度
	#□下方向(落下)の加速度
	#□最大速度
ACCEL_X 	= 0.06
ACCEL_UP 	= 0.04
ACCEL_DOWN 	= 0.02
MAX_SPEED	= 0.8
	#┴
#┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classPlayer:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理
    #┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃【引き数】① OBJ型 ：生成先のオブジェクト
    #┃　　　　　② 整数型：Ｘ座標
    #┃　　　　　③ 整数型：Ｙ座標
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def __init__(self,   
        argGame,    #① 生成先のオブジェクト
        argX,       #② Ｘ座標
        argY        #③ Ｙ座標
        ):
		#┬
        #○引数を退避する
		self.objGame    = argGame
		self.X          = argX
		self.Y          = argY
        #│
		#□└┐プレイヤーの速度（初期値：ゼロ）
			#□X方向
			#□Y方向
		self.VX 		= 0
		self.VY 		= 0
			#┴
        #│
		#□└┐プレイヤーの速度
			#〇プレイヤーの向き（初期値：右）[右=1｜左=2]
			#〇プレイヤーの噴射状態（初期値：あり）[あり=True｜なし=Fals]
		self.Dir 	= 1
		self.is_jetting 	= False
			#┴
        #│
		#○当たり判定の領域を初期化する
		self.HitArea    = (1, 1, 6, 6)
        #│
        #〇自機を生成する
		self.objGame.objPlayer  = self
		#┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def update(self):
		#┬
		#○┐ゲームを更新する
			#●プレイヤーを更新する
			#●プレイヤーを更新する
			#●プレイヤーを更新する
		self.update_vector()
		self.update_move()
		#　┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．接触を処理する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def Sub_Collision(self):
		#┬
        #●爆発を生成する
		classCrush(self.objGame, self.X + 4, self.Y + 4)
        #│
        #○自機を抹消する
		self.objGame.objPlayer = None
        #│
        #●ゲームオーバー画面を表示する
		self.objGame.Sub_Scene(Common.SCENE_GAMEOVER)
        #┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def draw(self):
		#┬
		#○ジェット噴射の表示位置をずらす量を計算する
		offsetY = (pyxel.frame_count % 3 + 2) if self.is_jetting else 0
		offsetX = offsetY * -self.Dir
		#│
		#○横方向のジェット噴射を描画する
			# ① 描画位置のX座標            [プレイヤーのX座標]※位置をずらす
			# ② 描画位置のY座標            [プレイヤーのY座標]
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]または[-8] ※負は左右反転
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(
			self.X - self.Dir * 3 + offsetX, self.Y,
			0, 0, 0,
			8 * self.Dir, 8,
			0,
		)
		#│
		#○下方向のジェット噴射を描画する
			# ① 描画位置のX座標            [プレイヤーのX座標]
			# ② 描画位置のY座標            [プレイヤーのY座標] ※位置をずらす
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(
			self.X, self.Y + 3 + offsetY,
			0, 8, 8,
			8, 8,
			0,
		)
		#│
		#○プレイヤーを描画する
			# ① 描画位置のX座標            [プレイヤーのX座標]
			# ② 描画位置のY座標            [プレイヤーのY座標]
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(self.X, self.Y, 0, 8, 0, 8, 8, 0)
		#┴　┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃速度
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def update_vector(self):
		#┬
		#◇┐キーの状態に合わせて、プレイヤーの速度を更新する
		if Common.Fun_FireOn():
		#　├→（ジェット噴射の指示が『ある』場合）
			#○噴射状態を「噴射あり」にする
			self.is_jetting	= True
			#│
			#○加速する(縦) ※速度制限する
			self.VY 	= max(
				self.VY - ACCEL_UP,
				-MAX_SPEED
				)
			#│
			#○Ｘ軸の速度を求める
			self.VX 	= max(
				min(
					self.VX + self.Dir * ACCEL_X,
					1
					),
				-MAX_SPEED
				)
			#│
			#○ジェット音を鳴らす
			pyxel.play(0, 0, resume=True)
			#┴
		else:
		#　└┐（その他）
			#○噴射状態を「噴射なし」にする
			self.is_jetting	= False
			#│
			#○Ｙ軸の速度を求める
			self.VY = min(
				self.VY + ACCEL_DOWN,
				MAX_SPEED
				)
		#│
		#◇┐キーの状態に合わせて、次に進む方向を変える
		if Common.Fun_FireOff():
		#　├→（ジェット噴射の指示が『ない』場合）
			#○次に進む方向を反転する
			self.Dir = -self.Dir
			#┴
		#　└┐（その他）
		#┴ ┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃移動
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def update_move(self):
		#│
		#○└┐プレイヤーを移動する
			#○X座標を変更する ※速度量を加える
			#○Y座標を変更する ※速度量を加える
		self.X += self.VX
		self.Y += self.VY
			#┴
		#│
		#○└┐画面の終端位置を求める
			#○右端の位置(右端の８ドット手前)を求める
			#○下端の位置(下端の８ドット手前)求める
		max_player_x = pyxel.width	- 8
		max_player_y = pyxel.height	- 8 
		#│
		#◇┐プレイヤーの座標に合わせて、跳ね返す
		if self.X < 0:
		#　├→（プレイヤーの『X座標が左端』をはみ出した場合）
			#○X座標を左端にセットする
			#○移動方向を右に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.X	= 0
			self.VX	= abs(self.VX)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.X > max_player_x:
		#　├→（プレイヤーの『X座標が右端』をはみ出した場合）
			#○X座標を右端にセットする
			#○移動方向を左に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.X	= max_player_x
			self.VX 	= -abs(self.VX)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.Y < 0:
		#　├→（プレイヤーの『Y座標が上端』をはみ出した場合）
			#○Y座標を上端にセットする
			#○移動方向を下に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.Y	= 0
			self.VY 	= abs(self.VY)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.Y > max_player_y:
		#　├→（宇プレイヤーの『Y座標が下端』をはみ出した場合）
			#○Y座標を下端にセットする
			#○移動方向を上に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.Y	= max_player_y
			self.VY 	= -abs(self.VY)
			pyxel.play(0, 1, resume=True)
			#┴
		#　└┐（その他）
		#┴　┴