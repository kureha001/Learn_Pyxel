#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER5
#┃キャラクター・モジュール（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通	import class汎用 as 共通
from 演出	import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┬
#□└┐自機の移動
	#□加速度（水平）
	#□加速度（上昇）
	#□加速度（落下）
	#□速度上限
定数_加速_水平	= 0.06
定数_加速_上昇 	= 0.04
定数_加速_落下	= 0.02
定数_速度上限	= 0.8
#┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標		#③ Ｙ座標
        ):
		#┬
        #○引数を退避する
		self.objGame	= 引数_生成先
		self.座標_X軸   = 引数_X座標
		self.座標_Y軸   = 引数_Y座標
        #│
		#□└┐自機の速度（初期値：ゼロ）
			#□X方向
			#□Y方向
		self.速度_X軸 		= 0
		self.速度_Y軸 		= 0
			#┴
        #│
		#□└┐自機の速度
			#〇自機の向き（初期値：右）[右=1｜左=2]
			#〇自機の噴射状態（初期値：あり）[あり=True｜なし=Fals]
		self.水平移動方向	= 1
		self.噴射有無		= False
			#┴
        #│
		#○衝突範囲を初期化する
		self.衝突範囲		= (1, 1, 6, 6)
        #│
        #〇自機を生成する
		self.objGame.obj自機  = self
		#┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 更新処理(self):
		#┬
		#○┐ゲームを更新する
			#●自機を更新する
			#●自機を更新する
			#●自機を更新する
		self.更新処理_速度変更()
		self.更新処理_移動()
		#　┴
	#────────────────────────────────────	
	def 更新処理_速度変更(self):
		#┬
		#◇┐キーの状態に合わせて、自機の速度を更新する
		if 共通.Fun発射あり():
		#　├→（ジェット噴射の指示が『ある』場合）
			#○噴射状態を「噴射あり」にする
			self.噴射有無	= True
			#│
			#○加速する(縦) ※速度制限する
			self.速度_Y軸 	= max(
				self.速度_Y軸 - 定数_加速_上昇,
				-定数_速度上限
				)
			#│
			#○Ｘ軸の速度を求める
			self.速度_X軸 	= max(
				min(
					self.速度_X軸 + self.水平移動方向 * 定数_加速_水平,
					1
					),
				-定数_速度上限
				)
			#│
			#○ジェット音を鳴らす
			pyxel.play(0, 0, resume=True)
			#┴
		else:
		#　└┐（その他）
			#○噴射状態を「噴射なし」にする
			self.噴射有無	= False
			#│
			#○Ｙ軸の速度を求める
			self.速度_Y軸 = min(
				self.速度_Y軸 + 定数_加速_落下,
				定数_速度上限
				)
		#│
		#◇┐キーの状態に合わせて、次に進む方向を変える
		if 共通.Fun発射なし():
		#　├→（ジェット噴射の指示が『ない』場合）
			#○次に進む方向を反転する
			self.水平移動方向 = -self.水平移動方向
			#┴
		#　└┐（その他）
		#┴ ┴
	#────────────────────────────────────	
	def 更新処理_移動(self):
		#│
		#○└┐自機を移動する
			#○X座標を変更する ※速度量を加える
			#○Y座標を変更する ※速度量を加える
		self.座標_X軸 += self.速度_X軸
		self.座標_Y軸 += self.速度_Y軸
			#┴
		#│
		#○└┐画面の終端位置を求める
			#○右端の位置(右端の８ドット手前)を求める
			#○下端の位置(下端の８ドット手前)求める
		画面端_右 = pyxel.width  - 8
		画面端_下 = pyxel.height - 8 
		#│
		#◇┐自機の座標に合わせて、跳ね返す
		if self.座標_X軸 < 0:
		#　├→（自機の『X座標が左端』をはみ出した場合）
			#○X座標を左端にセットする
			#○移動方向を右に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.座標_X軸	= 0
			self.速度_X軸	= abs(self.速度_X軸)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.座標_X軸 > 画面端_右:
		#　├→（自機の『X座標が右端』をはみ出した場合）
			#○X座標を右端にセットする
			#○移動方向を左に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.座標_X軸	= 画面端_右
			self.速度_X軸 	= -abs(self.速度_X軸)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.座標_Y軸 < 0:
		#　├→（自機の『Y座標が上端』をはみ出した場合）
			#○Y座標を上端にセットする
			#○移動方向を下に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.座標_Y軸	= 0
			self.速度_Y軸 	= abs(self.速度_Y軸)
			pyxel.play(0, 1, resume=True)
			#┴
		elif self.座標_Y軸 > 画面端_下:
		#　├→（自機の『Y座標が下端』をはみ出した場合）
			#○Y座標を下端にセットする
			#○移動方向を上に変える ※速度はそのまま
			#○跳ね返り音を鳴らす
			self.座標_Y軸	= 画面端_下
			self.速度_Y軸 	= -abs(self.速度_Y軸)
			pyxel.play(0, 1, resume=True)
			#┴
		#　└┐（その他）
		#┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 衝突処理(self):
		#┬
        #●爆発を生成する
		class爆発(self.objGame, self.座標_X軸 + 4, self.座標_Y軸 + 4)
        #│
        #○BGMを止める
        #○爆発音を鳴らす
		pyxel.stop()
		pyxel.play(2, 63, resume=True)
        #│
        #●ゲームオーバー画面を表示する
		self.objGame.共通_シーン切替(共通.定数_シーン_終了)
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	def 描画処理(self):
		#┬
		#○ジェット噴射の表示位置をずらすドット数を計算する
		ずらし幅_Y軸 = (pyxel.frame_count % 3 + 2) if self.噴射有無 else 0
		ずらし幅_X軸 = ずらし幅_Y軸 * -self.水平移動方向
		#│
		#○横方向のジェット噴射を描画する
			# ① 描画位置のX座標            [自機のX座標]※位置をずらす
			# ② 描画位置のY座標            [自機のY座標]
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]または[-8] ※負は左右反転
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(
			self.座標_X軸 - self.水平移動方向 * 3 + ずらし幅_X軸, self.座標_Y軸,
			0, 0, 0,
			8 * self.水平移動方向, 8,
			0,
		)
		#│
		#○下方向のジェット噴射を描画する
			# ① 描画位置のX座標            [自機のX座標]
			# ② 描画位置のY座標            [自機のY座標] ※位置をずらす
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(
			self.座標_X軸, self.座標_Y軸 + 3 + ずらし幅_Y軸,
			0, 8, 8,
			8, 8,
			0,
		)
		#│
		#○自機を描画する
			# ① 描画位置のX座標            [自機のX座標]
			# ② 描画位置のY座標            [自機のY座標]
			# ③ 参照するイメージバンク番号 [0]
			# ④ 参照イメージの左上のX座標  [8]
			# ⑤ 参照イメージの左上のY座標  [8]
			# ⑥ 参照イメージの幅           [8]
			# ⑦ 参照イメージの高さ         [8]
			# ⑧ 透明色                     [0]
		pyxel.blt(self.座標_X軸, self.座標_Y軸, 0, 8, 0, 8, 8, 0)
		#┴　┴