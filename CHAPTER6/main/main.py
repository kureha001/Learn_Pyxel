#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃処理（ゲーム本体）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    シーン          import *
from    背景	        import 背景作成
from    .FN更新1_移動   import 移動クラス
from    .FN更新2_発射   import 発射クラス
from    .FN更新3_衝突   import 衝突クラス
from    .FN更新4_出現   import 出現クラス

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class ゲーム本体:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #○Pyxel(画面/音楽)を初期化する
        self.初期化_リソース()
        #│
        #〇処理で用いる各種オブジェクトを作成する
        self.初期化_処理セット()
        #│
        #≫シーンを切替える(タイトル)
        main.DB.FNシーン[ シーンID.終了 ].FN移動.Fn切替()
        #│
        #○フレーム処理に、処理セットを登録する
        pyxel.run(self.更新処理,self.描画処理)
		#┴
	#────────────────────────────────────	
    def 初期化_リソース(self):
		#┬
		#○画面を初期化する
        pyxel.init(120, 160, title="Mega Wing  Ver.2025/05/03-02")
		#│
		#○リソースファイルを読み込む
        pyxel.load("../リソース/改造版.pyxres")
		#│
		#○Soundデータを登録する
        pyxel.sounds[50].mml(
                "t100 @1 o2 q7 v7 l4" +
                "l8d4a4g2.fed4c<b->c<a>e4d1.a4>" +
                "c4<b2.gfe4fga1&a1d4a4g2.fed4c<b->c<a>e4d1." )
        pyxel.sounds[51].mml(
                "t100 @0 o1 q7 v4 l2" +
                "l8dafadbgbd>c<a>c<db-fb-e>c<a>c" +
                "<daf+adaf+agb-a>c" +
                "<dafadbgbdbgbdb-g+b-c" +
                "+aeadaeac+aea<b>ac+adafadbgbd>c" +
                "<a>c<db-fb-e>c<a>c<daf+adaf+adaf+a" )
		#│
		#○Musicデータを登録する
        pyxel.musics[7].set([50],[51])
		#┴
	#────────────────────────────────────	
    def 初期化_処理セット(self):
		#┬
        #≫更新処理をオブジェクト化する（リスト型）
        main.DB.FN更新 = (
            移動クラス() ,
            発射クラス() ,
            衝突クラス() ,
            出現クラス() )
        #│
        #≫シーン処理をオブジェクト化する（辞書型）
        main.DB.FNシーン = {
            シーンID.タイトル   : タイトルクラス(self),
            シーンID.プレイ     : プレイクラス  (self),
            シーンID.終了       : 終了クラス    (self)}
        #│
        #≫背景をオブジェクト化する
        main.DB.obj背景 = 背景作成()
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #◎└┐キャラクタを更新する
        for tmp処理 in main.DB.FN更新:
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●キャラクタを更新する
            tmp処理.実行()
		#┴ 	┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●画面に各種オブジェクトを描画する
        self.Fn描画((
                main.DB.obj背景    ,
                main.DB.obj自機    ,
                main.DB.obj敵機    ,
                main.DB.objアイテム,
                main.DB.obj弾_自機 ,
                main.DB.obj弾_敵機 ,
                main.DB.obj爆発    ,
                main.DB.FNシーン[ main.DB.シーン])) # ※ シーンに合わせて変更
        #│
        #〇ゲーム情報（得点／難易度）を描画する
        pyxel.text( 5, 2, f"SCORE:{ main.DB.得点   }", 7)
        pyxel.text(85, 2, f"LEVEL:{ main.DB.難易度 }", 7)
        #┴
	#────────────────────────────────────	
    def Fn描画(self, 引数_処理リスト):
		#┬
		#◎└┐引数からオブジェクトを抽出し描画する
        for tmp引数要素 in 引数_処理リスト:
			#│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #◇┐オブジェクトを描画する
            if isinstance(tmp引数要素, list):
            #　├┐（引数の要素がリストの場合）
                #↓
                #◎└┐更に分解し描画する
                for tmp更に分解 in tmp引数要素:
                    #│＼（すべての処理を終えた場合）
                    #│ ↓
                    #│ ▼繰り返し処理を抜ける
                    #│
                    #●描画処理を実行する
                    tmp更に分解.FN描画.実行()
                    #┴ 

            elif tmp引数要素 is not None:
            #　├┐（引数の要素がオブジェクト化している場合）
                #↓
                #●描画処理を実行する
                tmp引数要素.FN描画.実行()
            #　└┐（その他）
        #┴　┴　┴
