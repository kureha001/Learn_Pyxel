#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃更新処理：出現機能（アイテム）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import random
import main.DB
from   特殊効果   import アイテムDB
from   キャラクタ import 敵機出現

#┌───────────────────────────────────
#│アイテム出現
#└───────────────────────────────────
def Fnアイテム(引数_間隔):
    #┬
    #〇出現タイミングを確認する
    比例間隔        = int(main.DB.難易度間隔 / 引数_間隔)
    タイミング判定  = (main.DB.プレイ時間 % 比例間隔 == 0)
    if not タイミング判定: return
    #│＼（出現時間が未到来の場合）
    #│ ↓
    #│ ▼処理を中断する
    #│
    #●アイテムを抽選する
    アイテムID = Fnアイテム_選定()
    if アイテムID is None: return
    #│
    #●アイテムを生成する
    X座標 = pyxel.rndi(0, pyxel.width - 8)
    敵機出現(X座標, -8, アイテムID, True)
    #┴

#────────────────────────────────────
def Fnアイテム_選定():
    #┬
    #●くじを用意する
    くじ = Fnアイテム_くじ作成()
    #│
    #●特殊効果の発動状況にしがたい、不要なくじを求める
    不要くじ = Fnアイテム_不要くじ作成( くじ )
    #│
    #○用意したくじから、不要なくじを削除する
    for アイテムID in 不要くじ: del くじ[ アイテムID ]
    #│
    #●くじを必要な数だけ、抽選箱に入れる
    抽選箱 = Fnアイテム_抽選箱作成(くじ)
    #│
    #○抽選箱からくじを引く
    抽選結果 = random.choice(抽選箱) if 抽選箱 else None
    #│
    #▼抽選結果を返す
    return 抽選結果
    
#────────────────────────────────────    
def Fnアイテム_くじ作成():
    #┬
    難易度指定  = main.DB.難易度

    # === STEP1: アイテムDBからくじを構築 ===
    使い切りID  = -1
    くじ = {}
    for アイテムID, DBレコード in アイテムDB.items():

        DB効果ID    = DBレコード[0]
        DB出現条件  = DBレコード[1][0]
        DB出現率    = DBレコード[1][1]
        DB持続性    = DBレコード[2][0]
        DBデータ    = DBレコード[2][1]

        if DB出現条件 > 難易度指定 or DB持続性 == 使い切りID:
            continue

        #◇┐永続で、上限付きかどうかを判定
        if isinstance(DBデータ, tuple) and (len(DBデータ) > 1):
            上限値 = DBデータ[1]
            #┴
        else:
            上限値 = None
            #┴

        くじ[アイテムID] = {
                "効果ID": DB効果ID,
                "上限値": 上限値,
                "出現率": DB出現率,
                "持続性": DB持続性
                }
        #┴
    #│
    #▼くじを返す
    return くじ
#────────────────────────────────────
def Fnアイテム_不要くじ作成(引数_くじ):
    #┬
    #○外部オブジェクトのリファレンスを用意する
    発動中  = main.DB.obj特殊効果.情報.発動中
    #│
    永続ID  = 0
    不要くじ = []
    for アイテムID, データ in 引数_くじ.items():
        #│
        #〇永続性を確認する
        if データ["持続性"] != 永続ID: continue
        #│＼（永続効果ではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #│
        #〇効果ＩＤを控える
        効果ID = データ["効果ID"]
        if 効果ID not in 発動中: continue
        #│＼（発動していない場合）
        #│ ↓
        #│ ▼繰り返し処理をスキップする
        #│
        #〇上限値を控える
        上限値 = データ["上限値"]
        if 上限値 is None:
        #　 ＼（永続・上限なしの場合）
            #↓
            #〇不要くじの一覧に加える
            #▼処理を中断する
            不要くじ.append(アイテムID)
            continue
            #┴
        #│
        #◇┐永続 + 上限あり → 上限到達で除外
        _, 現在値 = 発動中[効果ID]
        if (
            isinstance(現在値, (int, float)) and not isinstance(現在値, bool) and
            現在値 >= 上限値
            ):
        #　├┐（永続効果で上限に達している場合）
            #↓
            #〇不要くじの一覧に加える
            不要くじ.append(アイテムID)
            #┴
        #│└┐（その他）
        #┴　┴
    #│
    #▼不要くじを返す
    return 不要くじ
#────────────────────────────────────
def Fnアイテム_抽選箱作成(引数_くじ):
    #┬
    #○外部オブジェクトのリファレンスを用意する
    発動中 = main.DB.obj特殊効果.情報.発動中
    #│
    #◎└┐当選率に従い、くじの数を増やす
    抽選箱 = []
    for アイテムID, データ in 引数_くじ.items():
        #│
        #○
        効果ID = データ["効果ID"]
        出現率 = データ["出現率"]
        #│
        #○発動中の効果IDの出現率は半分にする
        if 効果ID in 発動中: 出現率 = 出現率 // 2
        #│
        #○出現率に応じた数のくじを抽選箱に加える
        抽選箱.extend([アイテムID] * 出現率)
        #┴
    #│
    #▼抽選箱を返す        
    return 抽選箱