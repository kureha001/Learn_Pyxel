#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃更新処理：衝突機能（衝突判定）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from   キャラクタ import 機体ID
from   共通		  import class汎用 as 共通
from  .Fn2_衝突   import *

#┌───────────────────────────────────
#│衝突判定（攻撃）
#└───────────────────────────────────
def Fn判定_攻撃(        #【戻り値】 True:破壊された／False：存在する
        引数_弾         ,   #① 自分のオブジェクト(弾)
        引数_対象一覧 ) :   #② 相手のオブジェクト(アイテム/敵機/弾)
    #┬
    #○自分の衝突条件を用意する
    条件_弾 = (引数_弾.情報.X, 引数_弾.情報.Y)
    条件_弾 = (条件_弾, 引数_弾.FN衝突.仕様.衝突範囲)
    #│
    #◎└┐相手を処理する
    for tmp対象 in 引数_対象一覧.copy():
        #│＼（すべての処理を終えた場合）
        #│ ↓
        #│ ▼繰り返し処理を抜ける
        #│
        #○相手の衝突条件を用意する
        条件_対象 = (tmp対象.情報.X, tmp対象.情報.Y)
        条件_対象 = (条件_対象, tmp対象.FN衝突.仕様.衝突範囲)
        #│
        #●自分と相手の衝突を判定する
        if not 共通.Fn衝突判定(条件_弾, 条件_対象): continue
        #│＼（衝突していない場合）
        #│ ↓
        #│ ▼次の相手を処理する
        #│
        #●機雷との衝突を処理する
        if Fn機雷_確認(tmp対象): 
        #　 ＼（相手が機雷の場合）
            #↓
            #●敵機・弾(自機)・弾(敵機)を全滅する
            #▼弾が『破壊された』を返す
            main.DB.Fnキャラクタ壊滅(main.DB.obj敵機    )
            main.DB.Fnキャラクタ壊滅(main.DB.obj弾_自機 )
            main.DB.Fnキャラクタ壊滅(main.DB.obj弾_敵機 )
            return True
        #│
        #●弾(自機)での攻撃を処理する
        if Fn衝突_攻撃(引数_弾, tmp対象): return True
        #│＼（弾が存在しない場合）
        #│ ↓
        #│ ▼弾が『破壊された』を返す
        #┴
    #│
    #▼弾が『存在する』を返す
    return False

#┌───────────────────────────────────
#│衝突判定（体当たり）
#└───────────────────────────────────
def Fn判定_体当たり(    #【戻り値】 True:破壊された／False：存在する
        引数_自機       ,   #① 自分のオブジェクト(自機)
        引数_対象一覧   ):  #② 相手のオブジェクト(アイテム/敵機/弾)
    #┬
    #○自分の衝突条件を用意する
    条件_自機 = (引数_自機.情報.X, 引数_自機.情報.Y)
    条件_自機 = (条件_自機, main.DB.obj自機共通.仕様.衝突範囲)
    #│
    #◎└┐相手を処理する
    for tmp対象 in 引数_対象一覧.copy():
        #│＼（すべての処理を終えた場合）
        #│ ↓
        #│ ▼繰り返し処理を抜ける
        #│
        #○相手の衝突条件を用意する
        条件_対象 = (tmp対象.情報.X, tmp対象.情報.Y)
        条件_対象 = (条件_対象, tmp対象.FN衝突.仕様.衝突範囲)
        #│
        #●自分と相手の衝突を判定する
        if not 共通.Fn衝突判定(条件_自機, 条件_対象): continue
        #│＼（衝突していない場合）
        #│ ↓
        #│ ▼次の相手を処理する
        #│
        #●機雷との衝突を処理する
        if Fn機雷_確認(tmp対象): 
        #　 ＼（相手が機雷の場合）
            #↓
            #●機雷を破壊する
            #●自機を全滅する
            #▼自機が『破壊された』を返す
            tmp対象.FN衝突.実行()
            引数_自機.FN衝突.実行()
            return True
        #│
        #●自機での体当たりを処理する
        if Fn衝突_体当たり(引数_自機, tmp対象): return True
        #│＼（自機が存在しない場合）
        #│ ↓
        #│ ▼自機が『破壊された』を返す
        #┴
    #│
    #▼自機が『存在する』を返す
    return False

#────────────────────────────────────	
def Fn機雷_確認(        #【戻り値】 True:機雷／False：機雷以外
        引数_対象   ):  #① 相手のオブジェクト(アイテム/敵機/弾)
    #┬
    #○条件を確認する
    if 引数_対象.仕様.アイテム区分            : return False
    if 引数_対象.仕様.ボス区分                : return False
    if 引数_対象.仕様.種類ID != 機体ID.機雷   : return False
    #│＼（対象が『機雷以外』の場合）
    #│ ↓
    #│ ▼『機雷以外』を返す
    #│
    #▼『機雷』を返す
    return True