#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃更新機能：出現
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import random
import main.DB
from   特殊効果   import アイテムID, アイテムDB
from   シーン     import シーンID
from   キャラクタ import 敵機出現, 機体ID
import キャラクタ.敵機.DB as 敵機

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様:
    #┬
    #□レベル内で出現する回数
    機雷        = 1.2
    弾          = 2.2
    シールド    = 0.7
    アイテム    = 1.7
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 出現クラス:
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #○シーンを確認する
        if main.DB.シーン != シーンID.プレイ:return
        if main.DB.プレイ時間 < 60 :return
        #│＼（対象外の場合）
        #│ ↓
        #│ ▼繰処理を中断する
        #│
        #●敵機を追加する
        #●機雷を追加する
        #●アイテムを追加する
        self.Fn敵機()
        self.Fn機雷()
        self.Fn補充( 仕様.弾       , アイテムID.弾薬       )
        self.Fn補充( 仕様.シールド , アイテムID.シールド   )
        self.Fnアイテム()
        self.Fnボス()
        #┴
	#────────────────────────────────────
    def Fnボス(self):
		#┬
        #〇出現タイミングを確認する
        if main.DB.ボスシーン != シーンID.ボス登場: return
        #│＼（ボスシーンが『ボス登場』以外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○ボスシーンを『ボス対戦』にセットする
        main.DB.ボスシーン = シーンID.ボス対決
        #│
        #●特殊効果を解除(永続は残る)
        main.DB.obj特殊効果.FN移動.強制解除()
        main.DB.obj自機共通.情報.シールド = pyxel.width
        #│
        #◎└┐ボスキャラをリストアップする
        ボス一覧 = []
        難易度  = main.DB.難易度
        for 種類ID in 敵機.ボスDB:
            #│＼（すべての繰り返し処理を場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #〇敵機DBから情報を控える
            DBデータ= 敵機.ボスDB[ 種類ID ][0]
            DB下限  = DBデータ[0]
            DB上限  = (難易度) if DBデータ[1] ==0 else (DBデータ[1])
            #│
            #◇┐出現タイミングを確認する
            if (DB下限 <= 難易度) and (難易度 <= DB上限):
            #　├┐（相手が『敵機』の場合）
                #↓
                #〇ボスを一覧に追加する
                ボス一覧.append(種類ID)
                #┴
            #│└┐（その他）
            #┴　┴
        #│
        #◎└┐リストアップしたボスキャラを登場する
        出現数 = len(ボス一覧)
        間隔 = int((pyxel.width - 48) / (出現数 + 1))
        for tmp出現数 in range(出現数):
            #│＼（すべての繰り返し処理を場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●ボスキャラを登場する
            X座標   = 間隔 * (tmp出現数 + 1)
            種類ID  = ボス一覧[ tmp出現数 ]
            敵機出現( X座標, -48, 種類ID, False, True)
        #┴　┴
	#────────────────────────────────────
    def Fn敵機(self):
		#┬
        #○出現タイミングを確認する
        間隔_敵機 = max(60 - main.DB.難易度 * 6, 20)
        if main.DB.プレイ時間 % 間隔_敵機 != 0: return
        #│＼（対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐敵機DBから難易度に合った敵機をランダムに選ぶ
        難易度      = main.DB.難易度
        確認結果    = False
        while 確認結果 == False:
            #│＼（出撃可能な敵機を見つけた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #〇敵機DBの情報を控える
            種類ID      = pyxel.rndi( 機体ID.板, 機体ID.円盤型3 )
            DBデータ    = 敵機.敵機DB[ 種類ID ][0]
            DB下限      = DBデータ[0]
            DB上限      = (難易度) if DBデータ[1] ==0 else (DBデータ[1])
            #│
            #〇出撃可能(難易度が適合)であるか判断する
            確認結果    = (DB下限 <= 難易度) and (難易度 <= DB上限)
            #┴
        #│
        #●見つけた敵機を出現する
        X座標 = pyxel.rndi(0, pyxel.width - 8)
        敵機出現( X座標, -8, 種類ID, False)
        #┴
	#────────────────────────────────────
    def Fn機雷(self):
		#┬
        #○出現タイミングを確認する
        if main.DB.プレイ時間 % int(main.DB.難易度間隔 / 仕様.機雷) != 0: return
        #│＼（時間対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●機雷を生成する
        X座標   = pyxel.rndi(0, pyxel.width - 8)
        種類ID  = 機体ID.機雷
        敵機出現(X座標, -8, 種類ID, False)
        #┴
    #────────────────────────────────────
    def Fn補充(self, 引数_間隔, 引数_アイテムID):
		#┬
        #○出現タイミングを確認する
        if main.DB.プレイ時間 % int(main.DB.難易度間隔 / 引数_間隔) != 0: return
        #│＼（時間対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○難易度を確認する
        DB難易度 = アイテムDB[ 引数_アイテムID ][1][0]
        if DB難易度 > main.DB.難易度: return
        #│＼（難易度不足の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●補給アイテムを生成する
        X座標 = pyxel.rndi(0, pyxel.width - 8)
        敵機出現(X座標, -8, 引数_アイテムID, True)
        #┴
	#────────────────────────────────────
    def Fnアイテム(self):
		#┬
        #〇出現タイミングを確認する
        if main.DB.プレイ時間 % int(main.DB.難易度間隔 / 仕様.アイテム) != 0: return
        #│＼（対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●アイテムを抽選する
        アイテムID = self.Fnアイテム_選定()
        if アイテムID is None: return
        #│
        #●アイテムを生成する
        X座標 = pyxel.rndi(0, pyxel.width - 8)
        敵機出現(X座標, -8, アイテムID, True)
       #┴
	#────────────────────────────────────
    def Fnアイテム_選定(self):
		#┬
        #●くじを用意する
        くじ = self.Fnアイテム_くじ作成()
        #│
        #●特殊効果の発動状況にしがたい、不要なくじを求める
        不要くじ = self.Fnアイテム_不要くじ作成( くじ )
        #│
        #○用意したくじから、不要なくじを削除する
        for アイテムID in 不要くじ: del くじ[ アイテムID ]
        #│
        #●くじを必要な数だけ、抽選箱に入れる
        抽選箱 = self.Fnアイテム_抽選箱作成(くじ)
        #│
        #○抽選箱からくじを引く
        抽選結果 = random.choice(抽選箱) if 抽選箱 else None
        #│
        #▼抽選結果を返す
        return 抽選結果
        
	#────────────────────────────────────    
    def Fnアイテム_くじ作成(self):
		#┬
        難易度指定  = main.DB.難易度

        # === STEP1: アイテムDBからくじを構築 ===
        使い切りID  = -1
        くじ = {}
        for アイテムID, DBレコード in アイテムDB.items():

            DB効果ID    = DBレコード[0]
            DB出現条件  = DBレコード[1][0]
            DB出現率    = DBレコード[1][1]
            DB持続性    = DBレコード[2][0]
            DBデータ    = DBレコード[2][1]

            if DB出現条件 > 難易度指定 or DB持続性 == 使い切りID:
                continue

            #◇┐永続で、上限付きかどうかを判定
            if isinstance(DBデータ, tuple) and (len(DBデータ) > 1):
                上限値 = DBデータ[1]
                #┴
            else:
                上限値 = None
                #┴

            くじ[アイテムID] = {
                    "効果ID": DB効果ID,
                    "上限値": 上限値,
                    "出現率": DB出現率,
                    "持続性": DB持続性
                    }
            #┴
        #│
        #▼くじを返す
        return くじ
	#────────────────────────────────────
    def Fnアイテム_不要くじ作成(self, 引数_くじ):
		#┬
        #○外部オブジェクトのリファレンスを用意する
        発動中  = main.DB.obj特殊効果.情報.発動中
        #│
        永続ID  = 0
        不要くじ = []
        for アイテムID, データ in 引数_くじ.items():
            #│
            #〇永続性を確認する
            if データ["持続性"] != 永続ID: continue
            #│＼（永続効果ではない場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #│
            #〇効果ＩＤを控える
            効果ID = データ["効果ID"]
            if 効果ID not in 発動中: continue
            #│＼（発動していない場合）
            #│ ↓
            #│ ▼繰り返し処理をスキップする
            #│
            #〇上限値を控える
            上限値 = データ["上限値"]
            if 上限値 is None:
            #　 ＼（永続・上限なしの場合）
                #↓
                #〇不要くじの一覧に加える
                #▼処理を中断する
                不要くじ.append(アイテムID)
                continue
                #┴
            #│
            #◇┐永続 + 上限あり → 上限到達で除外
            _, 現在値 = 発動中[効果ID]
            if (
                isinstance(現在値, (int, float)) and not isinstance(現在値, bool) and
                現在値 >= 上限値
                ):
            #　├┐（永続効果で上限に達している場合）
                #↓
                #〇不要くじの一覧に加える
                不要くじ.append(アイテムID)
                #┴
            #│└┐（その他）
            #┴　┴
        #│
        #▼不要くじを返す
        return 不要くじ
	#────────────────────────────────────
    def Fnアイテム_抽選箱作成(self, 引数_くじ):
		#┬
        #○外部オブジェクトのリファレンスを用意する
        発動中 = main.DB.obj特殊効果.情報.発動中
        #│
        #◎└┐当選率に従い、くじの数を増やす
        抽選箱 = []
        for アイテムID, データ in 引数_くじ.items():
            #│
            #○
            効果ID = データ["効果ID"]
            出現率 = データ["出現率"]
            #│
            #○発動中の効果IDの出現率は半分にする
            if 効果ID in 発動中: 出現率 = 出現率 // 2
            #│
            #○出現率に応じた数のくじを抽選箱に加える
            抽選箱.extend([アイテムID] * 出現率)
            #┴
        #│
        #▼抽選箱を返す        
        return 抽選箱