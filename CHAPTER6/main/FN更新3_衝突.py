#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃更新機能：衝突
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.DB
from   キャラクタ import 機体ID
from   共通		  import class汎用 as 共通

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #○自機の弾攻撃で、更新(衝突判定)する
        self.Fnセット_攻撃( [
                main.DB.obj敵機     ,
                main.DB.obj弾_敵機  ] )
        #│
        #○自機の体当たりで、更新(衝突判定)する
        self.Fnセット_体当たり( [
                main.DB.objアイテム ,
                main.DB.obj敵機     ,
                main.DB.obj弾_敵機  ] )
        #┴

    #┌───────────────────────────────────
    #│対象セット処理
    #└───────────────────────────────────
    def Fnセット_攻撃(self         ,
            引数_対象セット ):  #① 対象オブジェクト一覧のセット
		#┬
        #○自機の存在を確認する
        if not main.DB.obj弾_自機: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐対象に攻撃する
        for tmp弾 in main.DB.obj弾_自機.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #◎└┐対象に体当たりする
            for tmp対象一覧 in 引数_対象セット:
                #│＼（すべての対象を照会し終えた場合）
                #│ ↓
    			#│ ▼繰り返し処理を終える
                #●敵機を攻撃する
                if self.Fn判定_攻撃(tmp弾, tmp対象一覧): break
                #│＼（弾が破壊された場合）
                #│ ↓
    			#│ ▼次の弾を照会する
        #┴　┴　┴
	#────────────────────────────────────	
    def Fnセット_体当たり(self  ,
            引数_対象セット     ):  #① 対象オブジェクト一覧のセット
		#┬
        #○自機の存在を確認する
        if not main.DB.obj自機: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎└┐自機を体当たりする
        for tmp自機 in main.DB.obj自機:
            #│＼（すべて自機を照会し終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を終える
			#│
            #◎└┐対象に体当たりする
            for tmp対象一覧 in 引数_対象セット:
                #│＼（すべての対象を照会し終えた場合）
                #│ ↓
    			#│ ▼繰り返し処理を終える
                #│
                #●アイテムに体当たりする
                if self.Fn判定_体当たり(tmp自機, tmp対象一覧): break
                #│＼（自機が破壊された場合）
                #│ ↓
    			#│ ▼次の自機を照会する
        #┴　┴　┴

    #┌───────────────────────────────────
    #│衝突判定
    #└───────────────────────────────────
    def Fn判定_攻撃(self    ,   #【戻り値】 True:破壊された／False：存在する
            引数_弾         ,   #① 自分のオブジェクト(弾)
            引数_対象一覧 ) :  #② 相手のオブジェクト(アイテム/敵機/弾)
		#┬
        #○自分の衝突条件を用意する
        条件_弾 = (引数_弾.情報.X, 引数_弾.情報.Y)
        条件_弾 = (条件_弾, 引数_弾.FN衝突.仕様.衝突範囲)
        #│
        #◎└┐相手を処理する
        for tmp対象 in 引数_対象一覧.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #○相手の衝突条件を用意する
            条件_対象 = (tmp対象.情報.X, tmp対象.情報.Y)
            条件_対象 = (条件_対象, tmp対象.FN衝突.仕様.衝突範囲)
			#│
            #●自分と相手の衝突を判定する
            if not 共通.Fn衝突判定(条件_弾, 条件_対象): continue
            #│＼（衝突していない場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●機雷との衝突を処理する
            if self.Fn機雷_確認(tmp対象): 
            #　 ＼（相手が機雷の場合）
                #↓
                #●敵機・弾(自機)・弾(敵機)を全滅する
                #▼弾が『破壊された』を返す
                main.DB.Fnキャラクタ壊滅(main.DB.obj敵機    )
                main.DB.Fnキャラクタ壊滅(main.DB.obj弾_自機 )
                main.DB.Fnキャラクタ壊滅(main.DB.obj弾_敵機 )
                return True
            #│
            #●弾(自機)での攻撃を処理する
            if self.Fn衝突_攻撃(引数_弾, tmp対象): return True
            #│＼（弾が存在しない場合）
            #│ ↓
            #│ ▼弾が『破壊された』を返す
            #┴
        #│
        #▼弾が『存在する』を返す
        return False
	#────────────────────────────────────	
    def Fn判定_体当たり(self,   #【戻り値】 True:破壊された／False：存在する
            引数_自機       ,   #① 自分のオブジェクト(自機)
            引数_対象一覧   ):  #② 相手のオブジェクト(アイテム/敵機/弾)
		#┬
        #○自分の衝突条件を用意する
        条件_自機 = (引数_自機.情報.X, 引数_自機.情報.Y)
        条件_自機 = (条件_自機, main.DB.obj自機共通.仕様.衝突範囲)
        #│
        #◎└┐相手を処理する
        for tmp対象 in 引数_対象一覧.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #○相手の衝突条件を用意する
            条件_対象 = (tmp対象.情報.X, tmp対象.情報.Y)
            条件_対象 = (条件_対象, tmp対象.FN衝突.仕様.衝突範囲)
			#│
            #●自分と相手の衝突を判定する
            if not 共通.Fn衝突判定(条件_自機, 条件_対象): continue
            #│＼（衝突していない場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●機雷との衝突を処理する
            if self.Fn機雷_確認(tmp対象): 
            #　 ＼（相手が機雷の場合）
                #↓
                #●機雷を破壊する
                #●自機を全滅する
                #▼自機が『破壊された』を返す
                tmp対象.FN衝突.実行()
                引数_自機.FN衝突.実行()
                return True
            #│
            #●自機での体当たりを処理する
            if self.Fn衝突_体当たり(引数_自機, tmp対象): return True
            #│＼（自機が存在しない場合）
            #│ ↓
            #│ ▼自機が『破壊された』を返す
            #┴
        #│
        #▼自機が『存在する』を返す
        return False

    #┌───────────────────────────────────
    #│機雷
    #└───────────────────────────────────
    def Fn機雷_確認(self,   #【戻り値】 True:機雷／False：機雷以外
            引数_対象   ):  #① 相手のオブジェクト(アイテム/敵機/弾)
		#┬
        #○条件を確認する
        if 引数_対象.仕様.アイテム区分            : return False
        if 引数_対象.仕様.ボス区分                : return False
        if 引数_対象.仕様.種類ID != 機体ID.機雷   : return False
        #│＼（対象が『機雷以外』の場合）
        #│ ↓
        #│ ▼『機雷以外』を返す
        #│
        #▼『機雷』を返す
        return True


    #┌───────────────────────────────────
    #│衝突処理
    #└───────────────────────────────────
    def Fn衝突_攻撃(self,   #【戻り値】 True:破壊された／False：存在する
            引数_弾     ,   #① 自分のオブジェクト(弾)
            引数_対象   ):  #② 衝突対象のオブジェクト(アイテム,敵機,弾)
		#┬
        #○条件を確認する
        if 引数_対象.仕様.アイテム区分: return
        #│＼（アイテムの場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●攻撃対象にダメージを与える
        #●自分の弾を破壊する
        引数_対象.FN衝突.実行( main.DB.obj自機共通.仕様.威力_弾 )
        引数_弾.FN衝突.実行()
        #│
        #▼弾の破壊可否を返す
        return (引数_弾 not in main.DB.obj弾_自機)
	#────────────────────────────────────	
    def Fn衝突_体当たり(self,   #【戻り値】 True:破壊された／False：存在する
            引数_自機       ,   #① 自分のオブジェクト(自機)
            引数_対象       ):  #② 衝突対象のオブジェクト(アイテム,敵機,弾)
		#┬
        #◇┐衝突を処理する
        if 引数_対象.仕様.アイテム区分:
        #　├┐（相手が『アイテム』の場合）
            #↓
            #●アイテムの効果を発動する
            #●アイテムを消滅する
            main.DB.obj特殊効果.FN衝突.実行( 引数_対象 )
            引数_対象.FN衝突.実行( 0, 0 )
            #┴ 
        else:
        #　└┐（その他）
            #↓
            #●自機にダメージ(体当たり)を与える
            #●相手にダメージ(体当たり)を与える
            引数_自機.FN衝突.実行( 引数_対象.FN衝突.仕様.威力 )
            引数_対象.FN衝突.実行( main.DB.obj自機共通.仕様.威力_体当たり )
        #│
        #▼自機の破壊状況を返す
        return (引数_自機 not in main.DB.obj自機)
