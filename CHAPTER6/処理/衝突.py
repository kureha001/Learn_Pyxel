#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通
from キャラクタ	import class自機
from キャラクタ	import class標的

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class衝突処理:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○ 自機の存在を調べる
        if self.GAME.obj自機 is None: return
        #　＼（自機が存在しない場合）
            #↓
            #▼処理を中断する
        #│
        #○標的を攻撃する
        self.Fn攻撃()
        #│
        #標的の弾を被弾する
        self.Fn衝突(self.GAME.obj弾_標的)
        if self.GAME.obj自機 is None: return
        #　＼（自機が存在しない場合）
            #↓
            #▼処理を中断する
        #│
        #○自機と標的が衝突する
        self.Fn衝突(self.GAME.obj標的)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃攻撃
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn攻撃(self):
		#┬
		#◎└┐すべての弾(自機)を更新する
        for obj弾 in self.GAME.obj弾_自機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●機雷を攻撃する
            if self.Fn攻撃_機雷(obj弾): return
            #│
            #●機雷以外の標的を攻撃する
            if self.Fn攻撃_機雷以外( obj弾, self.GAME.obj標的   ): return
            #│
            #●標的の弾を攻撃する
            self.Fn攻撃_機雷以外( obj弾, self.GAME.obj弾_標的   )
        #┴　┴
	#────────────────────────────────────
    def Fn攻撃_機雷(self,
            arg弾):     #① 弾(自機)オブジェクト
		#┬
        #◎└┐標的を攻撃する
        for obj対象 in self.GAME.obj標的.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #○機種を調べる
            if obj対象.機種 != class標的.定数_機雷: continue
            #　＼（標的が機雷以外の場合）
                #↓
                #▼次の標的を処理する
            #│
            #●命中状況を調べる
            if not 共通.Fn衝突判定(obj対象, arg弾): continue
            #　＼（命中していない場合）
                #↓
                #▼次の標的を処理する
            #│
            #◎└┐機雷を発動する
                #●標的を壊滅する
                #●弾(自機)を壊滅する
                #●弾(標的)を壊滅する
            self.Fn攻撃_機雷_発動(self.GAME.obj標的) 
            self.Fn攻撃_機雷_発動(self.GAME.obj弾_自機) 
            self.Fn攻撃_機雷_発動(self.GAME.obj弾_標的) 
                #┴
            #│
            #▼命中『あり』を返す
            return True
        #│
        #▼命中『なし』を返す
        return False
	#────────────────────────────────────	
    def Fn攻撃_機雷_発動(self,
            arg対象):   #① 弾(自機)オブジェクト
		#┬
        #◎└┐標的を攻撃する
        for obj対象 in arg対象.copy():
            #●対象を壊滅する
            obj対象.衝突処理(arg無条件破壊 = True) 
        #┴　┴

	#────────────────────────────────────	
    def Fn攻撃_機雷以外(self,
            arg弾,      #① 弾(自機)オブジェクト
            arg対象):   #① 対象オブジェクト
		#┬
        #◎└┐標的を攻撃する
        for obj対象 in arg対象.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #○撃墜可否を調べる
            if not obj対象.撃墜可能: continue
            #　＼（標的の属性が『撃墜できない』タイプ場合）
                #↓
                #▼次の標的を処理する
            #│
            #●命中状況を調べる
            if not 共通.Fn衝突判定(obj対象, arg弾): continue
            #　＼（命中していない場合）
                #↓
                #▼次の標的を処理する
            #│
            #●弾(自機)を爆破する
            #●標的を攻撃する
            arg弾.衝突処理()
            obj対象.衝突処理()
            #│
            #▼命中『あり』を返す
            return True
        #│
        #▼命中『なし』を返す
        return False

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃衝突
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn衝突(self,
            arg対象):     #① 弾(自機)オブジェクト
		#┬
		#◎└┐すべての標的を更新する
        for obj対象 in arg対象.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #○ 自機の存在を調べる
            if self.GAME.obj自機 is None: return
            #　＼（自機が存在しない場合）
                #↓
                #▼処理を中断する
            #│
            #●衝突状況を調べる
            if not 共通.Fn衝突判定(obj対象, self.GAME.obj自機): continue
            #　＼（命中していない場合）
                #↓
                #▼次の標的を処理する
            #│
            #◇┐双方にダメージを与える
            if obj対象.撃墜可能:
            #　├┐（対応法が『破壊型』の場合）
                #↓
                #●自機にダメージを与える
                #●標的にダメージを与える
                self.GAME.obj自機.衝突処理()
                obj対象.衝突処理()
                #┴
            else:
            #　└┐（その他）
                #↓
                #●アイテムを得る
                #●アイテムを消滅する
                self.Fn処理_アイテム取得(obj対象)
                obj対象.衝突処理(0, arg無条件破壊 = True)
                #┴
            #　└┐（その他）
            #┴　┴
	#────────────────────────────────────	
    def Fn処理_アイテム取得(self,
            arg対象):     #① 弾(自機)オブジェクト

 		#┬
        #◇┐特殊効果を発動する
        if arg対象.機種 == class標的.定数_機雷:
        #　├┐（機雷の場合）
            #↓
            #〇すべての弾(標的)を消滅する
            #▼機雷炸裂有無を『あり』で返す
            return True

        elif arg対象.機種 == class標的.定数_救急箱:
        #　├┐（救急箱の場合）
            #↓
            #〇自機のシールドを満タンにする
            #〇すべての弾(標的)を消滅する
            self.GAME.obj自機.シールド = pyxel.width

        elif arg対象.機種 == class標的.定数_弾薬庫:
        #　├┐（弾薬の場合）
            #↓
            #〇自機の弾を満タンにする
            self.GAME.obj自機.弾数 = class自機.定数_積載量

        #　└┐（その他）
            #┴
        #│
        #▼機雷炸裂有無を『なし』で返す
        return False

