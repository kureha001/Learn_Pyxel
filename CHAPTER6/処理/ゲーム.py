#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃処理（ゲーム本体）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from ._定数         import *
from シーン         import classタイトル, classプレイ, class終了
from 演出	        import class背景

# 更新処理リストの要素
from .更新1_移動    import class移動処理
from .更新2_除外    import class除外処理
from .更新3_発射    import class発射処理
from .更新4_衝突    import class衝突処理
from .更新5_出現    import class出現処理

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠─────────────────────────────────────
#┃ゲーム進行を管理する情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #□動的データ
        self.シーン     = None  # タイトル→プレイ→終了→タイトル...と移る
        self.プレイ時間 = 0     # 難易度の変化，出現タイミングの物差し
        self.難易度     = 0     # 敵の強さ、出現頻度の物差し
        self.得点       = 0     # プレイヤーの得点
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┠─────────────────────────────────────
#┃ゲームの初期化、処理の流れを司る
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classGame:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠───────────────────────────────────
    #┃・必要なデータセットをオブジェクトで用意する
    #┃・必要なオブジェクトのインスタンスを用意する ※必要に応じて実体化
    #┃・必要な処理オブジェクトを用意する
    #┃・最初のシーン(タイトル)で立ち上げる
    #┃・フレーム(30fps毎に)処理する関数を登録する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #□└┐インスタンス ※必要に応じてオブジェクト化する
            #□自機
            #□標的
            #□弾(自機)
            #□弾(敵機)
            #□爆発
        self.obj自機        = None
        self.obj標的        = []
        self.obj弾_自機     = [] 
        self.obj弾_標的     = [] 
        self.obj爆発        = [] 
        #│
        #□ゲーム情報
        self.情報 = class情報()
		#┴　┴

		#┬
        #○Pyxelを初期化する
        self.初期化_リソース()
        #│
        #○背景をオブジェクト化する
        self.F背景 = class背景(self)
        #│
        #○更新処理のリストを作る ※処理する順に格納
        self.FN更新処理 = (
                class移動処理(self) ,
                class除外処理(self) ,
                class発射処理(self) ,
                class衝突処理(self) ,
                class出現処理(self) )
        #│
        #○描画処理のリストを作る ※処理する順に格納
        self.FN描画処理 = (
                self.obj標的    ,
                self.obj弾_自機 ,
                self.obj弾_標的 ,
                self.obj爆発    )
        #│
        #●シーンの処理ををオブジェクト化する
        self.Fシーン = {
                classタイトル.ID    : classタイトル(self)   ,
                classプレイ.ID      : classプレイ(self)     ,
                class終了.ID        : class終了(self)       }
            #┴
        #│
        #●シーンを切替える(タイトル)
        self.Fシーン[ class終了.ID ].Fn切替()
        #│
        #○ゲームの実行を開始する
        pyxel.run(self.更新処理,self.描画処理)
		#┴　┴
	#────────────────────────────────────	
    def 初期化_リソース(self):
		#┬
		#○画面を初期化する
		#○リソースファイルを読み込む
        pyxel.init(120, 160, title="Mega Wing  Ver.2025/05/03-02")
        pyxel.load("../リソース/mega_wing.pyxres")
		#│
		#○Soundデータを登録する
        pyxel.sounds[50].mml(
                "t100 @1 o2 q7 v7 l4" +
                "l8d4a4g2.fed4c<b->c<a>e4d1.a4>" +
                "c4<b2.gfe4fga1&a1d4a4g2.fed4c<b->c<a>e4d1." )
        pyxel.sounds[51].mml(
                "t100 @0 o1 q7 v4 l2" +
                "l8dafadbgbd>c<a>c<db-fb-e>c<a>c" +
                "<daf+adaf+agb-a>c" +
                "<dafadbgbdbgbdb-g+b-c" +
                "+aeadaeac+aea<b>ac+adafadbgbd>c" +
                "<a>c<db-fb-e>c<a>c<daf+adaf+adaf+a" )
		#│
		#○Musicデータを登録する
        pyxel.musics[7].set([50],[51])
		#┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
    #┠───────────────────────────────────
    #┃・背景を更新(移動処理)する
    #┃・キャラクタを更新(移動,除外,発射,出現,衝突)する
    #┃・シーンを更新(移動処理)する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #●背景を更新する
        self.F背景.更新処理()
        #│
        #◎└┐キャラクタを更新する
        for tmp処理 in self.FN更新処理: tmp処理.実行()
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●キャラクタを更新する
            #┴ 
        #│
        #●シーンを更新する        
        self.Fシーン[ self.情報.シーン ].更新処理()
		#┴ 	┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
    #┠───────────────────────────────────
    #┃・背景を描画する
    #┃・キャラクを描画する
    #┃・ゲーム情報を描画する
    #┃・シーンを描画する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●背景を描画する
        self.F背景.描画処理()
        #│
        #◇┐キャラクタ(自機)を描画する
        if self.obj自機 is not None:
        #　├┐（自機が存在する場合）
            #↓
            #●自機を描画する
            self.obj自機.描画処理()
			#┴
		#　└┐（その他）
			#┴
        #│
        #◎└┐キャラクタ(自機以外)を描画する
        for tmp処理 in self.FN描画処理:
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●キャラクタを描画する
            self.Fn描画処理(tmp処理)
            #┴ 
        #│
        #〇└┐ゲーム情報を描画する
            #〇得点を描画する
            #〇難易度を描画する
        pyxel.text( 5, 2, f"SCORE:{ self.情報.得点   }", 7)
        pyxel.text(85, 2, f"LEVEL:{ self.情報.難易度 }", 7)
            #┴
        #│
        #●シーンを描画する
        self.Fシーン[ self.情報.シーン ].描画処理()
        #┴　┴
	#────────────────────────────────────	
    def Fn描画処理(self,
            argオブジェクト):   #① リスト・オブジェクト
		#┬
        #◎└┐オブジェクトのすべてのキャラクタを描画する
        for tmpObj in argオブジェクト:
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #●ひとつずつ描画する
            tmpObj.描画処理()
        #┴　┴