#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通, class入力操作 as 入力
from キャラクタ	import class自機, class敵機, class弾

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class更新処理:

    #┬
    #□└┐出現間隔
        #□救急箱
        #□機雷
        #□弾薬
    定数_間隔_救急箱    = 1700
    定数_間隔_機雷      = 750
    定数_間隔_弾薬      = 400
    #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴
		#┬
        #〇自機を生成する
        self.GAME.F更新  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #●背景を更新する
        self.GAME.obj背景.更新処理()
        #│
        #○自機を更新する
        #○敵機を更新する
        self.Fn自機()
        self.Fn敵機()
		#│
        #○弾(自機)を更新する
        #○弾(敵機)を更新する
        self.Fn弾_自機()
        self.Fn弾_敵機()
		#│
        #●爆発を更新する
        self.Fn爆発()
		#│
        #●シーンを更新する
        if   self.GAME.シーン == 共通.定数_シーン_タイトル: self.Fnシーン_タイトル()
        elif self.GAME.シーン == 共通.定数_シーン_プレイ  : self.Fnシーン_プレイ()
        elif self.GAME.シーン == 共通.定数_シーン_終了    : self.Fnシーン_終了()
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn自機(self):
		#┬
        #◇┐自機を更新する
        if self.GAME.obj自機 is not None:
        #　├→（自機が存在する場合）
            #●自機を更新する
            self.GAME.obj自機.更新処理()
			#┴
		#　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fn敵機(self):
		#┬
		#◎└┐すべての敵機を更新する
        for tmpObj in self.GAME.obj敵機.copy():
			#│＼（すべての敵機を処理し終えた）
			#│ ▼繰り返し処理を抜ける
            #●ひとつずつ敵機を更新する
            tmpObj.更新処理()
            #│
            #◇┐自機と衝突する
            if self.GAME.obj自機 is not None:
            #　├→（自機が存在し、衝突している場合）
                #●自機との衝突を調べる
                if 共通.Fn衝突判定(self.GAME.obj自機, tmpObj):
                #　 ＼（衝突している場合）
                    #●自機を衝突させる
                    self.GAME.obj自機.衝突処理()
                #┴　┴
            #　└┐（その他）
        #┴　┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn弾_自機(self):
		#┬
		#◎└┐すべての弾(自機)を更新する
        for obj弾 in self.GAME.obj弾_自機.copy():
			#│＼（すべての弾を処理し終えた）
			#│ ▼繰り返し処理を抜ける
            #●ひとつずつ弾(自機)を更新する
            obj弾.更新処理()
            #│
            #◎└┐すべての敵機との衝突判定を行う
            for obj敵 in self.GAME.obj敵機.copy():
                #│＼（すべて処理し終えた場合）
                #│ ▼繰り返し処理を抜ける
                #●ひとつずつ調べる
                if 共通.Fn衝突判定(obj敵, obj弾):
                #　 ＼（衝突している場合）
                    #●弾(自機)を消滅させる
                    obj弾.衝突処理()
                    #│
                    #●敵機を爆発させる
                    if obj敵.衝突処理():
                    #　 ＼（機雷を爆破した場合）
                        #◎└┐すべての敵機を爆発させる
                        for obj消滅 in self.GAME.obj敵機.copy():
                            #●ひとつずつ爆発させる
                            obj消滅.衝突処理(True) 
                        #▼処理を中断する
                        return
                #┴　┴
            #│
            #◎└┐すべての弾(敵機)との衝突判定を行う
            for obj敵 in self.GAME.obj弾_敵機.copy():
                #│＼（すべて処理し終えた場合）
                #│ ▼繰り返し処理を抜ける
                #●ひとつずつ調べる
                if 共通.Fn衝突判定(obj敵, obj弾):
                #　 ＼（衝突している場合）
                    #●弾(自機)を消滅させる
                    #●弾(敵機)を消滅させる
                    obj弾.衝突処理()
                    obj敵.衝突処理()
        #┴　┴　┴　┴
	#────────────────────────────────────	
    def Fn弾_敵機(self):
		#┬
        #◎└┐すべての弾(敵機)を更新する
        for obj弾 in self.GAME.obj弾_敵機.copy():
            #│＼（すべての弾(敵機)を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●ひとつずつ弾(敵機)を更新する
            obj弾.更新処理()
            #│
            #◇┐自機との衝突を処理する
            if self.GAME.obj自機 is not None:
            #　├→（自機が存在する場合）
                #●自機との位置関係を調べる
                if 共通.Fn衝突判定(self.GAME.obj自機, obj弾):
                #　 ＼（衝突している場合）
                    #●弾(敵機)を命中させる
                    #●自機を被弾させる
                    obj弾.衝突処理()
                    self.GAME.obj自機.衝突処理()
        #┴　┴　┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn爆発(self):
		#┬
        #◎└┐すべての爆発を更新する
        for tmpObj in self.GAME.obj爆発.copy():
            #│＼（すべての爆発を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●ひとつずつ爆発を更新
            tmpObj.更新処理()
        #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fnシーン_タイトル(self):
        #◇┐ゲームを開始する
        if 入力.Funワンキー() == -1:
        #　├→（『離された』場合）
            #○BGMの再生を止める
            #●シーンを切替える(プレイ)
            pyxel.stop()
            self.GAME.共通_シーン_プレイ()
            #┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fnシーン_プレイ(self):
        #○プレイ時間をカウントアップする
        #○15秒毎に難易度を上げる ※最大８
        #○出現間隔をセットする
        self.GAME.プレイ時間 += 1
        self.GAME.難易度 = min( (self.GAME.プレイ時間 // 450 + 1) , 8 )
        間隔 = max(60 - self.GAME.難易度 * 10, 30)
        #│
        #◇┐機雷を追加する
        if self.GAME.プレイ時間 % self.定数_間隔_機雷 == 0:
        #　├→（機雷の出現タイミングの場合）
            class敵機(
                self.GAME,
                pyxel.rndi( 0, pyxel.width - 8 ), -8,
                class敵機.定数_機雷,
                pyxel.rndi( 3, 5 )
                )
        #│
        #◇┐救急箱を追加する
        if self.GAME.プレイ時間 % self.定数_間隔_救急箱 == 0:
        #　├→（救急箱の出現タイミングの場合）
            class敵機(
                self.GAME,
                pyxel.rndi( 0, pyxel.width - 8 ), -8,
                class敵機.定数_救急箱,
                pyxel.rndi( 3, 5 )
                )
        #│
        #◇┐弾薬を追加する
        if self.GAME.プレイ時間 % self.定数_間隔_弾薬 == 0:
        #　├→（弾薬の出現タイミングの場合）
            class敵機(
                self.GAME,
                pyxel.rndi( 0, pyxel.width - 8 ), -8,
                class敵機.定数_弾薬,
                pyxel.rndi( 3, 5 )
                )
        #│
        if self.GAME.プレイ時間 % 間隔 == 0:
        #　├→（戦闘機の出現タイミングの場合）
            #○機種をランダムに求める
            #●求めた機種で、敵機を生成する
            機種  = pyxel.rndi(class敵機.定数_機種A, class敵機.定数_機種C)
            class敵機(self.GAME, pyxel.rndi(0, 112), -8, 機種, self.GAME.難易度)
            #┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fnシーン_終了(self):
        #◇┐待ち時間を減らす
        if self.GAME.終了待ち > 0:
        #　├→（画面表示時間が残っている場合）
            #●待ち時間をカウントダウンする
            self.GAME.終了待ち -= 1
            #┴
        else:
        #　└┐（その他）
            #●シーンを切替える(タイトル)
            self.GAME.共通_シーン_タイトル()
        #┴　┴
