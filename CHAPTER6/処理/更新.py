#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通
from .更新_弾   import class更新処理_弾

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class更新処理:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴
        #│
        #○└┐オブジェクト化する
            #●更新処理(弾)をオブジェクト化する
        self.F弾    = class更新処理_弾(引数_生成先)

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #●背景を更新する
        self.GAME.obj背景.更新処理()
        #│
        #○└┐キャラクターを更新する
            #○自機を更新する
            #○アイテムを更新する
            #○敵機を更新する
        self.Fn自機()
        self.Fnターゲット(self.GAME.objアイテム )
        self.Fnターゲット(self.GAME.obj敵機     )
			#┴
		#│
        #●弾を更新する
        self.F弾.実行()
		#│
        #●爆発を更新する
        self.Fn爆発()
		#│
        #●シーン別処理を実行する
        self.GAME.Fシーン.実行()
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn自機(self):
		#┬
        #◇┐自機を更新する
        if self.GAME.obj自機 is not None:
        #　├┐（自機が存在する場合）
            #↓
            #●自機を更新する
            self.GAME.obj自機.更新処理()
			#┴
		#　└┐（その他）
        #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fnターゲット(self,arg対象):
		#┬
		#◎└┐すべてのターゲットを更新する
        for tmpObj in arg対象.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #○自機の状態を調べる
            if self.GAME.obj自機 is None:
            #　＼（自機が存在しない場合）
                #↓
                #▼処理を中断する
                return
            #│
            #●ひとつずつ更新する
            tmpObj.更新処理()
            #│
            #●自機とターゲットの衝突有無を調べる
            衝突有無 = 共通.Fn衝突判定(self.GAME.obj自機, tmpObj)
            #│
            #◇┐体当たりさせる
            if 衝突有無:
            #　├┐（衝突『あり』の場合）
                #↓
                #○ターゲットの対応法を調べる
                対応方法 = tmpObj.Fn判定_対応法()
                #│
                #◇┐自機をターゲットに体当たりする
                if 対応方法 == 1:
                #　├┐（対応法が『破壊型』の場合）
                    #↓
                    #●自機を衝突させる
                    #●敵機を衝突させる
                    self.GAME.obj自機.衝突処理()
                    tmpObj.衝突処理()

                elif 対応方法 == 2:
                #　├┐（対応法が『回収型』の場合）
                    #↓
                    #●敵機を衝突させる(無条件破壊[はい]、爆発アニメ[なし])
                    tmpObj.衝突処理(
                        arg無条件破壊   = True,
                        arg爆発アニメ   = False
                        )

                #　└┐（その他）
            #┴　┴　┴
 
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn爆発(self):
		#┬
        #◎└┐すべての爆発を更新する
        for tmpObj in self.GAME.obj爆発.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ爆発を更新
            tmpObj.更新処理()
        #┴　┴