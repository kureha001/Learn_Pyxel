#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃処理（ゲーム本体）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    シーン          import *
from    背景	        import *
import  処理._参照
from    .FN更新1_移動   import 移動クラス
from    .FN更新2_発射   import 発射クラス
from    .FN更新3_衝突   import 衝突クラス
from    .FN更新4_出現   import 出現クラス

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class ゲーム本体:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠───────────────────────────────────
    #┃・必要なデータセットをオブジェクトで用意する
    #┃・必要なオブジェクトのインスタンスを用意する ※必要に応じて実体化
    #┃・必要な処理オブジェクトを用意する
    #┃・最初のシーン(タイトル)で立ち上げる
    #┃・フレーム(30fps毎に)処理する関数を登録する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #○Pyxelを初期化する
        self.初期化_リソース()
        #│
        #〇└┐処理セットをオブジェクト化する
            #≫更新処理をオブジェクト化する
        self.FN更新処理 = (
            移動クラス(self) ,
            発射クラス(self) ,
            衝突クラス(self) ,
            出現クラス(self) )
            #│
            #≫シーンをオブジェクト化する
        処理._参照.FNシーン = {
            シーンID.タイトル   : タイトルクラス(self),
            シーンID.プレイ     : プレイクラス  (self),
            シーンID.終了       : 終了クラス    (self)}
            #│
            #≫背景をオブジェクト化する
        処理._参照.背景 = 背景作成(self)
            #┴
        #│
        #≫シーンを切替える(タイトル)
        処理._参照.FNシーン[ シーンID.終了 ].FN移動.Fn切替()
        #│
        #○ゲームの実行を開始する
        pyxel.run(self.更新処理,self.描画処理)
		#┴
	#────────────────────────────────────	
    def 初期化_リソース(self):
		#┬
		#○画面を初期化する
		#○リソースファイルを読み込む
        pyxel.init(120, 160, title="Mega Wing  Ver.2025/05/03-02")
        pyxel.load("../リソース/改造版.pyxres")
		#│
		#○Soundデータを登録する
        pyxel.sounds[50].mml(
                "t100 @1 o2 q7 v7 l4" +
                "l8d4a4g2.fed4c<b->c<a>e4d1.a4>" +
                "c4<b2.gfe4fga1&a1d4a4g2.fed4c<b->c<a>e4d1." )
        pyxel.sounds[51].mml(
                "t100 @0 o1 q7 v4 l2" +
                "l8dafadbgbd>c<a>c<db-fb-e>c<a>c" +
                "<daf+adaf+agb-a>c" +
                "<dafadbgbdbgbdb-g+b-c" +
                "+aeadaeac+aea<b>ac+adafadbgbd>c" +
                "<a>c<db-fb-e>c<a>c<daf+adaf+adaf+a" )
		#│
		#○Musicデータを登録する
        pyxel.musics[7].set([50],[51])
		#┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
    #┠───────────────────────────────────
    #┃・背景を更新(移動処理)する
    #┃・キャラクタを更新(移動,除外,発射,出現,衝突)する
    #┃・シーンを更新(移動処理)する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #◎└┐キャラクタを更新する
        for tmp処理 in self.FN更新処理: tmp処理.実行()
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●キャラクタを更新する
		#┴ 	┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
    #┠───────────────────────────────────
    #┃・背景を描画する
    #┃・キャラクを描画する
    #┃・ゲーム情報を描画する
    #┃・シーンを描画する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●背景・キャラクタを描画する
        self.Fn描画((
                処理._参照.背景    ,
                処理._参照.自機    ,
                処理._参照.敵機    ,
                処理._参照.アイテム,
                処理._参照.弾_自機 ,
                処理._参照.弾_敵機 ,
                処理._参照.爆発    ,
                処理._参照.FNシーン[ 処理._情報.シーン]))
        #│
        #〇└┐ゲーム情報を描画する
            #〇得点を描画する
            #〇難易度を描画する
        pyxel.text( 5, 2, f"SCORE:{ 処理._情報.得点   }", 7)
        pyxel.text(85, 2, f"LEVEL:{ 処理._情報.難易度 }", 7)
            #┴
        #┴　┴
	#────────────────────────────────────	
    def Fn描画(self, 引数_処理リスト):
		#┬
		#◎└┐すべてのオブジェクトを描画する
        for tmp処理 in 引数_処理リスト:
			#│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #◇┐要素オブジェクトを描画する
            if isinstance(tmp処理, list):
            #　├┐（リストオブジェクトの場合）
                #↓
                #◎└┐要素オブジェクトを描画する
                for tmp要素 in tmp処理:
                    #│＼（すべての処理を終えた場合）
                    #│ ↓
                    #│ ▼繰り返し処理を抜ける
                    #│
                    #●オブジェクトを描画する
                    tmp要素.FN描画.実行()
                    #┴ 

            elif tmp処理 is not None:
            #　├┐（折返しタイミングの場合）
                #↓
                #●オブジェクトを描画する
                tmp処理.FN描画.実行()
            #　└┐（その他）
        #┴　┴　┴
