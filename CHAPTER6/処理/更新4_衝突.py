#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel                                       # シールド満タンの算出
from    共通		import class汎用    as 共通     # 衝突判定
from    キャラクタ	import class種類    as 種類ID   # 相手の識別

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class衝突処理:

    #┬
    #□└┐与えるダメージの威力
        #□弾による攻撃
        #□体当たり
    定数_威力_弾        = 5
    定数_威力_体当たり  = 3
    #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先 ):  #① 生成先のオブジェクト
		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○弾で攻撃する
        self.Fn攻撃()
        #│
        #○体当たりする
        self.Fn体当たり()
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn攻撃(self):
		#┬
		#◎└┐弾(自機)をぶつける
        for tmp弾 in self.GAME.obj弾_自機.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●弾(自機)を標的にぶつける
            if self.Fn衝突判定(True, tmp弾, self.GAME.obj標的): continue
            #│＼（この弾が消失した場合）
            #│ ↓
            #│ ▼処理を中断する
			#│
            #●弾(自機)を弾(標的)にぶつける
            self.Fn衝突判定(True, tmp弾, self.GAME.obj弾_標的)
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn体当たり(self):
		#┬
        #○自機の状態を確認する
        obj自機 = self.GAME.obj自機
        if obj自機 is None: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼繰処理を中断する
        #│
        #●自機を標的にぶつける
        if self.Fn衝突判定(False, obj自機, self.GAME.obj標的): return
        #│＼（自機が消失した場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●自機を弾(標的)にぶつける
        self.Fn衝突判定(False, obj自機, self.GAME.obj弾_標的)
        #┴　┴

	#────────────────────────────────────	
    def Fn衝突判定(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg自分,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #◎└┐標的を処理する
        for tmp相手 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●衝突状況を確認する
            if not 共通.Fn衝突判定(arg自分, tmp相手): continue
            #│＼（衝突していない場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●機雷との衝突を処理する
            if self.Fn衝突_機雷(arg弾攻撃, arg自分, tmp相手): return True 
            #│＼（機雷が作動した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #│
            #●弾(自機)での攻撃を処理する
            self.Fn衝突_弾攻撃(arg弾攻撃, arg自分, tmp相手)
            if self.Fn消失確認(arg弾攻撃, arg自分): return True
            #│＼（手段が消失した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #│
            #●自機での体当たりを処理する
            self.Fn衝突_体当たり(arg弾攻撃, arg自分, tmp相手)
            if self.Fn消失確認(arg弾攻撃, arg自分): return True
            #│＼（手段が消失した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #┴
        #│
        #▼手段が『存在する』を返す
        return False

	#────────────────────────────────────	
    def Fn消失確認(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg自分):       #② 自分のオブジェクト(自機,弾)
		#┬
        #◇┐弾を補充する
        if arg弾攻撃:
        #　├┐（体当たりの場合）
            #↓
            #◇┐弾を補充する
            if arg自分 in self.GAME.obj弾_自機: return False
            #　├┐（弾が存在する場合）
                #↓
                #▼『消失していない』を返す
            #　└┐（その他）
            #┴　┴
        else:
        #　└┐（その他）
            if arg自分 is not None: return False
            #　├┐（自機が存在する場合）
                #↓
                #▼『消失していない』を返す
            #　└┐（その他）
            #┴　┴
        #│
        #▼『消失した』を返す
        return True

	#────────────────────────────────────	
    def Fn衝突_機雷(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg自分,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #○条件を確認する
        if arg相手.仕様.機種 != 種類ID.機雷: return False
        #│＼（相手が機雷ではない場合）
        #│ ↓
        #│ ▼『空振り』を返す
        #│
        #●機雷を起爆する
        self.Fn機雷_起爆()
        #│
        #◇┐自機を消滅する
        if not arg弾攻撃:
        #　├┐（体当たりの場合）
            #↓
            #●自機にダメージ(ティカルヒット)を与える
            self.GAME.obj自機.衝突処理(0)
            #┴
        #　└┐（その他）
            #┴
        #│
        #▼『衝突した』を返す
        return True
	#────────────────────────────────────	
    def Fn衝突_弾攻撃(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg自分,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #○条件を確認する
        if not (arg弾攻撃 and arg相手.仕様.撃墜可否) : return
        #│＼（弾(自機)での攻撃で、相手が撃墜可能の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾(自機)にダメージ(弾攻撃)を与える
        #●相手にダメージ(弾攻撃)を与える
        arg自分.衝突処理(self.定数_威力_弾)
        arg相手.衝突処理(self.定数_威力_弾)
        #┴
	#────────────────────────────────────	
    def Fn衝突_体当たり(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg自分,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #① 相手のオブジェクト(標的,弾)
		#┬
        #○条件を確認する
        if arg弾攻撃 : return
        #│＼（弾(自機)での攻撃の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐衝突を処理する
        if arg相手.仕様.撃墜可否:
        #　├┐（相手が『撃墜可能』な場合）
            #↓
            #●自機にダメージ(体当たり)を与える
            #●相手にダメージ(体当たり)を与える
            arg自分.衝突処理(self.定数_威力_体当たり)
            arg相手.衝突処理(self.定数_威力_体当たり)
            #┴ 
        else:
        #　└┐（その他）
            #↓
            #●アイテムを得る
            #●アイテムを消滅する
            self.Fnアイテム取得(arg相手)
            arg相手.衝突処理(0,0)
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn機雷_起爆(self):
		#┬
        #●標的を壊滅する
        #●弾(自機)を壊滅する
        #●弾(標的)を壊滅する
        self.Fn機雷_機能(self.GAME.obj標的     ) 
        self.Fn機雷_機能(self.GAME.obj弾_自機  ) 
        self.Fn機雷_機能(self.GAME.obj弾_標的  ) 
        #┴
	#────────────────────────────────────	
    def Fn機雷_機能(self,
            arg相手):   #① 攻撃対象
		#┬
        #◎└┐対象に壊滅する
        for tmp相手 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●相手にダメージ(ティカルヒット)を与える
            tmp相手.衝突処理(0) 
        #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fnアイテム取得(self,
            arg相手 ):      #① 弾(自機)オブジェクト
 		#┬
        tmp自分 = self.GAME.obj自機

        #◇┐特殊効果を発動する
        if arg相手.仕様.機種 == 種類ID.救急箱:
        #　├┐（救急箱の場合）
            #↓
            #〇自機のシールドを満タンにする
            tmp自分.情報.シールド = pyxel.width
            #┴
        elif arg相手.仕様.機種 == 種類ID.弾薬庫:
        #　├┐（弾薬の場合）
            #↓
            #〇自機の弾を満タンにする
            tmp自分.情報.弾数 = tmp自分.仕様.積載量
            #┴
        #　└┐（その他）
        #┴　┴
