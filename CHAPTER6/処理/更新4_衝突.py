#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃処理（キャラクタの更新：他オブジェクトとの衝突）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel       ：シールド満タンの算出で画面幅を参照
#┃　　　│class汎用  ： 衝突判定で必要
#┃　　　│class種類  ： 相手(アイテム)の識別で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通		import class汎用    as 共通
from    キャラクタ	import アイテムID
from    キャラクタ	import 敵機ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class衝突処理:

    #┬
    #□└┐与えるダメージの威力
        #□弾による攻撃
        #□体当たり
    定数_威力_弾        = 5
    定数_威力_体当たり  = 3
    #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先 ):  #① 生成先のオブジェクト
		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○弾で攻撃する
        self.Fn攻撃()
        #│
        #○体当たりする
        self.Fn体当たり()
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn攻撃(self):
		#┬
		#◎└┐弾(自機)をぶつける
        for tmp弾 in self.GAME.obj弾_自機.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●敵機を攻撃する
            if self.Fn衝突判定(
                    True                    , # 手段：攻撃
                    True                    , # 相手：敵機によるもの
                    tmp弾                   , # 対象：弾(自機)
                    self.GAME.obj敵機       ):# 相手：敵機リスト
            #│＼（この弾が消失した場合）
            #│ ↓
            #│ ▼処理を中断する
                continue
			#│
            #●弾(敵機)を攻撃する
            self.Fn衝突判定(
                    True                    , # 手段：攻撃
                    True                    , # 相手：敵機によるもの
                    tmp弾                   , # 対象：弾(自機)
                    self.GAME.obj弾_敵機    ) # 対象：弾(敵機)リスト
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn体当たり(self):
		#┬
        #○自機の状態を確認する
        obj自機 = self.GAME.obj自機
        if obj自機 is None: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼繰処理を中断する
        #│
        #●アイテムに体当たりする
        if self.Fn衝突判定(
                False                   ,   # 手段：体当たり
                False                   ,   # 相手：アイテム
                obj自機                 ,   # 対象：自機オブジェクト
                self.GAME.objアイテム   ):  # 対象：アイテム・リスト
        #│＼（自機が消失した場合）
        #│ ↓
        #│ ▼処理を中断する
            return
        #│
        #●敵機に体当たりする
        if self.Fn衝突判定(
                False                   ,   # 手段：体当たり
                True                    ,   # 相手：敵機によるもの
                obj自機                 ,   # 対象：自機オブジェクト
                self.GAME.obj敵機       ):  # 対象：敵機リスト
        #│＼（自機が消失した場合）
        #│ ↓
        #│ ▼処理を中断する
            return
        #│
        #●弾(敵機)に体当たりする
        self.Fn衝突判定(
                False                   ,   # 手段：体当たり
                True                    ,   # 相手：敵機によるもの
                obj自機                 ,   # 対象：自機オブジェクト
                self.GAME.obj弾_敵機    )   # 対象：弾(敵機)リスト
        #┴

	#────────────────────────────────────	
    def Fn衝突判定(self ,
            arg手段区分 ,   #① True:攻撃／False:体当たり
            arg相手区分 ,   #② True:敵機／False:アイテム
            arg自分     ,   #③ 自分のオブジェクト(自機,弾)
            arg相手     ):  #③ 相手のオブジェクト(敵機,弾)
		#┬
        #◎└┐敵機を処理する
        for tmp相手 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●衝突状況を確認する
            if not 共通.Fn衝突判定(arg自分, tmp相手): continue
            #│＼（衝突していない場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●機雷との衝突を処理する
            if self.Fn衝突_機雷(arg手段区分, arg相手区分,arg自分, tmp相手): return True 
            #│＼（機雷が作動した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #│
            #●弾(自機)での攻撃を処理する
            self.Fn衝突_攻撃(arg手段区分, arg相手区分, arg自分, tmp相手)
            if self.Fn消失確認(arg手段区分, arg自分): return True
            #│＼（手段が消失した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #│
            #●自機での体当たりを処理する
            self.Fn衝突_体当たり(arg手段区分, arg相手区分, arg自分, tmp相手)
            if self.Fn消失確認(arg手段区分, arg自分): return True
            #│＼（手段が消失した場合）
            #│ ↓
            #│ ▼手段が『存在した』を返す
            #┴
        #│
        #▼手段が『存在する』を返す
        return False

	#────────────────────────────────────	
    def Fn消失確認(self,
            arg手段区分 ,   #① True:攻撃／False:体当たり
            arg自分     ):  #② 自分(自機,弾)
		#┬
        #◇┐弾を補充する
        if arg手段区分:
        #　├┐（体当たりの場合）
            #↓
            #◇┐弾を補充する
            if arg自分 in self.GAME.obj弾_自機: return False
            #　├┐（弾が存在する場合）
                #↓
                #▼『消失していない』を返す
            #　└┐（その他）
            #┴　┴
        else:
        #　└┐（その他）
            if arg自分 is not None: return False
            #　├┐（自機が存在する場合）
                #↓
                #▼『消失していない』を返す
            #　└┐（その他）
            #┴　┴
        #│
        #▼『消失した』を返す
        return True

	#────────────────────────────────────	
    def Fn衝突_機雷(self,
            arg手段区分 ,   #① True:攻撃／False:体当たり
            arg相手区分 ,   #② True:敵機／False:アイテム
            arg自分     ,   #② 自分のオブジェクト(自機,弾)
            arg相手     ):  #③ 相手のオブジェクト(敵機,弾)
		#┬
        #○条件を確認する
        if arg相手区分 == False or arg相手.仕様.機種 != 敵機ID.機雷:
        #│＼（相手が機雷ではない場合）
        #│ ↓
        #│ ▼『空振り』を返す
            return False
        #│
        #●機雷を起爆する
        self.Fn機雷_起爆()
        #│
        #◇┐自機を消滅する
        if not arg手段区分:
        #　├┐（体当たりの場合）
            #↓
            #●自機にダメージ(ティカルヒット)を与える
            self.GAME.obj自機.衝突処理(0)
            #┴
        #　└┐（その他）
            #┴
        #│
        #▼『衝突した』を返す
        return True
	#────────────────────────────────────	
    def Fn衝突_攻撃(self,
            arg手段区分 ,   #① True:攻撃／False:体当たり
            arg相手区分 ,   #② True:敵機／False:アイテム
            arg自分     ,   #③ 自分のオブジェクト(自機,弾)
            arg相手     ):  #④ 相手のオブジェクト(敵機,弾)
		#┬
        #○条件を確認する
        if not (arg手段区分 and arg相手区分): return
        #│＼（敵機への攻撃ではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾(自機)にダメージ(弾攻撃)を与える
        #●相手にダメージ(弾攻撃)を与える
        arg自分.衝突処理(self.定数_威力_弾)
        arg相手.衝突処理(self.定数_威力_弾)
        #┴
	#────────────────────────────────────	
    def Fn衝突_体当たり(self,
            arg手段区分 ,   #① True:攻撃／False:体当たり
            arg相手区分 ,   #② True:敵機／False:アイテム
            arg自分     ,   #③ 自分のオブジェクト(自機,弾)
            arg相手     ):  #④ 相手のオブジェクト(敵機,弾)
		#┬
        #○条件を確認する
        if arg手段区分 : return
        #│＼（攻撃の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐衝突を処理する
        if arg相手区分:
        #　├┐（相手が『敵機』の場合）
            #↓
            #●自機にダメージ(体当たり)を与える
            #●相手にダメージ(体当たり)を与える
            arg自分.衝突処理(self.定数_威力_体当たり)
            arg相手.衝突処理(self.定数_威力_体当たり)
            #┴ 
        else:
        #　└┐（その他）
            #↓
            #●アイテムの効果を発動する
            #●アイテムを消滅する
            self.GAME.obj自機.効果発動処理(arg相手)
            arg相手.衝突処理()
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn機雷_起爆(self):
		#┬
        #●敵機を壊滅する
        #●弾(自機)を壊滅する
        #●弾(敵機)を壊滅する
        self.Fn機雷_機能(self.GAME.obj敵機     ) 
        self.Fn機雷_機能(self.GAME.objアイテム ) 
        self.Fn機雷_機能(self.GAME.obj弾_自機  ) 
        self.Fn機雷_機能(self.GAME.obj弾_敵機  ) 
        #┴
	#────────────────────────────────────	
    def Fn機雷_機能(self,
            arg相手):   #① 攻撃対象
		#┬
        #◎└┐対象に壊滅する
        for tmp相手 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●相手にダメージ(ティカルヒット)を与える
            tmp相手.衝突処理() 
        #┴　┴