#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通
from キャラクタ	import class自機
from キャラクタ	import class標的

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class衝突処理:

    #┬
    #□└┐与えるダメージの威力
        #□弾による攻撃
        #□体当たり
    定数_威力_弾        = 5
    定数_威力_体当たり  = 3
    #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○弾で攻撃する
        self.Fn攻撃()
        #│
        #○体当たりする
        self.Fn体当たり()
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn攻撃(self):
		#┬
		#◎└┐弾(自機)をぶつける
        for obj自機 in self.GAME.obj弾_自機.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #○弾(自機)の状態を確認する
            if obj自機 is None: continue
            #│＼（存在しない場合）
            #│ ↓
            #│ ▼次の弾を処理する
            #│
            #●標的にぶつける
            self.Fn衝突判定(True, obj自機, self.GAME.obj標的)
			#│
            #○弾(自機)の状態を確認する
            if obj自機 is None: continue
            #│＼（存在しない場合）
            #│ ↓
            #│ ▼次の弾を処理する
            #│
            #●弾(標的)にぶつける
            self.Fn衝突判定(True,  obj自機, self.GAME.obj弾_標的)
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn体当たり(self):
		#┬
        #○自機の状態を確認する
        obj自機 = self.GAME.obj自機
        if obj自機 is None: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼繰処理を中断する
        #│
        #●標的にぶつける
        self.Fn衝突判定(False, obj自機, self.GAME.obj標的)
        #│
        #○弾の状態を確認する
        if obj自機 is None: return
        #│＼（存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
            #●弾(標的)にぶつける
        self.Fn衝突判定(False, obj自機, self.GAME.obj弾_標的)
        #┴　┴
	#────────────────────────────────────	
    def Fn衝突判定(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg手段,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #◎└┐標的を処理する
        for obj相手 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●衝突状況を確認する
            if not 共通.Fn衝突判定(arg手段, obj相手): continue
            #│＼（衝突していない場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●機雷との衝突を処理する
            if self.Fn衝突_機雷    (arg弾攻撃, arg手段, obj相手):return
            #│＼（衝突した場合）
            #│ ↓
            #│ ▼処理を中断する
            #│
            #●弾(自機)での攻撃を処理する
            if self.Fn衝突_弾攻撃  (arg弾攻撃, arg手段, obj相手):continue
            #│＼（衝突した場合）
            #│ ↓
            #│ ▼次の相手を処理する
            #│
            #●自機での体当たりを処理する
            if self.Fn衝突_体当たり(arg弾攻撃, arg手段, obj相手):continue
            #│＼（衝突した場合）
            #│ ↓
            #│ ▼次の相手を処理する
        #┴　┴
	#────────────────────────────────────	
    def Fn衝突_機雷(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg手段,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #○オブジェクトの消失を確認する
        if arg手段 is None or arg相手 is None: return False
        #│＼（手段・相手のどちらか一方でも消失している場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #○条件を確認する
        if arg相手.機種 != class標的.定数_機雷: return False
        #│＼（相手が機雷ではない場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #●機雷を起爆する
        self.Fn機雷_起爆()
        #│
        #●自機を消滅する
        if not arg弾攻撃:
        #│ ＼（体当たり場合）
            #↓
            #●自機にクリティカルヒットを与える
            self.GAME.obj自機.衝突処理(0)
            #┴
        #│
        #▼衝突済みを返す
        return True
	#────────────────────────────────────	
    def Fn衝突_弾攻撃(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg手段,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #③ 相手のオブジェクト(標的,弾)
		#┬
        #○オブジェクトの消失を確認する
        if arg手段 is None or arg相手 is None: return False
        #│＼（手段・相手のどちらか一方でも消失している場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #○条件を確認する
        if not (arg弾攻撃 and arg相手.撃墜可否) : return False
        #│＼（弾(自機)での攻撃で、相手が撃墜可能の場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #●弾(自機)にダメージを与える
        #●相手にダメージを与える
        arg手段.衝突処理(self.定数_威力_弾)
        arg相手.衝突処理(self.定数_威力_弾)
        #│
        #▼衝突済みを返す
        return True
	#────────────────────────────────────	
    def Fn衝突_体当たり(self,
            arg弾攻撃,      #① True:弾攻撃／False:体当たり
            arg手段,        #② 自分のオブジェクト(自機,弾)
            arg相手):       #① 相手のオブジェクト(標的,弾)
		#┬
        #○オブジェクトの消失を確認する
        if arg手段 is None or arg相手 is None: return False
        #│＼（手段・相手のどちらか一方でも消失している場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #○条件を確認する
        if arg弾攻撃 : return False 
        #│＼（弾(自機)での攻撃の場合）
        #│ ↓
        #│ ▼空振りを返す
        #│
        #◇┐衝突を処理する
        if arg相手.撃墜可否:
        #　├┐（相手が『撃墜可能型』の場合）
            #↓
            #●自機にダメージを与える
            #●相手にダメージを与える
            arg手段.衝突処理(self.定数_威力_体当たり)
            arg相手.衝突処理(self.定数_威力_体当たり)
            #┴ 
        else:
        #　└┐（その他）
            #↓
            #●アイテムを得る
            #●アイテムを消滅する
            self.Fnアイテム取得(arg相手)
            arg相手.衝突処理(0,0)
            #┴
        #│
        #▼衝突済みを返す
        return True

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn機雷_起爆(self):
        #●標的を壊滅する
        #●弾(自機)を壊滅する
        #●弾(標的)を壊滅する
        self.Fn機雷_機能(self.GAME.obj標的     ) 
        self.Fn機雷_機能(self.GAME.obj弾_自機  ) 
        self.Fn機雷_機能(self.GAME.obj弾_標的  ) 
	#────────────────────────────────────	
    def Fn機雷_機能(self,
            arg相手):   #① 攻撃対象
		#┬
        #◎└┐対象に壊滅する
        for obj対象 in arg相手.copy():
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
			#│
            #●自機にクリティカルヒットを与える
            obj対象.衝突処理(0) 
        #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fnアイテム取得(self,
            arg相手 ):      #① 弾(自機)オブジェクト
 		#┬
        #◇┐特殊効果を発動する
        if arg相手.機種 == class標的.定数_救急箱:
        #　├┐（救急箱の場合）
            #↓
            #〇自機のシールドを満タンにする
            #〇すべての弾(標的)を消滅する
            self.GAME.obj自機.シールド = pyxel.width
            #┴

        elif arg相手.機種 == class標的.定数_弾薬庫:
        #　├┐（弾薬の場合）
            #↓
            #〇自機の弾を満タンにする
            self.GAME.obj自機.弾数 = class自機.定数_積載量
            #┴
        #　└┐（その他）
        #┴　┴
