#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通, class入力操作 as 入力
from キャラクタ	import class自機, classターゲット, class弾

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class更新処理_弾:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○弾(自機)を更新する
        self.Fn自機()
        #│
        #○弾(敵機)を更新する
        self.Fn敵機()
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn自機(self):
		#┬
		#◎└┐すべての弾(自機)を更新する
        for obj弾 in self.GAME.obj弾_自機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ弾(自機)を更新する
            obj弾.更新処理()
            #│
            #○└┐ターゲットとの衝突を判定する
                #○結果を『衝突なし』でセットする
                #●アイテムを判定する
                #●敵機を判定する
                #●弾(敵機)を判定する
            結果 = 0
            結果 += self.Fn自機_機雷    (obj弾)
            結果 += self.Fn自機_敵機    (obj弾)
            結果 += self.Fn自機_敵機弾  (obj弾)
                #┴
            #│
            #○弾(自機)を消滅する
            if 結果 > 0: obj弾.衝突処理()
        #┴　┴
	#────────────────────────────────────	
    def Fn自機_機雷(self,arg弾):
		#┬
        #◎└┐すべてのアイテムの衝突を判定する
        for obj対象 in self.GAME.objアイテム.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            if obj対象.機種 == classターゲット.定数_機雷:
                #●ひとつずつ調べる
                if 共通.Fn衝突判定(obj対象, arg弾):
                #　 ＼（衝突している場合）
                    #↓
                    #●ターゲットを爆発させる
                    if obj対象.衝突処理():
                    #　 ＼（機雷を爆破した場合）
                        #↓
                        #●機雷の効果を発動する。
                        self.Fn自機_機雷_効果発動()
                        #│
                        #▼結果を返す
                        return 1
            #┴　┴　┴　┴
        #│
        #▼結果を返す
        return 0
	#────────────────────────────────────	
    def Fn自機_機雷_効果発動(self):
		#┬
        #◎└┐すべての敵機を爆発させる
        for obj消滅 in self.GAME.obj敵機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ爆発させる(無条件破壊)
            obj消滅.衝突処理( arg無条件破壊 = True ) 
            #┴
        #│
        #◎└┐すべてのアイテムを爆発させる
        for obj消滅 in self.GAME.objアイテム.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ爆発させる(無条件破壊)
            obj消滅.衝突処理( arg無条件破壊 = True ) 
            #┴
        #│
        #◎└┐すべての弾(敵機)を爆発させる
        for obj消滅 in self.GAME.obj弾_敵機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ爆発させる
            obj消滅.衝突処理() 
            #┴
        #│
        #◎└┐すべての弾(自機)を爆発させる
        for obj消滅 in self.GAME.obj弾_自機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ爆発させる
            obj消滅.衝突処理() 
    #┴　┴　┴ 

	#────────────────────────────────────	
    def Fn自機_敵機(self,arg弾):
		#┬
        #○結果を『衝突なし』で初期化する
        結果 = 0
        #│
        #◎└┐すべての敵機との衝突を判定する
        for obj対象 in self.GAME.obj敵機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ調べる
            if 共通.Fn衝突判定(obj対象, arg弾):
            #　 ＼（衝突している場合）
                #↓
                #○結果を『衝突あり』でセットする
                結果 = 1
                #│
                #●敵機を爆発させる
                obj対象.衝突処理()
            #┴　┴
        #│
        #▼結果を返す
        return 結果
	#────────────────────────────────────	
    def Fn自機_敵機弾(self,arg弾):
		#┬
        #○結果を『衝突なし』で初期化する
        結果 = 0
        #│
        #◎└┐すべての弾(敵機)との衝突を判定する
        for obj対象 in self.GAME.obj弾_敵機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ調べる
            if 共通.Fn衝突判定(obj対象, arg弾):
            #　 ＼（衝突している場合）
                #↓
                #○結果を『衝突あり』でセットする
                結果 = 1
                #│
                #●弾(敵機)を消滅させる
                obj対象.衝突処理()
            #┴　┴
        #│
        #▼結果を返す
        return 結果

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn敵機(self):
		#┬
        #◎└┐すべての弾(敵機)を更新する
        for obj弾 in self.GAME.obj弾_敵機.copy():
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ弾(敵機)を更新する
            obj弾.更新処理()
            #│
            #◇┐自機との衝突を処理する
            if self.GAME.obj自機 is not None:
            #　├┐（自機が存在する場合）
                #↓
                #●自機との位置関係を調べる
                if 共通.Fn衝突判定(self.GAME.obj自機, obj弾):
                #　 ＼（衝突している場合）
                    #↓
                    #●弾(敵機)を命中させる
                    #●自機を被弾させる
                    obj弾.衝突処理()
                    self.GAME.obj自機.衝突処理()
                    #┴
        #┴　┴　┴