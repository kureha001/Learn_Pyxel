#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通		import class汎用 as 共通

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class描画処理:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先    #① 生成先のオブジェクト
        ):

		#┬
        #□生成先のオブジェクト
        self.GAME = 引数_生成先
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○画面をクリアする
        pyxel.cls(0)
        #│
        #●背景を描画する
        self.GAME.obj背景.描画処理()
        #│
        #◇┐自機を描画する
        if self.GAME.obj自機 is not None:
        #　├┐（自機が存在する場合）
            #↓
            #●自機を描画する
            self.GAME.obj自機.描画処理()
			#┴
		#　└┐（その他）
			#┴
        #│
		#〇└┐リストのオブジェクトを描画する
            #●アイテムを描画する
            #●敵機を描画する
            #●弾(自機)を描画する
            #●弾(敵機)を描画する
            #●爆発を描画する
        self.Fnリスト描画(self.GAME.objアイテム )
        self.Fnリスト描画(self.GAME.obj敵機     )
        self.Fnリスト描画(self.GAME.obj弾_自機  )
        self.Fnリスト描画(self.GAME.obj弾_敵機  )
        self.Fnリスト描画(self.GAME.obj爆発     )
			#┴
        #│
        #●情報を描画する
        self.Fn情報描画()
        #│
        #●メッセージを描画する
        self.Fnメッセージ描画()
        #┴
	#────────────────────────────────────	
    def Fnリスト描画(self,
        argオブジェクト         #① リスト・オブジェクト
        ):
		#┬
        #◎└┐オブジェクトのすべてのキャラクタを描画する
        for tmpObj in argオブジェクト:
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●ひとつずつ描画する
            tmpObj.描画処理()
        #┴　┴
	#────────────────────────────────────	
    def Fn情報描画(self):
		#┬
        #○スコアを描画する
        pyxel.text( 5, 2, f"SCORE:{self.GAME.得点}", 7)
        #│
        #○レベルを描画する
        pyxel.text(85, 2, f"LEVEL:{self.GAME.難易度}", 7)
        #│
        #◎└┐弾とシールドを描画する
        if self.GAME.obj自機 is not None:
        #　├┐（自機が存在する場合）
            #↓
            #○シールドを描画する
            pyxel.rect(
                0, pyxel.height - 11,
                self.GAME.obj自機.シールド, 2,
                8
                )
            #│
            #◎└┐すべての弾薬を描画する
            座標X = 1
            座標Y = pyxel.height - 9
            for i in range(self.GAME.obj自機.弾数):
                # ＼（すべて処理した場合）
                #　↓
                #　▼繰り返し処理を抜ける
                #│
                #○ひとつずつ描画する
                pyxel.blt(座標X, 座標Y, 0, 16, 8, 4, 8, 0)
                座標X += 5
                #┴

		#　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fnメッセージ描画(self):
		#┬
        #◇┐シーンを描画する
        if self.GAME.シーン == 共通.定数_シーン_タイトル:
        #　├┐（シーンが『タイトル』の場合）
            #↓
            #〇タイトル画面を描画する
            pyxel.blt(0, 18, 2, 0, 0, 120, 120, 15)
            描画文字 = "Press [SPACE] or [UP]Button"
            pyxel.text(8, 148, 描画文字, 5)
            pyxel.text(7, 147, 描画文字, 7)
			#┴

        elif self.GAME.シーン == 共通.定数_シーン_終了:
        #　├┐（シーンが『終了』の場合）
            #↓
            #〇ゲームオーバー画面を描画する
            描画文字 = "- GAME OVER -"
            pyxel.text(36, 79, 描画文字, 5)
            pyxel.text(35, 78, 描画文字, pyxel.frame_count % 16)
			#┴

        #　└┐（その他）
        #┴　┴