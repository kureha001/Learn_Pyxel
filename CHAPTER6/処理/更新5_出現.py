#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃処理（キャラクタの更新：新たな標的を出現）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ： 出現場所を求める際に画面幅を参照
#┃　　　│classシーンID  ： プレイ時のみ機能させるために必要
#┃　　　│class標的      ： オブジェクトを生成するために必要
#┃　　　│class種類      ： 生成する種類を識別するために必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    シーン      import classシーンID    as シーンID

from    キャラクタ	import class標的
from    キャラクタ	import 敵機ID

from    キャラクタ	import classアイテム
from    キャラクタ	import アイテムID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class出現処理:

    #┬
    #□└┐出現間隔
        #□機雷
        #□弾薬
        #□救急箱
    定数_間隔_機雷      = 1000
    定数_間隔_弾薬箱    = 150
    定数_間隔_救急箱    = 400
    定数_間隔_連射      = 100
    #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先):   #① 生成先のオブジェクト        
		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
        self.GAME	= 引数_生成先
            #┴
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 実行(self):
		#┬
        #○シーンを確認する
        if self.GAME.情報.シーン != シーンID.プレイ:return
        #│＼（対象外の場合）
        #│ ↓
        #│ ▼繰処理を中断する
        #│
        #●敵機を追加する
        #●機雷を追加する
        #●救急箱を追加する
        #●弾薬箱を追加する
        self.Fn敵機()
        self.Fn機雷()
        self.Fn救急箱()
        self.Fn弾薬箱()
        self.Fn連射()
        #┴
	#────────────────────────────────────
    def Fn敵機(self):
		#┬
        #◇┐出現タイミングを確認する
        間隔_敵機 = max(60 - self.GAME.難易度 * 10, 30)
        if self.GAME.プレイ時間 % 間隔_敵機 != 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #●ランダムな機種で敵機を生成する
        class標的(
                self.GAME                                   ,
                pyxel.rndi( 0, pyxel.width - 8 )            ,
                -8                                          ,
                pyxel.rndi( 敵機ID.戦闘機1, 敵機ID.戦闘機3 ),
                self.GAME.難易度                            )
        #┴
	#────────────────────────────────────
    def Fn機雷(self):
		#┬
        #◇┐出現タイミングを確認する
        if self.GAME.プレイ時間 % self.定数_間隔_機雷 != 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #●機雷を生成する
        class標的(
                self.GAME                       ,
                pyxel.rndi( 0, pyxel.width - 8 ),
                -8                              ,
                敵機ID.機雷                     ,
                pyxel.rndi( 3, 5 )              )
        #┴
	#────────────────────────────────────
    def Fn救急箱(self):
		#┬
        #◇┐出現タイミングを確認する
        if self.GAME.プレイ時間 % self.定数_間隔_救急箱 != 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #●救急箱を生成する
        X座標 = pyxel.rndi( 0, pyxel.width - 8 )
        classアイテム(
                self.GAME               ,
                アイテムID.シールド回復 ,
                X座標                   ,
                -8                      )
       #┴
	#────────────────────────────────────
    def Fn弾薬箱(self):
		#┬
        #◇┐出現タイミングを確認する
        if self.GAME.プレイ時間 % self.定数_間隔_弾薬箱 != 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #●弾薬箱を生成する
        X座標 = pyxel.rndi( 0, pyxel.width - 8 )
        classアイテム(
                self.GAME           ,
                アイテムID.弾薬回復 ,
                X座標               ,
                -8                  )
        #┴
	#────────────────────────────────────
    def Fn連射(self):
		#┬
        #◇┐出現タイミングを確認する
        if self.GAME.プレイ時間 % self.定数_間隔_連射 != 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #●弾薬箱を生成する
        X座標 = pyxel.rndi( 0, pyxel.width - 8 )
        classアイテム(
                self.GAME           ,
                アイテムID.発射_連射 ,
                X座標               ,
                -8                  )
        #┴