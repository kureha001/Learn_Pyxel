#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    .DB             import シーンID
from    特殊効果        import 効果ID
from    キャラクタ.爆発 import 爆発開始

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    #┬
    種類ID = シーンID.プレイ
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
		#┬
        #≫データセットを用意する
        self.仕様   = 仕様クラス()
        self.情報   = None
        #│
        #≫処理セットを用意する
        self.FN移動 = 移動クラス(self)
        self.FN描画 = 描画クラス(self)
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト
		#┬
        #〇上位オブジェクトのリファレンスを用意する
        self.基底 = 引数_生成先
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #◇┐状況に応じて進行する 
        if main.DB.obj自機共通.情報.シールド <= 0:
        #　├┐（シールドが切れた場合）
            #↓
            #●ゲームオーバーにする
            self.Fnゲームオーバー()
            #┴   
        else:
        #　└┐（その他）
            #↓
            #●プレイを進行する
            self.Fnプレイ進行()
        #┴　┴
	#────────────────────────────────────
    def Fnゲームオーバー(self):
		#┬
        #○シールドを確認する 
        if main.DB.obj自機共通.情報.シールド > 0: return
        #│＼（シールドが残っている場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○シーンを『終了』に切替える
        main.DB.シーン = シーンID.終了
        #│
        #◎└┐自機をすべて爆破する
        所有者 = main.DB.所有者ID.自機
        for tmp自機 in main.DB.obj自機:
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #○自機ごとの基本情報を用意する
            x = tmp自機.情報.X + 4
            y = tmp自機.情報.Y - 2
            #│
            #◎└┐複数爆発する
            for i in range(1,5):
                #│＼（すべての処理を終えた場合）
                #│ ↓
                #│ ▼繰り返し処理を抜ける
                #│
                #○ランダムな位置・大きさで爆発する
                xr = pyxel.rndi(-10,10)
                yr = pyxel.rndi(-10,10)
                r = pyxel.rndi(5,9)
                爆発開始(所有者, x+xr, y+yr, r, True)
            #┴　┴
        #│
        #○自機を消滅する ※弾が残る場合を考慮し、特殊効果・自機共通はそのまま
        main.DB.obj自機 = []
        #┴
	#────────────────────────────────────
    def Fnプレイ進行(self):
		#┬
        #◇┐状況に応じてプレイシーンを進行する 
        if main.DB.ボスシーン != None:
        #　├┐（ボスシーンが機能している場合）
            #↓
            #○何もしない ※ボスシーンでは、進行を止める
            pass
            #┴            
        elif main.DB.プレイ時間 % main.DB.難易度間隔 == 0:
        #　├┐（レベルの変わり目の場合）
            #↓
            #○ボスシーンを『ボス待ち』にセットする
            #○プレイ時間をカウントアップする ※ボスシーンを繰り返さない為
            main.DB.ボスシーン = シーンID.ボス待ち
            main.DB.プレイ時間 += 1
            #┴            
        else:
        #　└┐（その他）
            #↓
            #○プレイ時間をカウントアップする
            #○難易度をセットする
            main.DB.プレイ時間 += 1
            main.DB.難易度 = main.DB.プレイ時間 // main.DB.難易度間隔 + 1
        #┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃描画機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト
		#┬
        #〇上位オブジェクトのリファレンスを用意する
        self.基底 = 引数_生成先
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #〇リファレンスを用意する
        if len(main.DB.obj自機) == 0: return
        #│＼（自機が存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○効果発動の登録状況を用意する
        発動中 = main.DB.obj特殊効果.情報.発動中
        #│
        共通情報 = main.DB.obj自機共通.情報
        画面縦長 = pyxel.height
        #│
        #○残りのシールドを描画する
        数量 = int(共通情報.シールド)
        pyxel.rect(0, 画面縦長 - 12, 数量, 3, 7)
        #│
        #◎└┐残りの弾薬を描画する
        座標X   = 1
        座標Y   = 画面縦長 - 8
        画像X   = (4) if 効果ID.貫通弾 in 発動中 else (0)
        数量 = int(共通情報.弾数)
        for i in range(数量):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #○ひとつずつ描画する
            pyxel.blt(座標X, 座標Y, 0, 画像X, 40, 4, 8, 0)
            座標X += 5
            #┴
        #│
        #◇┐ボス襲来のメッセージを表示する。 
        if main.DB.ボスシーン == シーンID.ボス待ち :
        #　├┐（ボス待ちの場合）
            #↓
            #○残りのシールドを描画する
            メッセージ = "Enemy aircraft encounter"
            pyxel.text(16, 41, メッセージ, 0)
            pyxel.text(15, 40, メッセージ, pyxel.rndi(1,15))
            #┴
        #　└┐（その他）
        #┴　┴
