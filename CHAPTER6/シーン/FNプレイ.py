#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    .DB         import シーンID
from    特殊効果    import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    種類ID = シーンID.プレイ

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_ゲーム):  #① 生成先のオブジェクト
		#┬
        #〇リファレンスを用意する
        self.GAME   = 引数_ゲーム
        #│
        #〇└┐データセットを用意する
            #≫仕様
            #≫情報
        self.仕様   = 仕様クラス()
        self.情報   = None
        #│
        #〇処理セットを用意する
        self.FN移動 = None
        self.FN描画 = None
        #│
        #≫処理セットをオブジェクト化する
        移動クラス(self)
        描画クラス(self)
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト

        self.基底           = 引数_生成先
        self.基底.FN移動    = self

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #〇リファレンスを用意する
        ゲーム = self.基底.GAME

        if main.DB.obj自機.情報.シールド <= 0:
        #│ ＼（自機が存在しない場合）
            #↓
            #○自機を削除する
            #○シーンを『終了』に切替える
            #▼処理を中断する
            main.DB.obj自機     = None
            main.DB.obj特殊処理 = None
            main.DB.シーン = シーンID.終了
            return
        #│
        #○プレイ時間をカウントアップする
        #○15秒毎に難易度をセットする
        main.DB.プレイ時間 += 1
        main.DB.難易度 = main.DB.プレイ時間 // 800 + 1
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃描画機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト

        self.基底           = 引数_生成先
        self.基底.FN描画    = self

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #〇リファレンスを用意する
        if main.DB.obj自機 is None: return
        #│＼（自機が存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○効果発動の登録状況を用意する
        発動中 = main.DB.obj特殊効果.情報.発動中
        #│
        #○残りのシールドを描画する
        キー = 効果ID.防御
        ダメージ倍率 = (発動中[キー][1]) if キー in 発動中 else (1)
        色 = 7
        if ダメージ倍率 == 0.5  : 色 = 2
        if ダメージ倍率 == 0    : 色 = 11
        if ダメージ倍率 == -1   : 色 = 8
        数量 = int(main.DB.obj自機.情報.シールド)
        pyxel.rect(0, pyxel.height - 12, 数量, 2, 色)
        pyxel.rect(0, pyxel.height - 10, 数量, 1, 7 )
        #│
        #◎└┐残りの弾薬を描画する
        座標X   = 1
        座標Y   = pyxel.height - 8
        画像X   = (4) if 効果ID.貫通弾 in 発動中 else (0)
        数量 = main.DB.obj自機.FN発射.情報.弾数
        for i in range(数量):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #○ひとつずつ描画する
            pyxel.blt(座標X, 座標Y, 0, 画像X, 40, 4, 8, 0)
            座標X += 5
        #┴　┴
