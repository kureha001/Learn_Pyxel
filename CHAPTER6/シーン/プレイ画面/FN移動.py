#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ：移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.DB
from   ..DB            import シーンID
from   キャラクタ.爆発 import 爆発開始

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    #--------------------------------------------------------------------
    # カウンタ
    #--------------------------------------------------------------------
    #□ボス警告時間      ：
    ボス警告時間        = 150

class 情報クラス:
    #--------------------------------------------------------------------
    # カウンタ
    #--------------------------------------------------------------------
    #□ボス待ちカウン    ：
    ボス警告カウント    = 0

class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        #┬
        #≫データセットを用意する
        self.仕様 = 仕様クラス()
        self.情報 = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◇┐状況に応じて進行する 
        if main.DB.obj自機共通.情報.シールド <= 0:
        #　├┐（シールドが切れた場合）
            #↓
            #●ゲームオーバーにする
            self.Fnゲームオーバー()
            #┴   
        else:
        #　└┐（その他）
            #↓
            #●プレイを進行する
            self.Fnプレイ進行()
        #┴　┴
	#────────────────────────────────────
    def Fnゲームオーバー(self):
        #┬
        #○シールドを確認する 
        if main.DB.obj自機共通.情報.シールド > 0: return
        #│＼（シールドが残っている場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○シーンを『終了画面』に進行する
        main.DB.シーン = シーンID.終了画面
        #│
        #◎└┐自機をすべて爆破する
        所有者 = main.DB.所有者ID.自機
        for tmp自機 in main.DB.obj自機:
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #○自機ごとの基本情報を用意する
            x = tmp自機.情報.X + 4
            y = tmp自機.情報.Y - 2
            #│
            #◎└┐複数爆発する
            for i in range(1,5):
                #│＼（すべての処理を終えた場合）
                #│ ↓
                #│ ▼繰り返し処理を抜ける
                #│
                #○ランダムな位置・大きさで爆発する
                xr = pyxel.rndi(-10,10)
                yr = pyxel.rndi(-10,10)
                r = pyxel.rndi(5,9)
                爆発開始(所有者, x+xr, y+yr, r, True)
            #┴　┴
        #│
        #○自機を消滅する ※弾が残る場合を考慮し、特殊効果・自機共通はそのまま
        main.DB.obj自機 = []
        #┴
	#────────────────────────────────────
    def Fnプレイ進行(self):
        #┬
        #◇┐状況に応じてプレイ画面を進行する 
        if main.DB.ボスシーン == シーンID.ボス警告:
        #　├┐（ボス襲来で警告中の場合）
            #↓
            #◇┐警告中を進行する 
            if self.情報.ボス警告カウント <= 0:
            #　├┐（警告時間切れの場合）
                #↓
                #○ボスシーンを『ボス登場』に進行する
                main.DB.ボスシーン = シーンID.ボス登場
                #┴            
            else:
            #　└┐（その他）
                #↓
                #○警告時間を減らす
                self.情報.ボス警告カウント -= 1
                #┴            
        elif main.DB.ボスシーン != None:
        #　├┐（ボスシーンが機能している場合）
            #↓
            #○何もしない ※ボスシーンでは、進行を止める
            pass
            #┴            
        elif main.DB.プレイ時間 % main.DB.難易度間隔 == 0:
        #　├┐（レベルの変わり目の場合）
            #↓
            #○ボスシーンを『ボス待ち』に進行する
            main.DB.ボスシーン = シーンID.ボス警告
            #│
            #○ボス待ちタイマーを開始する
            self.情報.ボス警告カウント = self.仕様.ボス警告時間
            #│
            #○プレイ時間をカウントアップする ※ボスシーンを繰り返さない為
            main.DB.プレイ時間 += 1
            #┴            
        else:
        #　└┐（その他）
            #↓
            #○プレイ時間をカウントアップする
            #○難易度をセットする
            main.DB.プレイ時間 += 1
            main.DB.難易度 = main.DB.プレイ時間 // main.DB.難易度間隔 + 1
        #┴　┴