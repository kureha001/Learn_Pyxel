#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーン：プレイ：描画機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.DB
from   ..DB     import シーンID
from   特殊効果 import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃描画機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 描画クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self):
        pass
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #〇リファレンスを用意する
        if not main.DB.obj自機: return
        #│＼（自機が存在しない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○効果発動の登録状況を用意する
        発動中 = main.DB.obj特殊効果.情報.発動中
        #│
        共通情報 = main.DB.obj自機共通.情報
        画面縦長 = pyxel.height
        #│
        #○残りのシールドを描画する
        数量 = int(共通情報.シールド)
        pyxel.rect(0, 画面縦長 - 12, 数量, 3, 7)
        #│
        #◎└┐残りの弾薬を描画する
        座標X   = 1
        座標Y   = 画面縦長 - 8
        画像X   = (4) if 効果ID.貫通弾 in 発動中 else (0)
        数量 = int(共通情報.弾数)
        for i in range(数量):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #○ひとつずつ描画する
            pyxel.blt(座標X, 座標Y, 0, 画像X, 40, 4, 8, 0)
            座標X += 5
            #┴
        #│
        #◇┐ボス襲来の警告を表示する。 
        if main.DB.ボスシーン == シーンID.ボス警告 :
        #　├┐（ボス待ちの場合）
            #↓
            #○残りのシールドを描画する
            メッセージ = "Enemy aircraft encounter"
            pyxel.text(16, 41, メッセージ, 0)
            pyxel.text(15, 40, メッセージ, pyxel.rndi(1,15))
            #┴
        #　└┐（その他）
        #┴　┴
