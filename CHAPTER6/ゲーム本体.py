#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import time
import pyxel
import pyxel
from 共通		import class汎用 as 共通
from キャラクタ	import class自機, class敵機, class弾
from 演出		import class背景

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．ゲームクラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class Game:

    #┬
    #□ゲームオーバー表示待ち(単位：フレーム)
    定数_終了待ち時間   		= 300
    #│
    #□ゲームオーバー表示待ち(単位：フレーム)
    WAIT_GAMEOVER   = 180
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #□└┐制御データ
            #□スコア
            #□シーン
            #□プレイ時間
            #□難易度
        self.得点       = 0
        self.シーン     = None
        self.プレイ時間 = 0
        self.難易度     = 0
        self.残り時間_終了シーン 	= 0
            #┴
        #│
        #□└┐インスタンス
            #□背景
            #□自機
            #□敵機
            #□弾(自機)
            #□弾(敵機)
            #□爆発
        self.obj背景      = None
        self.obj自機      = None
        self.obj敵機      = []
        self.obj弾_自機   = [] 
        self.obj弾_敵機   = [] 
        self.obj爆発      = [] 
        #┴ ┴
		#┬
        #○Pyxelを初期化する
        self.初期化_リソース()
        #│
        #○└┐最終準備
            #●背景を生成する(背景はシーンによらず常に存在する)
            #●タイトル画面を準備する
            #○ゲームの実行を開始する
        class背景(self)
        self.共通_シーン切替(共通.定数_シーン_タイトル)
        pyxel.run(self.更新処理, self.描画処理)
		#┴　┴
	#────────────────────────────────────	
    def 初期化_リソース(self):
		#┬
		#○画面を初期化する
		#○リソースファイルを読み込む
        pyxel.init(120, 160, title="Mega Wing  Ver.2025/05/01-01")
        pyxel.load("リソース/mega_wing.pyxres")
		#│
		#○Soundデータを登録する
        pyxel.sounds[50].mml(
            "t100 @1 o2 q7 v7 l4" +
            "l8d4a4g2.fed4c<b->c<a>e4d1.a4>" +
            "c4<b2.gfe4fga1&a1d4a4g2.fed4c<b->c<a>e4d1."
            )
        pyxel.sounds[51].mml(
            "t100 @0 o1 q7 v4 l2" +
            "l8dafadbgbd>c<a>c<db-fb-e>c<a>c" +
            "<daf+adaf+agb-a>c" +
            "<dafadbgbdbgbdb-g+b-c" +
            "+aeadaeac+aea<b>ac+adafadbgbd>c" +
            "<a>c<db-fb-e>c<a>c<daf+adaf+adaf+a"
            )
		#│
		#○Musicデータを登録する
        pyxel.musics[7].set([50],[51])
		#┴
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #●背景を更新する
        self.obj背景.更新処理()
        #│
        #○自機を更新する
        #○敵機を更新する
        self.更新処理_自機()
        self.更新処理_敵機()
		#│
        #○弾(自機)を更新する
        #○弾(敵機)を更新する
        self.更新処理_弾_自機()
        self.更新処理_弾_敵機()
		#│
        #●爆発を更新する
        #●画面を更新する
        self.更新処理_爆発()
        self.更新処理_シーン()
        #┴
	#────────────────────────────────────	
    def 更新処理_自機(self):
		#┬
        #◇┐自機を更新する
        if self.obj自機 is not None:
        #　├→（自機が存在する場合）
            #●自機を更新する
            self.obj自機.更新処理()
			#┴
		#　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def 更新処理_敵機(self):
		#┬
		#◎└┐敵機を更新する
        for tmpObj in self.obj敵機.copy():
			#│＼（すべての敵機を処理し終えた）
			#│ ▼繰り返し処理を抜ける
            #●敵機を更新する
            tmpObj.更新処理()
            #│
            #◇┐自機と衝突する
            if self.obj自機 is not None:
            #　├→（自機が存在し、衝突している場合）
                #●自機との衝突を調べる
                if 共通.Fn衝突処理(self.obj自機, tmpObj):
                #　 ＼（衝突している場合）
                    #●自機を衝突させる
                    self.obj自機.衝突処理()
                #┴　┴
            #　└┐（その他）
        #┴　┴　┴
	#────────────────────────────────────	
    def 更新処理_弾_自機(self):
		#┬
		#◎└┐弾(自機)を更新する
        for obj弾 in self.obj弾_自機.copy():
			#│＼（すべての弾を処理し終えた）
			#│ ▼繰り返し処理を抜ける
            #●弾(自機)を更新する
            obj弾.更新処理()
            #│
            #◎└┐すべての敵機との衝突判定を行う
            for obj敵機 in self.obj敵機.copy():
                #│＼（すべての敵機を処理し終えた場合）
                #│ ▼繰り返し処理を抜ける
                #●敵機との衝突を調べる
                if 共通.Fn衝突処理(obj敵機, obj弾):
                #　 ＼（衝突している場合）
                    #●弾(自機)を命中させる
                    #●敵機を被弾させる
                    obj弾.衝突処理()
                    obj敵機.衝突処理() 
        #┴　┴　┴　┴
	#────────────────────────────────────	
    def 更新処理_弾_敵機(self):
		#┬
        #◎└┐すべての弾(敵機)を更新する
        for obj弾 in self.obj弾_敵機.copy():
            #│＼（すべての弾(敵機)を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●弾(敵機)を更新する
            obj弾.更新処理()
            #│
            #◇┐自機との衝突を処理する
            if self.obj自機 is not None:
            #　├→（自機が存在する場合）
                #●自機との位置関係を調べる
                if 共通.Fn衝突処理(self.obj自機, obj弾):
                #　 ＼（衝突している場合）
                    #●弾(敵機)を命中させる
                    #●自機を被弾させる
                    obj弾.衝突処理()
                    self.obj自機.Sub_Collision()
        #┴　┴　┴　┴
	#────────────────────────────────────	
    def 更新処理_爆発(self):
		#┬
        #◎└┐すべての爆発を更新する
        for tmpObj in self.obj爆発.copy():
            #│＼（すべての爆発を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●当該の爆発を更新
            tmpObj.更新処理()
        #┴　┴
	#────────────────────────────────────	
    def 更新処理_シーン(self):
        #◇┐シーンを更新する
        if self.シーン == 共通.定数_シーン_タイトル: 
        #　├→（シーンが『タイトル』の場合）
            #◇┐プレイ・シーンに移す
            if pyxel.btnp(pyxel.KEY_RETURN):
            #　├→（リターンキーが押された場合）
                #○BGMの再生を止める
                #●シーンを『プレイ』にセットする
                pyxel.stop()
                self.共通_シーン切替(共通.定数_シーン_プレイ)
                #┴
            #　└┐（その他）
                #┴
        #　│
        elif self.シーン == 共通.定数_シーン_プレイ:
        #　├→（シーンが『プレイ』の場合）
            #○プレイ時間をカウントアップする
            #○15秒毎に難易度を上げる
            self.プレイ時間 += 1
            self.難易度 = self.プレイ時間 // 450 + 1
            #│
            #◇┐敵機を追加する
            間隔 = max(60 - self.難易度 * 10, 10)
            if self.プレイ時間 % 間隔 == 0:
            #　├→（出現タイミングの場合）
                #○機種をランダムに求める
                #●求めた機種で、敵機を生成する
                機種  = pyxel.rndi(class敵機.定数_機種A, class敵機.定数_機種C)
                class敵機(self, pyxel.rndi(0, 112), -8, 機種, self.難易度)
                #┴
            #　└┐（その他）
            #┴　┴

        elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『終了』の場合）
            #◇┐待ち時間を減らす
            if self.残り時間_終了シーン > 0:
            #　├→（画面表示時間が残っている場合）
                #●待ち時間をカウントダウンする
                self.残り時間_終了シーン -= 1
                #┴
            else:
            #　└┐（その他）
                #●タイトル画面を準備する
                self.共通_シーン切替(共通.定数_シーン_タイトル)
            #┴　┴
		#　└┐（その他）
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○画面をクリアする
        #●背景を描画する
        pyxel.cls(0)
        self.obj背景.描画処理()
        #│
        #◇┐自機を描画する
        if self.obj自機 is not None:
        #　├→（自機が存在する場合）
            #●描画する
            self.obj自機.描画処理()
			#┴
		#　└┐（その他）
			#┴
        #│
        #◎└┐敵機を描画する
        for tmpObj in self.obj敵機:
            #│＼（すべての敵機を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
            tmpObj.描画処理()
			#┴
        #│
        #◎└┐弾(自機)を描画する
        for tmpObj in self.obj弾_自機:
            #│＼（すべての弾を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
            tmpObj.描画処理()
			#┴
        #│
        #◎└┐弾(敵機)を描画する
        for tmpObj in self.obj弾_敵機: 
            #│＼（すべての弾を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
            tmpObj.描画処理()
			#┴
        #│
        #◎└┐爆発を描画する
        for tmpObj in self.obj爆発:
            #│＼（すべての爆発を処理し終えた場合）
            #│ ▼繰り返し処理を抜ける
            #●描画する
            tmpObj.描画処理()
			#┴
        #│
        #○スコアを描画する
        #○レベルを描画する
        pyxel.text(10, 4, f"SCORE {self.得点:5}", 7)
        pyxel.text(80, 4, f"LEVEL {self.難易度:1}", 7)
        #│
        #◇┐シーンを描画する
        if self.シーン == 共通.定数_シーン_タイトル:
        #　├→（シーンが『タイトル』の場合）
            #〇タイトル画面を表示する
            pyxel.blt(0, 18, 2, 0, 0, 120, 120, 15)
            表示文字 = "- PRESS ENTER -"
            pyxel.text(31, 148, 表示文字, 5)
            pyxel.text(30, 147, 表示文字, 7)
			#┴
        #　│
        elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『終了』の場合）
            #〇ゲームオーバー画面を表示する
            表示文字 = "- GAME OVER -"
            pyxel.text(36, 79, 表示文字, 5)
            pyxel.text(35, 78, 表示文字, pyxel.frame_count % 16)
			#┴
        #　└┐（その他）
        #┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃シーンを切替える
#┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃【引き数】① 整数型：シーン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 共通_シーン切替(self,
        argScene    #① シーン
        ):
		#┬
        #○引数を退避する
        self.シーン = argScene
        #│
        #◇┐画面を表示する
        if self.シーン == 共通.定数_シーン_タイトル:
        #　├→（シーンが『タイトル』の場合）
			#○└┐インスタンスを初期化する
                #●敵機を抹消する
                #●弾(自分)を抹消する
                #●弾(敵機)を抹消する
            self.obj敵機.clear()
            self.obj弾_自機.clear()
            self.obj弾_敵機.clear()
                #┴
            #│
            #○終了待ち時間
            self.残り時間_終了シーン = self.定数_終了待ち時間
            #│
            #○BGMを鳴らす
            pyxel.playm(0, loop=True)
            #┴
        #　│
        elif self.シーン == 共通.定数_シーン_プレイ:
        #　├→（シーンが『プレイ』の場合）
            #○スコアをリセットする
            #○プレイ時間をリセットする
            #○難易度レベルをリセットする
            self.得点       = 0
            self.プレイ時間 = 0
            self.難易度     = 1
            #│
            #○BGMを鳴らす
            pyxel.playm(1, loop=True)
            #│
            #●自機を生成する
            class自機(self, 56, 140)
            #┴
        #　│
        elif self.シーン == 共通.定数_シーン_終了:
        #　├→（シーンが『終了』の場合）
            #○自機を抹消する
            #○待ち時間をセットする
            self.obj自機 = None
            self.残り時間_終了シーン = self.定数_終了待ち時間
            #┴
		#　└┐（その他）
        #┴　┴