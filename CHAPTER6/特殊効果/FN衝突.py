#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃特殊効果：衝突機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.DB
from   .DB import * #自分のDBにアクセスする

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_基底 ): #① 基底オブジェクト
		#┬
        #〇上位オブジェクトのリファレンスを用意する
        self._情報  = 引数_基底.情報
        #│
        #○外部オブジェクトのリファレンスを用意する
        self.共仕   = main.DB.obj自機共通.仕様
        self.共情   = main.DB.obj自機共通.情報
        #│
        #≫データセットを用意する
        self.仕様   = None
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self       ,
           引数_アイテム):  #① アイテムのオブジェクト
		#┬
        #○アイテム種類IDと持続時間を用意する
        アイテムID  = 引数_アイテム.仕様.種類ID
        効果ID      = アイテムDB[ アイテムID ][0]
        #│
        #◇┐アイテム区分を照会し効果を発動する
        if 効果ID == 効果ID.補給:
        #　├┐（退避した持続時間が『マイナス』の場合）
            #↓
            #●補給系の効果を発動する
            self.Fn補給( アイテムID )
            #┴
        else:
        #　└┐（その他）
            #● 効果を発動する
            self.Fn効果発動( アイテムID )
            #┴
	#────────────────────────────────────	
    def Fn補給(self         ,
            引数_アイテム   ):   #① アイテムのオブジェクト
		#┬
        #◇┐アイテムIDを照会し補給する
        if 引数_アイテム == アイテムID.弾薬:
        #　├┐（アイテムIDが『弾薬』の場合）
            #↓
            #○弾数を最大まで回復する
            self.共情.弾数 = self.共仕.積載量
            #┴
        elif 引数_アイテム == アイテムID.シールド:
        #　├┐（アイテムIDが『シールド』の場合）
            #↓
            #○シールドを最大まで回復する
            self.共情.シールド = pyxel.width
            #┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fn効果発動(self, 引数_アイテムID): #① アイテムを識別するID
		#┬
        #○アイテムDBより各種パラメータを取得する
        効果ID   = アイテムDB[ 引数_アイテムID ][0]
        持続時間 = アイテムDB[ 引数_アイテムID ][2][0]
        登録内容 = アイテムDB[ 引数_アイテムID ][2][1]
        #│
        #◇┐同じ効果で発動中のエントリから登録値を控える
        if 効果ID in self._情報.発動中:
        #　├┐（同じ効果が発動中の場合）
            #↓
            #○エントリから既存値を控える
            #○エントリの削除する
            既存値 = self._情報.発動中[ 効果ID ][1]
            del self._情報.発動中[ 効果ID ]
            #┴
        else:
        #　└┐（その他）
            #↓
            #○既存値なし(ゼロ値)で用意する
            既存値 = 0
            #┴
        #│
        #◇┐登録値を用意する
        if isinstance(登録内容, tuple):
        #　├┐（登録内容パラメータが『加算型(タプル)』の場合）
            #↓
            #○登録値を『上限を超えない範囲』で用意する
            追加値      = 登録内容[0]
            上限値      = 登録内容[1]
            既存値なし  = (既存値 == 0)
            登録値      = (追加値) if 既存値なし else (min((既存値 + 追加値),上限値))
            #┴
        else:
        #　└┐（その他）
            #↓
            #○登録値を『登録内容のまま』で用意する
            登録値 = 登録内容
            #┴
        #│
        #○用意した登録値で、効果を発動する
        self._情報.発動中[ 効果ID ] = ( 持続時間 , 登録値 )
        #┴