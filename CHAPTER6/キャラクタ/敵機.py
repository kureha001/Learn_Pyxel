#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（敵機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from .弾	import class弾
from 演出	import class爆発
from キャラクタ	import class自機

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class敵機:

    #┬
    #□機種Ａ
    #□機種Ｂ
    #□機種Ｃ
    #□機雷
    定数_機種A  = 0
    定数_機種B  = 1
    定数_機種C  = 2
    定数_機雷   = 3
    定数_救急箱 = 4
    定数_弾薬   = 5
    #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標,		#③ Ｙ座標
        引数_機種,      #② 機種
        引数_難易度     #③ 難易度
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
            #□Ｘ座標
            #□Ｙ座標
            #□機種
            #□難易度
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.機種       = 引数_機種
        self.難易度     = 引数_難易度
            #┴
        #│
        #□└┐基本データ
            #□衝突範囲
            #□防御力
            #□生存時間
            #□衝突有無
        self.衝突範囲   = (0, 0, 7, 7)
        self.防御力     = self.難易度 - 1
        self.生存時間   = 0
        self.衝突有無   = False
        #┴　┴

		#┬
        #〇敵機を生成(リスト追加)する
        self.GAME.obj敵機.append(self)
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #○生存時間をカウントする
        self.生存時間 += 1
        #│
        #◇┐ターゲットを更新する
        if   self.機種 == class敵機.定数_機雷  : self.更新処理_アイテム()
        elif self.機種 == class敵機.定数_救急箱: self.更新処理_アイテム()
        elif self.機種 == class敵機.定数_弾薬  : self.更新処理_アイテム()
        elif self.機種 == class敵機.定数_機種A : self.更新処理_機種A()
        elif self.機種 == class敵機.定数_機種B : self.更新処理_機種B()
        elif self.機種 == class敵機.定数_機種C : self.更新処理_機種C()
        #　└┐（その他）
            #┴
        #│
        #◇┐敵機を消す
        if self.座標_Y軸 >= pyxel.height:
        #　├→（画面下から出た場合）
            #◇┐敵機を消す
            if self in self.GAME.obj敵機:
            #　├→（敵が存在する場合）
                #○敵機リストから抹消する
                self.GAME.obj敵機.remove(self) 
                #┴
            #　└┐（その他）
            #┴　┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────
    def 更新処理_アイテム(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 0.5
        #│
        #◇┐左右に移動する
        if self.生存時間 // 20 % 2 == 0:
        #　├→（生存時間が30カウントの場合）
            #○右に移動する
            self.座標_X軸 += 1.5
            #┴
        else:
        #　└┐（その他）
            #○左に移動する
            self.座標_X軸 -= 1.5
        #┴　┴
	#────────────────────────────────────
    def 更新処理_機種A(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 1.2
        #│
        #○発射タイミングを調べる
        if self.生存時間 % 50 != 0: return
        #│＼（発射タイミングではない場合）
        #│ ▼処理を中断する
        #│
        #●自機の角度を求める
        発射角度 = self.Fn発射角度()
        #│
        #●弾を発射する
        class弾(
            self.GAME,
            self.座標_X軸, self.座標_Y軸,
            self.GAME.定数_所有者_敵機,
            発射角度, 2
            )
        #┴　┴
	#────────────────────────────────────
    def 更新処理_機種B(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 1
        #│
        #◇┐左右に移動する
        if self.生存時間 // 30 % 2 == 0:
        #　├→（生存時間が30カウントの場合）
            #○右に移動する
            self.座標_X軸 += 1.2
            #┴
        else:
        #　└┐（その他）
            #○左に移動する
            self.座標_X軸 -= 1.2
        #┴　┴
	#────────────────────────────────────
    def 更新処理_機種C(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 0.8
        #│
        #○発射タイミングを調べる
        if self.生存時間 % 40 != 0: return
        #│＼（発射タイミングではない場合）
        #│ ▼処理を中断する
        #│
        #◎└┐４方向に発射する
        for tmpCnt in range(4):
            #│＼（4方向の処理を終えた場合）
            #│ ▼繰り返し処理を抜ける
            #○当該の方向に弾を発射する
            class弾(
                self.GAME,
                self.座標_X軸, self.座標_Y軸,
                self.GAME.定数_所有者_敵機,
                tmpCnt * 45 + 22, 2
                )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射角度(self):
		#┬
        #○自機を参照する
        tmpObj = self.GAME.obj自機
        #│
        #◇┐角度を求める
        if tmpObj is None: 
        #　├→（自機が存在しない場合）
            #▼90度を返す
            return 90
        #　│
        else:
		#　└┐（その他）
            #▼自機の方角を返す
            return pyxel.atan2(
                tmpObj.座標_Y軸 - self.座標_Y軸,
                tmpObj.座標_X軸 - self.座標_X軸
                )
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
        arg機雷炸裂 = False
        ):
		#┬
        #◇┐無条件に爆破される状態にする
        if arg機雷炸裂:
        #　├→（機雷が炸裂する場合）
            #○防御力をゼロにする
            #○難易度をゼロにする
            self.防御力 = 0
            self.難易度 = 0
            #┴
        #│
        #◇┐
        if self.防御力 > 0:
        #　├→（防御力が残っている場合）
            #○防御力を減らす
            #○ダメージ有無を『あり』にする
            #○被弾音を鳴らす
            self.防御力   -= 1
            self.衝突有無 = True
            pyxel.play(2, 1, resume=True)
            #┴
        #　│
        else:
        #　└┐（その他）
            機雷爆破 = self.衝突処理_アイテム発動()
            self.衝突処理_抹消()
            return 機雷爆破
        #┴　┴
	#────────────────────────────────────	
    def 衝突処理_アイテム発動(self):
 		#┬
        #◇┐アイテムを機能する
        if self.機種 == class敵機.定数_機雷:
        #　├→（機雷の場合）
            self.GAME.obj弾_敵機.clear
            return True

        elif self.機種 == class敵機.定数_救急箱:
        #　├→（救急箱の場合）
            #〇シールドを満タンにする
            #〇すべての弾(敵機)を消滅する
            self.GAME.obj自機.残りシールド = pyxel.width
            self.GAME.obj弾_敵機.clear

        elif self.機種 == class敵機.定数_弾薬:
        #　├→（弾薬の場合）
            #〇弾を満タンにする
            self.GAME.obj自機.残り弾数 = class自機.定数_積載量
        #　└┐（その他）
            #┴
        return False
	#────────────────────────────────────	
    def 衝突処理_抹消(self):
 		#┬
        #●爆発を生成する
        class爆発(
            self.GAME,
            self.座標_X軸 + 4, self.座標_Y軸 + 4,
            self.GAME.定数_所有者_敵機
            )
        #│
        #○爆発音を鳴らす
        #○スコアを加算する
        pyxel.play(2, 2, resume=True) 
        self.GAME.得点 += self.難易度 * 10
        #│
        #○敵機を抹消(リストから除外)する
        self.GAME.obj敵機.remove(self)
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○敵機を描画する
        pyxel.blt(
            self.座標_X軸, self.座標_Y軸,
            0, self.機種 * 8 + 8, 0,
            8, 8,
            0
            )
        #┴