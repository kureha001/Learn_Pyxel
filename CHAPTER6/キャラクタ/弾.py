#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（弾）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    .爆発 import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class弾:

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先,	#① 生成先のオブジェクト
            引数_X座標,		#② Ｘ座標
            引数_Y座標,		#③ Ｙ座標
            引数_所有者,    #④ 所有者
            引数_発射角度,  #⑤ 発射角度
            引数_移動速度): #⑥ 移動速度
		#┬
        #□└┐パラメータ
            #□生成先
            #□X座標
            #□Y座標
            #□所有者
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.所有者     = 引数_所有者
            #┴
        #│
        #□仕様一覧
        self.仕様 = {

                self.GAME.定数_所有者_自機 : (
                        self.GAME.obj弾_自機,       # オブジェクト・リスト
                        False,                      # 撃墜可否
                        (2, 1, 5, 6),               # 衝突範囲
                        (0, 8, 8, 8) ),             # 画像取得範囲

                self.GAME.定数_所有者_標的 : (
                        self.GAME.obj弾_標的,       # オブジェクト・リスト
                        True,                       # 撃墜可否
                        (2, 2, 5, 5),               # 衝突範囲
                        (8, 8, 8, 8) ) }            # 画像取得範囲
        #│
        #□└┐仕様
           #□撃墜可否
           #□衝突範囲
           #□画像取得範囲
        self.機種           = None
        self.格納先         = self.仕様[self.所有者][0]
        self.撃墜可否       = self.仕様[self.所有者][1]
        self.衝突範囲       = self.仕様[self.所有者][2]
        self.画像取得範囲   = self.仕様[self.所有者][3]
            #┴
        #│
        #□└┐基本データ
            #□シールド
            #□速度(X軸)
            #□速度(Y軸)
        self.シールド   = 0
        self.速度_X軸   = pyxel.cos(引数_発射角度) * 引数_移動速度
        self.速度_Y軸   = pyxel.sin(引数_発射角度) * 引数_移動速度
        #┴　┴

		#┬
        #〇弾を生成する
        self.格納先.append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．移動処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #○座標を更新する
        self.座標_X軸 += self.速度_X軸
        self.座標_Y軸 += self.速度_Y軸
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．除外処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 除外処理(self):
		#┬
        #●座標を確認する
        if (
                (self.座標_X軸 > -8 and self.座標_X軸 < pyxel.width) and
                (self.座標_Y軸 > -8 and self.座標_Y軸 < pyxel.height)
                ): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾を消滅する
        self.格納先.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 4):   #② 爆発半径
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.シールド = 0
            #┴
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発(
                    self.GAME,
                    self.GAME.定数_所有者_なし,
                    self.座標_X軸 + 4, self.座標_Y軸 + 4,
                    arg爆発半径, False )
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.シールド <= 0:
        #│├┐（シールド切れの場合）
            #↓
            #○オブジェクトを削除する
            self.格納先.remove(self)
            #┴
        #│└┐（その他）
        #┴　#┴
        
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #◇┐描画する
        pyxel.blt(
                self.座標_X軸, self.座標_Y軸, 0,
                self.画像取得範囲[0],
                self.画像取得範囲[1],
                self.画像取得範囲[2],
                self.画像取得範囲[3],
                0 )
        #┴