#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（弾）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 演出   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class弾:

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標,		#③ Ｙ座標
        引数_所有者,    #④ 所有者
        引数_発射角度,  #⑤ 発射角度
        引数_移動速度   #⑥ 移動速度
        ):

		#┬
        #□└┐パラメータ
            #□生成先
            #□X座標
            #□Y座標
            #□所有者
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.所有者     = 引数_所有者
            #┴
        #│
        #□仕様一覧
        self.仕様 = {
            self.GAME.定数_所有者_自機 : (
                    False,                  # 撃墜可否
                    (2, 1, 5, 6),           # 衝突範囲
                    (8, 8, 8, 8),           # 画像取得範囲
                    self.GAME.obj弾_自機 ), # オブジェクト・リスト
            self.GAME.定数_所有者_標的 : (
                    True,                   # 撃墜可否
                    (2, 2, 5, 5),           # 衝突範囲
                    (0, 8, 8, 8),           # 画像取得範囲
                    self.GAME.obj弾_標的 )  # オブジェクト・リスト
            }
        #│
        #□└┐仕様
           #□撃墜可否
           #□衝突範囲
           #□画像取得範囲
        self.撃墜可能       = self.仕様[self.所有者][0]
        self.衝突範囲       = self.仕様[self.所有者][1]
        self.画像取得範囲   = self.仕様[self.所有者][2]
            #┴
        #│
        #□└┐基本データ
            #□シールド
            #□速度(X軸)
            #□速度(Y軸)
        self.シールド   = 0
        self.速度_X軸   = pyxel.cos(引数_発射角度) * 引数_移動速度
        self.速度_Y軸   = pyxel.sin(引数_発射角度) * 引数_移動速度
        #┴　┴

		#┬
        #〇弾を生成する
        self.仕様[self.所有者][3].append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #○座標を更新する
        self.座標_X軸 += self.速度_X軸
        self.座標_Y軸 += self.速度_Y軸
        #│
        #●座標を調べる
        if (self.座標_X軸 <= -8 or self.座標_X軸 >= pyxel.width   or
            self.座標_Y軸 <= -8 or self.座標_Y軸 >= pyxel.height):
        #　 ＼（座標が『画面表示外』場合）
            #↓
            #●弾を消滅する
            self.仕様[self.所有者][3].remove(self)
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            arg爆発半径 = 4,        #① 爆発アニメーション有無
            arg無条件破壊 = False): #② True：無条件爆破

		#┬
        #◇┐無条件に爆破される状態にする
        if arg無条件破壊:
        #　├┐（機雷がさく裂した場合）
            #↓
            #○シールドをゼロにする
            self.シールド = 0
            #┴
        #│
        #◇┐ダメージを与える
        if self.シールド > 0:
        #　├┐（シールドが残っている場合）
            #↓
            #○シールドを減らす
            #○被弾音を鳴らす
            self.シールド   -= 1
            pyxel.play(2, 1, resume=True)
            #┴

        else:
        #　└┐（その他）
            #↓
            #●消滅する
            self.Fn消滅(arg爆発半径)
        #┴　┴
	#────────────────────────────────────	
    def Fn消滅(self,
            arg爆発半径):   #① 爆発アニメーション有無
		#┬
        #◇┐爆発を追加する
        if arg爆発半径 > 0:
            #●爆発を生成する
            class爆発(
                    self.GAME,
                    self.座標_X軸 + 4, self.座標_Y軸 + 4,
                    arg爆発半径,
                    self.GAME.定数_所有者_なし)
        #　└┐（その他）
            #┴
        #│
        #○消滅する
        self.仕様[self.所有者][3].remove(self)
        #┴
        
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.blt(
                self.座標_X軸, self.座標_Y軸, 0,
                self.画像取得範囲[0],
                self.画像取得範囲[1],
                self.画像取得範囲[2],
                self.画像取得範囲[3],
                0)
        #┴