#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（弾）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import class所有者ID    as 所有者ID # 仕様区分／爆発の所有者
from    .爆発   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先     ,   #① 生成先のオブジェクト
            引数_所有者     ,
            引数_速度X      ,
            引数_速度Y      ):

        self.機種       = None
        self.所有者     = 引数_所有者
        self.速度X      = 引数_速度X
        self.速度Y      = 引数_速度Y

        if 引数_所有者 == 所有者ID.自機:
            self.格納先         = 引数_生成先.obj弾_自機
            self.撃墜可否       = False
            self.衝突範囲       = (2, 1, 5, 6)
            self.画像取得範囲   = (0, 8, 8, 8) 

        else:
            self.格納先         = 引数_生成先.obj弾_標的
            self.撃墜可否       = True
            self.衝突範囲       = (2, 2, 5, 5)
            self.画像取得範囲   = (8, 8, 8, 8)


#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:

    def __init__(self,
            引数_X座標      ,
            引数_Y座標      ):

        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.シールド   = 0

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:

    def __init__(self):
        self.無敵       = False # True:無敵／False:通常

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class弾:

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先,	#① 生成先のオブジェクト
            引数_所有者,    #② 所有者
            引数_X座標,		#③ Ｘ座標
            引数_Y座標,		#④ Ｙ座標
            引数_発射角度,  #⑤ 発射角度
            引数_移動速度): #⑥ 移動速度
		#┬
        #□生成先
        self.GAME = 引数_生成先
        #│
        #□└┐仕様
        self.仕様 = class仕様(
                引数_生成先,
                引数_所有者 = 引数_所有者                               ,
                引数_速度X  = pyxel.cos(引数_発射角度) * 引数_移動速度  ,
                引数_速度Y  = pyxel.sin(引数_発射角度) * 引数_移動速度  )
        #│
        #□情報
        self.情報 = class情報(
                引数_X座標  = 引数_X座標    ,
                引数_Y座標  = 引数_Y座標    )
        #│
        #□└┐性能データ
        self.特殊効果 =  class特殊効果()
        #┴　┴

		#┬
        #〇弾を生成する
        self.仕様.格納先.append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．移動処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #○座標を更新する
        self.情報.X += self.仕様.速度X
        self.情報.Y += self.仕様.速度Y
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．除外処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 除外処理(self):
		#┬
        #●座標を確認する
        if (
                (self.情報.X > -8 and self.情報.X < pyxel.width) and
                (self.情報.Y > -8 and self.情報.Y < pyxel.height)
                ): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾を消滅する
        self.仕様.格納先.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 4):   #② 爆発半径
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.情報.シールド = 0
            #┴
        elif self.特殊効果.無敵:
        #　├┐（無敵モードの場合）
            #↓
            #▼処理を中断する
            return
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.情報.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発(
                    self.GAME       ,
                    所有者ID.なし   ,
                    self.情報.X + 4 ,
                    self.情報.Y + 4 ,
                    arg爆発半径     ,
                    False           )
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.情報.シールド <= 0:
        #│├┐（シールド切れの場合）
            #↓
            #○オブジェクトを削除する
            self.仕様.格納先.remove(self)
            #┴
        #│└┐（その他）
        #┴　#┴
        
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #◇┐描画する
        pyxel.blt(
                self.情報.X                 ,
                self.情報.Y                 ,
                0                           ,
                self.仕様.画像取得範囲[0]   ,
                self.仕様.画像取得範囲[1]   ,
                self.仕様.画像取得範囲[2]   ,
                self.仕様.画像取得範囲[3]   ,
                0                           )
        #┴