#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│class種類ID  ： アイテムの識別に必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from .アイテム  import class種類ID  as アイテムID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報（特殊効果）
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報で、特殊効果に関するものを管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┃　　　│（アイテムの効果発動に応じて内容を書き換える）
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果():

    #┬
    #□特殊効果ＩＤ
    ID_追加速度     = 1
    ID_連射         = 2
    ID_防御UP       = 3
    ID_貫通弾       = 4
    ID_発射数       = 5
    ID_発射方向     = 6
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #□特殊効果データ
        self.情報   = {}
        #┴

	#────────────────────────────────────	
    def 効果発動(self,
            引数_アイテム ):

        種類ID      = 引数_アイテム.仕様.機種
        持続時間    = 引数_アイテム.仕様.持続時間

        self.Fn効果登録_速度    ( 種類ID , 持続時間 )
        self.Fn効果登録_連射    ( 種類ID , 持続時間 )
        self.Fn効果登録_防御率  ( 種類ID , 持続時間 )
        self.Fn効果登録_発射数  ( 種類ID , 持続時間 )
        self.Fn効果登録_発射方向( 種類ID , 持続時間 )

	#────────────────────────────────────	
    def Fn時間経過(self):

        #〇無期限,まだ時間があるものを残す
        self.情報 = {キー: 値 for キー, 値 in self.情報.items() if 値[0] != 1}

        #◎無期限以外のものに対し、残り時間を減らす
        for 対象値, 値 in self.情報.items():
            if any(対象値 != 0 for 対象値 in 値):
                self.情報[対象値] = [対象値 - 1 for 対象値 in 値]
	#────────────────────────────────────	
    def Fn削除と値取得(self,
            引数_種類ID ):

        if 引数_種類ID in self.情報:
        #　├┐（登録済みの場合）
            #↓
            値 = self.情報[引数_種類ID][1]
            del self.情報[引数_種類ID]
            return 値
        else:
            return None
        #┴　┴

	#────────────────────────────────────	
    def Fn効果登録_速度(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID != アイテムID.速度UP: return

        値 = self.Fn削除と値取得(self.ID_追加速度)
        値 = 0.5 if 値 is not None else max( 値 + 0.5 , 3 )
        self.情報[ ID_追加速度 ] = ( 引数_持続時間 , 値 )
        #┴
	#────────────────────────────────────	
    def Fn効果登録_連射(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID != アイテムID.発射_連射: return

        値 = self.Fn削除と値取得(self.ID_連射)
        self.情報[ self.ID_連射 ] = ( 引数_持続時間 , True )
        #┴
	#────────────────────────────────────	
    def Fn効果登録_防御率(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID < アイテムID.ダメージ無し: return
        if 引数_種類ID > アイテムID.ダメージ吸収: return

        値 = self.Fn削除と値取得(self.ID_防御UP)

        if 対象 == アイテムID.ダメージ無し:
        #　├┐（シールドが切れた場合）
            #↓
            self.情報[ self.ID_防御UP  ] = (引数_持続時間 ,0)

        elif 対象 == アイテムID.ダメージ半分:
        #　├┐（シールドが切れた場合）
            #↓
            self.Fn削除と値取得(self.ID_防御UP)
            self.情報[ self.ID_防御UP  ] = (引数_持続時間 ,0.5)

        elif 対象 == アイテムID.ダメージ吸収: 
        #　├┐（シールドが切れた場合）
            #↓
            self.情報[ self.ID_防御UP  ] = (持続引数_持続時間時間 ,-1)
	#────────────────────────────────────	
    def Fn効果登録_貫通弾(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID != アイテムID.貫通弾:return

        値 = self.Fn削除と値取得(self.ID_貫通弾)
        self.情報[ self.ID_貫通弾 ] = (引数_持続時間 ,True)
        #┴
	#────────────────────────────────────	
    def Fn効果登録_発射数(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID != アイテムID.発射_弾数UP: return

        値 = self.Fn削除と値取得(self.ID_発射数)
        値 = 2 if 値 is not None else max((値 + 1),4)
        self.情報[ self.ID_発射数 ] = ( 引数_持続時間 , 値 )
        #┴
	#────────────────────────────────────	
    def Fn効果登録_発射方向(self,
            引数_種類ID,
            引数_持続時間 ):

        if 引数_種類ID < アイテムID.発射_上下方向:return
        if 引数_種類ID > アイテムID.発射_8方向:return

        値 = self.Fn削除と値取得(self.ID_発射方向)

        for i in range(アイテムID.発射_上下方向,アイテムID.発射_8方向):
            #◇┐発射方向を変える
            if 引数_種類ID == i:
            #　├┐（上下方向の場合）
                #↓
                self.情報[ self.ID_発射方向 ] = ( 引数_持続時間 , i )
        #┴　┴　┴