#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　　│class弾        ： 発射処理で必要
#┃　　　│class爆発      ： 衝突処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import class所有者ID    as 所有者ID
from    .弾     import class弾
from    .爆発   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：仕様(種類ID)
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの扱で必要なIDを管理
#┠───┼─────────────────────────────────
#┃解　説│とくになし
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class種類:
    #┬
    #□仕様データ
    戦闘機1  = 0
    戦闘機2  = 1
    戦闘機3  = 2
    #│
    機雷   = 3
    救急箱 = 4
    弾薬庫 = 5
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│・オブジェクト生成後は、原則この内容は書き換えない
#┃　　　│・オブジェクトのパターンごとの情報をデータベースで持つ
#┃　　　│・仕様データベースより、指定した機種の仕様をセットする
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

    #┬
    #□仕様データベース
    仕様DB = {
            class種類.戦闘機1   : ( ( True, 30), (1.2, 0.0,  0), (40, 2, 1.6) ) , 
            class種類.戦闘機2   : ( ( True, 90), (1.0, 1.2, 30), (40, 1, 2.0) ) , 
            class種類.戦闘機3   : ( ( True, 60), (0.8, 0.0,  0), (80, 4, 1.3) ) , 
            class種類.機雷      : ( ( True,  0), (0.7, 1.5, 20), ( 0, 0, 0.0) ) , 
            class種類.救急箱    : ( (False,  0), (0.5, 1.5, 20), ( 0, 0, 0.0) ) , 
            class種類.弾薬庫    : ( (False,  0), (0.6, 1.5, 20), ( 0, 0, 0.0) ) }
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_機種):     #① 担当する機種
        #┬
        #□仕様データ
        self.機種       = 引数_機種
        self.衝突範囲   = (0, 0, 7, 7)

        self.撃墜可否   = self.仕様DB[ 引数_機種 ][0][0]
        self.点数       = self.仕様DB[ 引数_機種 ][0][1]

        self.速度Y      = self.仕様DB[ 引数_機種 ][1][0]
        self.速度X      = self.仕様DB[ 引数_機種 ][1][1]
        self.反転間隔   = self.仕様DB[ 引数_機種 ][1][2]

        self.発射間隔   = self.仕様DB[ 引数_機種 ][2][0]
        self.発射弾数   = self.仕様DB[ 引数_機種 ][2][1]
        self.発射速度   = self.仕様DB[ 引数_機種 ][2][2]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self       ,
            引数_X座標      ,   #① 存在位置(X座標)
            引数_Y座標      ,   #② 存在位置(Y座標)
            引数_シールド   ):  #④ シールドの残量
		#┬
        #□動的データ
        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.シールド   = 引数_シールド
        self.経過時間   = 0
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報（特殊効果）
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報で、特殊効果に関するものを管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┃　　　│（アイテムの効果発動に応じて内容を書き換える）
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self):
		#┬
        #□特殊効果データ
        self.無敵       = False # True:無敵／False:通常
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class標的:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトのリファレンスを用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体に用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新5_出現.py
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_X座標  ,   #② 存在位置(X座標)
            引数_Y座標  ,	#③ 存在位置(Y座標)
            引数_機種   ,   #④ 担当する機種
            引数_難易度 ):  #⑤ 難易度 ※シールド量に影響
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_機種)
        #│
        #□データセット(情報)
        self.情報 = class情報(
                引数_X座標      = 引数_X座標                ,
                引数_Y座標      = 引数_Y座標                ,
                引数_シールド   = min(引数_難易度 * 4, 36)  )
        #│
        #□データセット(情報:特殊効果)
        self.特殊効果 =  class特殊効果()
        #┴　┴

		#┬
        #●本体で用意したインスタンスに生成
        self.GAME.obj標的.append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・移動には、前進と横移動の2種類がある
    #┃　（移動パターンは仕様で決まる）
 	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #○経過時間をカウントする
        self.情報.経過時間 += 1
        #│
        #●前進(下方に移動)する
        self.Fn更新_前進()
        #│
        #●横に移動する
        self.Fn更新_横移動()
        #┴
	#────────────────────────────────────
    def Fn更新_前進(self):
		#┬
        #○座標Yを変更する
        self.情報.Y += self.仕様.速度Y
        #┴
	#────────────────────────────────────
    def Fn更新_横移動(self):
		#┬
        #○仕様を確認する
        if (self.仕様.速度Y * self.仕様.反転間隔) == 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #◇┐座標Xを移動する
        if self.情報.経過時間 // self.仕様.反転間隔 % 2 == 0:
        #　├┐（折返しタイミングの場合）
            #↓
            #○座標Xを右に移動する
            self.情報.X += self.仕様.速度X
            #┴
        else:
        #　└┐（その他）
            #↓
            #○座標Xを左に移動する
            self.情報.X -= self.仕様.速度X
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．更新処理(除外)
    #┠────┬──────────────────────────────
    #┃概　　要│画面外にはみ出した場合に抹消する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新2_除外.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・Ｙ座標だけで判断する
    #┃　（画面外から戻る場合があるので、Ｘ座標はチェックしない）
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 除外処理(self):
		#┬
        #○位置を確認する
        if (self.情報.Y < pyxel.height): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾を消滅する
        self.GAME.obj標的.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．更新処理(発射)
    #┠────┬──────────────────────────────
    #┃概　　要│弾を発射する
    #┃　　　　│① 発射条件を満たすかを確認
    #┃        │② 発射パターンい従い発射
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新3_発射.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・発射は複数パターンあり仕様で決まる
    #┃　・単発発射の場合は自機に向けて角度を調整する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #●発射できるか確認する
        if self.Fn発射_確認(): return
        #　 ＼（『発射不可』の場合）
            #↓
        #　 ▼処理を中断する
        #│
        #◇┐発射する  
        if self.仕様.発射弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #○仕様を確認する
        if (self.仕様.発射弾数 * self.仕様.発射間隔 * self.仕様.発射速度) == 0:
        #　＼（標的が『弾を発射しない』タイプの場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #○発射タイミングを確認する
        if self.情報.経過時間 % self.仕様.発射間隔 != 0: return True
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
        #│
        #▼『発射不可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
		#┬
        #◇┐角度を求める
        if self.GAME.obj自機 is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            発射角度 = 90
            #┴
        else:
        #　└┐（その他）
            #↓
            #▼自機の方角を返す
            発射角度 = pyxel.atan2(
                    self.GAME.obj自機.情報.Y - self.情報.Y  ,
                    self.GAME.obj自機.情報.X - self.情報.X  )
            #┴
        #│
        #●弾を生成する
        class弾(
                self.GAME                       ,
                所有者ID.標的                   ,
                self.情報.X                     ,
                self.情報.Y                     ,
                発射角度, self.仕様.発射速度    )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_複数発(self):
		#┬
        #◎└┐多方向に発射する
        分割角度 = 180 / (self.仕様.発射弾数 - 1)
        for tmp発射弾数 in range(self.仕様.発射弾数):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp発射弾数 * 分割角度
            #│
            #●弾を生成する
            class弾(
                    self.GAME                       ,
                    所有者ID.標的                   ,
                    self.情報.X                     ,
                    self.情報.Y                     ,
                    発射角度, self.仕様.発射速度    )
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．更新処理(衝突)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┃　　　　│① ダメージ量を算出
    #┃        │② 爆発オブジェクトを生成
    #┃        │③ オブジェクトを消失
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・引数指定により、無条件破壊(クリティカルヒット)が可
    #┃　・特殊効果により、ダメージを受けなことが可
    #┃　・引数指定により、爆破オブジェクトの有無を制御可
    #┃　・シールドが切れると、このオブジェクトを消失させる
    #┃　・消失する際、得点を加算する
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径 ※0：爆発なし
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.情報.シールド = 0
            #┴
        elif self.特殊効果.無敵:
        #　├┐（無敵モードの場合）
            #↓
            #▼処理を中断する
            return
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.情報.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        if arg爆発半径 > 0:
        #│├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発(
                    self.GAME                       ,
                    所有者ID.標的                   ,
                    self.情報.X + 4, self.情報.Y + 4,
                    arg爆発半径                     ,
                    True                            )
            #│
            #○被弾音を鳴らす
            pyxel.play(2, 1, resume=True)
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.情報.シールド <= 0:
        #　├┐（シールド切れの場合）
            #↓
            #○スコアを加算する
            self.GAME.情報.得点 += self.仕様.点数
            #│
            #○オブジェクトを削除する
            self.GAME.obj標的.remove(self)
            #┴
        #　└┐（その他）
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠────┬──────────────────────────────
    #┃概　　要│画面に描画する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py ･･･ 描画処理()
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.blt(
                self.情報.X                         ,
                self.情報.Y                         ,
                0                                   ,
                self.仕様.機種 * 8 + 8, 0, 8, 8, 0  )
        #┴