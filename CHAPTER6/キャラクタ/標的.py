#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from .弾	import class弾
from 演出   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class標的:

    #┬
    #□機種Ａ
    #□機種Ｂ
    #□機種Ｃ
    定数_機種A  = 0
    定数_機種B  = 1
    定数_機種C  = 2
    #│
    #□機雷
    #□救急箱
    #□弾薬庫
    定数_機雷   = 3
    定数_救急箱 = 4
    定数_弾薬庫 = 5
    #│
    #□仕様一覧　※ [速度Y 最小,変化率％], [速度X, 反転間隔], [発射間隔,弾数,速度] 
    仕様 = {
        定数_機種A  : (  True, (1.2, 0.0,  0), (40, 2, 1.6) ), 
        定数_機種B  : (  True, (1.0, 1.2, 30), (40, 1, 2.0) ), 
        定数_機種C  : (  True, (0.8, 0.0,  0), (80, 4, 1.3) ), 
        定数_機雷   : (  True, (0.7, 1.5, 20), ( 0, 0, 0.0) ), 
        定数_救急箱 : ( False, (0.5, 1.5, 20), ( 0, 0, 0.0) ), 
        定数_弾薬庫 : ( False, (0.6, 1.5, 20), ( 0, 0, 0.0) )
        }
    #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先,	#① 生成先のオブジェクト
            引数_X座標,		#② Ｘ座標
            引数_Y座標,		#③ Ｙ座標
            引数_機種,      #② 機種
            引数_難易度):   #③ 難易度

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
            #□Ｘ座標
            #□Ｙ座標
            #□機種
            #□難易度
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.機種       = 引数_機種
        self.難易度     = 引数_難易度
            #┴
        #│
        #□└┐仕様
            #□撃墜可能
        self.撃墜可能   = self.仕様[self.機種][0]
            #│
            #□速度Y軸
            #□速度X軸
            #□X軸反転間隔
        self.速度Y      = self.仕様[self.機種][1][0]
        self.速度X      = self.仕様[self.機種][1][1]
        self.反転間隔   = self.仕様[self.機種][1][2]
            #│
            #□発射間隔
            #□一度の発射弾数
            #□射速
        self.発射間隔   = self.仕様[self.機種][2][0]
        self.発射弾数   = self.仕様[self.機種][2][1]
        self.発射速度   = self.仕様[self.機種][2][2]
            #│
            #□衝突範囲
        self.衝突範囲   = (0, 0, 7, 7)
            #┴
        #│
        #□└┐基本データ
            #□シールド
            #□経過時間
        self.シールド   = self.難易度 - 1
        self.経過時間   = 0
        #┴　┴

		#┬
        #●オブジェクト化する
        self.GAME.obj標的.append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #○経過時間をカウントする
        self.経過時間 += 1
        #│
        #◇┐移動する
        self.Fn更新_前進()
        self.Fn更新_横移動()
            #┴
        #│
        #◇┐後処理
        if (self.座標_Y軸 >= pyxel.height):
        #　 ＼（座標が『画面表示外』場合）
            #↓
            #●弾を消滅する
            self.GAME.obj標的.remove(self)
        #┴　┴
	#────────────────────────────────────
    def Fn更新_前進(self):
		#┬
        #○座標Yを変更する
        self.座標_Y軸 += self.速度Y
        #┴
	#────────────────────────────────────
    def Fn更新_横移動(self):
		#┬
        #○仕様を調べる
        if (self.速度X * self.反転間隔) == 0:
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
            return
        #│
        #◇┐座標Xを移動する
        if self.経過時間 // self.反転間隔 % 2 == 0:
        #　├┐（折返しタイミングの場合）
            #↓
            #○座標Xを右に移動する
            self.座標_X軸 += self.速度X
            #┴

        else:
        #　└┐（その他）
            #↓
            #○座標Xを左に移動する
            self.座標_X軸 -= self.速度X
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．発射処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #●発射できるか確認する
        if self.Fn発射_確認():
        #　 ＼（『発射不可』の場合）
            #↓
        #　 ▼処理を中断する
            return
        #│
        #◇┐発射する  
        if self.発射弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　├┐（タイプが『複数発・固定角度』の場合）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数初()
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #○仕様を調べる
        if (self.発射弾数 * self.発射間隔 * self.発射速度) == 0:
        #　＼（標的が『弾を発射しない』タイプの場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #○発射タイミングを調べる
        if self.経過時間 % self.発射間隔 != 0:
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #▼『発射不可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
		#┬
        #◇┐角度を求める
        if self.GAME.obj自機 is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            発射角度 = 90
            #┴

        else:
        #　└┐（その他）
            #↓
            #▼自機の方角を返す
            発射角度 = pyxel.atan2(
                    self.GAME.obj自機.座標_Y軸 - self.座標_Y軸,
                    self.GAME.obj自機.座標_X軸 - self.座標_X軸 )
            #┴
        #│
        #●弾を生成する
        class弾(
                self.GAME,
                self.座標_X軸,
                self.座標_Y軸,
                self.GAME.定数_所有者_標的,
                発射角度,
                self.発射速度 )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_複数初(self):
		#┬
        #◎└┐多方向に発射する
        分割角度 = 180 / (self.発射弾数 - 1)
        for tmp発射弾数 in range(self.発射弾数):
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp発射弾数 * 分割角度
            #│
            #●弾を生成する
            class弾(
                    self.GAME,
                    self.座標_X軸,
                    self.座標_Y軸,
                    self.GAME.定数_所有者_標的,
                    発射角度,
                    self.発射速度 )
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            arg爆発半径 = 8,        #① 爆発アニメーション有無
            arg無条件破壊 = False): #② True：無条件爆破

		#┬
        #◇┐無条件に爆破される状態にする
        if arg無条件破壊:
        #　├┐（機雷がさく裂した場合）
            #↓
            #○シールドをゼロにする
            self.シールド = 0
            #┴
        #│
        #◇┐ダメージを与える
        if self.シールド > 0:
        #　├┐（シールドが残っている場合）
            #↓
            #○シールドを減らす
            #○被弾音を鳴らす
            self.シールド   -= 1
            pyxel.play(2, 1, resume=True)
            #┴

        else:
        #　└┐（その他）
            #↓
            #●消滅する
            self.Fn消滅(arg爆発半径)
        #┴　┴
	#────────────────────────────────────	
    def Fn消滅(self,
            arg爆発半径):   #① 爆発アニメーション有無
 		#┬
        #◇┐爆発を追加する
        if arg爆発半径 > 0:
            #●爆発を生成する
            class爆発(
                    self.GAME,
                    self.座標_X軸 + 4, self.座標_Y軸 + 4,
                    arg爆発半径,
                    self.GAME.定数_所有者_標的)
            #│
            #○爆発音を鳴らす
            pyxel.play( 2, 2, resume = True ) 
            #│
            #○スコアを加算する
            self.GAME.得点 += self.難易度 * 10
            #┴
        #　└┐（その他）
            #┴
        #│
        #○消滅する
        self.GAME.obj標的.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.blt(
                self.座標_X軸, self.座標_Y軸, 0,
                self.機種 * 8 + 8, 0, 8, 8, 0)
        #┴