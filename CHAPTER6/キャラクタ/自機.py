#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　　│class弾        ： 発射処理で必要
#┃　　　│class爆発      ： 衝突処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    enum import IntEnum, auto

from    共通	    import class入力操作    as 入力 
from    処理        import class所有者ID    as 所有者ID 

from .アイテム  import class種類ID  as アイテムID
from .アイテム  import class仕様    as アイテム仕様

from .特殊効果  import class特殊効果

from    .弾         import class弾
from    .爆発       import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：仕様(種類ID)
#┠───┬─────────────────────────────────
#┃概　要│※必要な情報が無いので、この処理は不要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class種類:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
    #┬
    #□仕様データ
    移動速度   = 2
    発射間隔   = 5
    補充間隔   = 12
    積載量     = 25
    衝突範囲   = (1, 1, 6, 6)
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self       ,
            引数_X座標      ,   #① 存在位置(X座標)
            引数_Y座標      ,   #② 存在位置(Y座標)
            引数_発射制限   ,   #③ 発射制限カウンタ
            引数_弾数       ,   #④ 弾の残量
            引数_シールド   ):  #⑤ シールドの残量
		#┬
        #□動的データ
        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.発射制限   = 引数_発射制限
        self.弾数       = 引数_弾数
        self.シールド   = 引数_シールド
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトの参照用を用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体で用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新5_出現.py
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_X座標  ,	#② 存在位置(X座標)
            引数_Y座標  ):  #③ 存在位置(Y座標)
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様()
        #│
        #□データセット(情報)
        self.情報 = class情報(
                引数_X座標      = 引数_X座標                ,
                引数_Y座標      = 引数_Y座標                ,
                引数_発射制限   = 0                         ,
                引数_弾数       = 10                        ,
                引数_シールド   = int(pyxel.width * 0.7)    )
        #│
        #□データセット(情報:特殊効果)
        self.特殊効果 = class特殊効果()
        #┴　┴

		#┬
        #●本体で用意したインスタンスに生成
        self.GAME.obj自機  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・移動指示はキーボードかゲームパッドを用いる
 	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●操作状況を確認する
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[0],
            入力.定数_移動_パッド[0]
            )
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○操作状況から座標を求める
        if 結果[1][0]: self.情報.Y -= self.仕様.移動速度
        if 結果[1][1]: self.情報.Y += self.仕様.移動速度
        if 結果[1][2]: self.情報.X -= self.仕様.移動速度
        if 結果[1][3]: self.情報.X += self.仕様.移動速度
        #│
        #○座標を補正する
        self.情報.X = max(self.情報.X, 0                )
        self.情報.X = min(self.情報.X, pyxel.width  - 8 )
        self.情報.Y = max(self.情報.Y, 10               ) 
        self.情報.Y = min(self.情報.Y, pyxel.height - 20)
        #│
        #◇特殊効果の持続時間を減らす
        if self.GAME.情報.プレイ時間 % 30 == 0:
            self.特殊効果.Fn時間経過()
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．更新処理(発射)
    #┠────┬──────────────────────────────
    #┃概　　要│弾を発射する
    #┃　　　　│① 発射条件を満たすかを確認
    #┃        │② 残量に応じて(一度の)発射量を調整し発射
    #┃        │③ 残量を減らす
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新3_発射.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・発射指示はキーボードかゲームパッドを用いる
    #┃　・特殊効果により、連射することが出来る
    #┃　・一度の発射量は特殊効果と残量で決める
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #◇┐弾を補充する
        if pyxel.frame_count % self.仕様.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.情報.弾数 = min( self.情報.弾数 + 1,self.仕様.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn発射_確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐発射数を求める
        if self.特殊効果.ID_発射数 in self.特殊効果.情報:
        #　├┐（特殊効果がある場合）
            #↓
            発射数 = self.特殊効果.情報[特殊効果.ID_発射数]
        else:
        #　└┐（その他）
            #↓
            発射数 = 1
            #┴
        #│
        #◎└┐発射数を絞る(1/16,1/8,1/4.1/2毎に減らす)
        for i in range(4,1,-1):
            #◇┐弾の残量に合わせて減らす
            if self.情報.弾数 < int(self.仕様.積載量/(2**i) + 3):
            #　├┐（特殊効果がある場合）
                #↓
                #○発射数を1つ減らす
                発射数 = max( 発射数 - 1 , 1 )
            #┴
        #│
        #◇┐発射する
        if 発射数 == 1:
        #　├┐（１発の場合）
            #↓
            #●１つ発射する
            self.Fn発射_実行(+0,-3)

        elif 発射数 == 2:
        #　├┐（２発の場合）
            #↓
            #●２つ発射する
            self.Fn発射_実行(+3,-3)
            self.Fn発射_実行(-3,-3)

        elif 発射数 == 3:
        #　├┐（３発の場合）
            #↓
            #●３つ発射する
            self.Fn発射_実行(+0,-3)
            self.Fn発射_実行(+5,-0)
            self.Fn発射_実行(-5,-0)

        elif 発射数 >= 4:
        #　├┐（４発の場合）
            #↓
            #●４つ発射する
            self.Fn発射_実行(+3,-3)
            self.Fn発射_実行(-3,-3)
            self.Fn発射_実行(+8,-0)
            self.Fn発射_実行(-8,-0)

        #　└┐（その他）
            #┴
        #│
        #○弾を減らす
        self.情報.弾数 -= 1
        #┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.IDボタン_キー[0],
            入力.IDボタン_パッド[0]
            )
        
        発射法 = (1) if self.特殊効果.ID_連射 in self.特殊効果.情報 else (-1)
        if 結果[1][3] != 発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.情報.発射制限 = max(self.情報.発射制限 - 1, 0)
        if  発射法 == 1 and self.情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.情報.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn発射_実行(self,
            argオフセットX,
            argオフセットY):
		#┬
        #○弾を生成する
        class弾(
                self.GAME,
                所有者ID.自機,
                self.情報.X + argオフセットX,
                self.情報.Y + argオフセットY,
                -90, 5 )
        #│
        #○弾発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        self.情報.発射制限 = self.仕様.発射間隔
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．更新処理(衝突)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┃　　　　│① ダメージ量を算出
    #┃        │② 爆発オブジェクトを生成
    #┃        │③ オブジェクトを消失
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・引数指定により、無条件破壊(クリティカルヒット)が可
    #┃　・特殊効果により、ダメージを受けなことが可
    #┃　・引数指定により、爆破オブジェクトの有無を制御可
    #┃　・シールドが切れると、このオブジェクトを消失させる
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径 ※0：爆発なし
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.情報.シールド = 0
            #┴
        else:
        #　└┐（その他）
            #↓
            #◇防御率を求める
            if self.特殊効果.ID_防御UP in self.特殊効果.情報:
            #　├┐（特殊効果がある場合）
                #↓
                ダメージ倍率 = self.特殊効果.情報[self.特殊効果.ID_防御UP]
            else:
                ダメージ倍率 = 1
            #│
            #○ダメージを与える
            self.情報.シールド -= argダメージ * ダメージ倍率
            #┴
        #│
        #◇┐爆破する ※爆発音は相手オブジェクトで鳴らす
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X + 4, self.情報.Y + 4,
                    arg爆発半径, True )
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.情報.シールド <= 0:
        #　├┐（シールドが切れた場合）
            #↓
            #○自機を抹消する
            self.GAME.obj自機 = None
            #│
            #●追加の爆発を生成する
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X + 10, self.情報.Y + 10,
                    int(arg爆発半径*1.8), True )
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X -2, self.情報.Y -2,
                    int(arg爆発半径*1.8), True )
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．更新処理(アイテム発動)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 効果発動処理(self,
            引数_アイテム ):

        機種ID = 引数_アイテム.仕様.機種

        if 機種ID == アイテムID.弾薬回復:
            self.情報.弾数 = self.仕様.積載量

        elif 機種ID == アイテムID.シールド回復:
            self.情報.シールド = pyxel.width

        else:
            self.特殊効果.効果発動(引数_アイテム)

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠────┬──────────────────────────────
    #┃概　　要│画面に描画する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py ･･･ 描画処理()
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(
                self.情報.X,
                self.情報.Y,
                0,
                0,
                0,
                8,
                8,
                0 )
        #┴