#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	import class入力操作    as 入力     # 発射指示
from    処理    import class所有者ID    as 所有者ID # 弾・爆発の所有者
from    .弾     import class弾
from    .爆発   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

    移動速度   = 2
    発射間隔   = 5
    補充間隔   = 12
    積載量     = 25
    衝突範囲   = (1, 1, 6, 6)


#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:

    def __init__(self,
            引数_X座標,
            引数_Y座標,
            引数_発射制限,            
            引数_弾数,            
            引数_シールド
            ):

        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.発射制限   = 引数_発射制限
        self.弾数       = 引数_弾数
        self.シールド   = 引数_シールド

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:

    def __init__(self):
        self.無敵       = False # True:無敵／False:通常
        self.発射法     = 1     # 1:連射／-1:マニュアル
        self.発射数     = 1     # １～４

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_X座標  ,	#② Ｘ座標
            引数_Y座標  ):  #③ Ｙ座標
		#┬
        #□生成先のオブジェクト
        self.GAME = 引数_生成先
        #│
        #□仕様
        self.仕様 = class仕様()
        #│
        #□情報
        self.情報 = class情報(
                引数_X座標      = 引数_X座標                ,
                引数_Y座標      = 引数_Y座標                ,
                引数_発射制限   = 0                         ,
                引数_弾数       = 10                        ,
                引数_シールド   = int(pyxel.width * 0.7)    )
        #│
        #□特殊効果
        self.特殊効果 =  class特殊効果()
        #┴　┴

		#┬
        #〇自機を生成する
        self.GAME.obj自機  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．移動処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●操作状況を確認する
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[0],
            入力.定数_移動_パッド[0]
            )
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○操作状況から座標を求める
        if 結果[1][0]: self.情報.Y -= self.仕様.移動速度
        if 結果[1][1]: self.情報.Y += self.仕様.移動速度
        if 結果[1][2]: self.情報.X -= self.仕様.移動速度
        if 結果[1][3]: self.情報.X += self.仕様.移動速度
        #│
        #○座標を補正する
        self.情報.X = max(self.情報.X, 0                )
        self.情報.X = min(self.情報.X, pyxel.width  - 8 )
        self.情報.Y = max(self.情報.Y, 10               ) 
        self.情報.Y = min(self.情報.Y, pyxel.height - 20)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．発射処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #◇┐弾を補充する
        if pyxel.frame_count % self.仕様.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.情報.弾数 = min( self.情報.弾数 + 1,self.仕様.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn発射_確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        発射数 = self.特殊効果.発射数
        for i in range(4,1,-1):
            if self.情報.弾数 < int(self.仕様.積載量/(2**i) + 3):
                発射数 = max( 発射数 - 1 , 1 )

        if 発射数 == 1:
            #●単発で発射する
            self.Fn発射_実行(+0,-3)

        elif 発射数 == 2:
            #●単発で発射する
            self.Fn発射_実行(+3,-3)
            self.Fn発射_実行(-3,-3)

        elif 発射数 == 3:
            #●単発で発射する
            self.Fn発射_実行(+0,-3)
            self.Fn発射_実行(+5,-0)
            self.Fn発射_実行(-5,-0)

        elif 発射数 >= 4:
            #●単発で発射する
            self.Fn発射_実行(+3,-3)
            self.Fn発射_実行(-3,-3)
            self.Fn発射_実行(+8,-0)
            self.Fn発射_実行(-8,-0)

        #○弾を減らす
        self.情報.弾数 -= 1
        #┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.IDボタン_キー[0],
            入力.IDボタン_パッド[0]
            )
        if 結果[1][3] != self.特殊効果.発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.情報.発射制限 = max(self.情報.発射制限 - 1, 0)
        if  self.特殊効果.発射法 == 1 and self.情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.情報.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn発射_実行(self,
            argオフセットX,
            argオフセットY):
		#┬
        #○弾を生成する
        class弾(
                self.GAME,
                所有者ID.自機,
                self.情報.X + argオフセットX,
                self.情報.Y + argオフセットY,
                -90, 5 )
        #│
        #○弾発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        self.情報.発射制限 = self.仕様.発射間隔
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.情報.シールド = 0
            #┴
        elif self.特殊効果.無敵:
        #　├┐（無敵モードの場合）
            #↓
            #▼処理を中断する
            return
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.情報.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する ※爆発音は相手オブジェクトで鳴らす
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X + 4, self.情報.Y + 4,
                    arg爆発半径, True )
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.情報.シールド <= 0:
            #↓
            #○自機を抹消する
            self.GAME.obj自機 = None
            #│
            #●追加の爆発を生成する
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X + 10, self.情報.Y + 10,
                    int(arg爆発半径*1.8), True )
            class爆発( 
                    self.GAME, 所有者ID.自機,
                    self.情報.X -2, self.情報.Y -2,
                    int(arg爆発半径*1.8), True )
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(self.情報.X, self.情報.Y, 0, 0, 0, 8, 8, 0)
        #┴
