#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通	import class汎用 as 共通, class入力操作 as 入力
from .弾	import class弾
from 演出   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:

    #┬
    #□移動速度
    #□弾の発射間隔
    定数_移動速度   = 2
    定数_発射間隔   = 5
    定数_補充間隔   = 8
    定数_積載量     = 25
    #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標		#③ Ｙ座標
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
            #□Ｘ座標
            #□Ｙ座標
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
            #┴
        #│
        #□└┐基本データ
            #□弾発射までの残り時間
            #□衝突範囲
            #□残り弾数
        self.衝突範囲	    = (1, 1, 6, 6)
        self.残り時間_発射  = 0
        self.残り弾数       = self.定数_積載量
        self.残りシールド   = pyxel.width
        #┴　┴

		#┬
        #〇自機を生成する
        self.GAME.obj自機  = self
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #●移動する
        #●発射する
        self.更新処理_移動()
        self.更新処理_発射()
        #┴
	#────────────────────────────────────	
    def 更新処理_移動(self):
		#┬
        #●操作状況を調べる
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[0],
            入力.定数_移動_パッド[0]
            )
        if not 結果[0][0]: return
        #　＼（指示が無い場合）
            #▼処理を中断する
        #│
        #○操作状況から座標を求める
        if 結果[1][0]: self.座標_Y軸 -= class自機.定数_移動速度
        if 結果[1][1]: self.座標_Y軸 += class自機.定数_移動速度
        if 結果[1][2]: self.座標_X軸 -= class自機.定数_移動速度
        if 結果[1][3]: self.座標_X軸 += class自機.定数_移動速度
        #│
        #○座標を補正する
        self.座標_X軸 = max(self.座標_X軸, 0                )
        self.座標_X軸 = min(self.座標_X軸, pyxel.width  - 8 )
        self.座標_Y軸 = max(self.座標_Y軸, 10               ) 
        self.座標_Y軸 = min(self.座標_Y軸, pyxel.height - 20)
        #┴
	#────────────────────────────────────	
    def 更新処理_発射(self):
		#┬
        #○弾を補充する
        if (
            (pyxel.frame_count % self.定数_補充間隔 == 0) and 
            (self.残り弾数 < self.定数_積載量)
        ):self.残り弾数 += 1
        #│
        #○操作状況を調べる
        if self.残り時間_発射 > 0:
        #　＼（発射まちの場合）
            #○発射可能までの時間を減らす
            #▼処理を中断する
            self.残り時間_発射 -= 1
            return
        #│
        #○残数を調べる
        if self.残り弾数 == 0: return
        #　＼（発射まちの場合）
            #▼処理を中断する
        #│
        #●ユーザ操作を調べる
        結果 = 入力.Fun走査(
            入力.定数_ボタン_キー[0],
            入力.定数_ボタン_パッド[0]
            )
        if not 結果[0][0]: return
        #　＼（指示が無い場合）
            #▼処理を中断する
        #│
        #○弾を生成する
        class弾(
            self.GAME,
            self.座標_X軸, self.座標_Y軸 - 3,
            self.GAME.定数_所有者_自機,
            -90, 5
            )
        #│
        #○弾発射音を鳴らす
        #○発射可能までの時間をリセットする
        #○弾を減らす
        pyxel.play(3, 0)
        self.残り時間_発射 = class自機.定数_発射間隔
        self.残り弾数 -= 1
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self):
		#┬
        #●爆発を生成する
        class爆発(
            self.GAME,
            self.座標_X軸 + 4, self.座標_Y軸 + 4,
            self.GAME.定数_所有者_自機
            )
        #│
        #○シールドを減らす
        self.残りシールド -= 3
        #│
        #●シーンを切替える(終了)
        if self.残りシールド < 0: self.GAME.共通_シーン_終了()
        #│
        #○爆発音を鳴らす
        pyxel.play(0, 2,resume=True)
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(self.座標_X軸, self.座標_Y軸, 0, 0, 0, 8, 8, 0)
        #┴
