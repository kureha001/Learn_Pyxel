#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	import class入力操作 as 入力
from    .弾     import class弾
from    .爆発   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:

    #┬
    #□移動速度
    #□弾の発射間隔
    定数_移動速度   = 2
    定数_発射間隔   = 5
    定数_補充間隔   = 12
    定数_積載量     = 25
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先,	#① 生成先のオブジェクト
            引数_X座標,		#② Ｘ座標
            引数_Y座標):    #③ Ｙ座標
		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
            #□Ｘ座標
            #□Ｙ座標
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
            #┴
        #│
        #□└┐基本データ
            #□弾発射までの残り時間
            #□衝突範囲
            #□弾数
        self.衝突範囲   = (1, 1, 6, 6)
        self.発射制限   = 0
        self.弾数       = 10
        self.シールド   = int(pyxel.width * 0.7)
        #┴　┴

		#┬
        #〇自機を生成する
        self.GAME.obj自機  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．移動処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●操作状況を確認する
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[0],
            入力.定数_移動_パッド[0]
            )
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○操作状況から座標を求める
        if 結果[1][0]: self.座標_Y軸 -= self.定数_移動速度
        if 結果[1][1]: self.座標_Y軸 += self.定数_移動速度
        if 結果[1][2]: self.座標_X軸 -= self.定数_移動速度
        if 結果[1][3]: self.座標_X軸 += self.定数_移動速度
        #│
        #○座標を補正する
        self.座標_X軸 = max(self.座標_X軸, 0                )
        self.座標_X軸 = min(self.座標_X軸, pyxel.width  - 8 )
        self.座標_Y軸 = max(self.座標_Y軸, 10               ) 
        self.座標_Y軸 = min(self.座標_Y軸, pyxel.height - 20)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．発射処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #○弾を補充するタイミングを確認する
        #◇┐弾を補充する
        if pyxel.frame_count % self.定数_補充間隔 == 0:
        #│├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.弾数 = min( self.弾数 + 1,self.定数_積載量 )
        #│└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn発射_確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●単発で発射する
        self.Fn発射_実行()
        #┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.定数_ボタン_キー[0],
            入力.定数_ボタン_パッド[0]
            )
        if not 結果[0][0]: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.発射制限 = max(self.発射制限 - 1, 0)
        if self.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.弾数 == 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn発射_実行(self):
		#┬
        #○弾を生成する
        class弾(
                self.GAME,
                self.座標_X軸,
                self.座標_Y軸 - 3,
                self.GAME.定数_所有者_自機,
                -90, 5 )
        #│
        #○弾発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        self.発射制限 = self.定数_発射間隔
        #│
        #○弾を減らす
        self.弾数 -= 1
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．衝突処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.シールド = 0
            #┴
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発( 
                    self.GAME, 
                    self.GAME.定数_所有者_自機,
                    self.座標_X軸 + 4, self.座標_Y軸 + 4,
                    arg爆発半径, True )
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.シールド <= 0:
        #│├┐（シールド切れの場合）
            #↓
            #○自機を抹消する
            self.GAME.obj自機 = None
        #┴　┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．描画処理
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(self.座標_X軸, self.座標_Y軸, 0, 0, 0, 8, 8, 0)
        #┴
