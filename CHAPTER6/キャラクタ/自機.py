#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from 共通   import class汎用 as 共通
from .弾	import class弾
from 演出   import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:

    #┬
    #□移動速度
    #□弾の発射間隔
    定数_移動速度   = 2
    定数_発射間隔   = 6 
    #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標		#③ Ｙ座標
        ):
		#┬
        #○引数を退避する
        self.objGame	= 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        #│
        #○└┐基本データを初期化する
            #○弾発射までの残り時間を初期化する
            #○衝突範囲を初期化する
        self.衝突範囲	    = (1, 1, 6, 6)
        self.残り時間_発射  = 0
            #┴
        #│
        #〇自機を生成する
        self.objGame.obj自機  = self
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #◇┐キー入力で自機を移動させる
        if pyxel.btn(pyxel.KEY_LEFT )   : self.座標_X軸 -= class自機.定数_移動速度
        if pyxel.btn(pyxel.KEY_RIGHT)   : self.座標_X軸 += class自機.定数_移動速度
        if pyxel.btn(pyxel.KEY_UP   )   : self.座標_Y軸 -= class自機.定数_移動速度
        if pyxel.btn(pyxel.KEY_DOWN )   : self.座標_Y軸 += class自機.定数_移動速度
        #│
        #〇自機を移動する
        self.座標_X軸 = max(self.座標_X軸, 0                  )
        self.座標_X軸 = min(self.座標_X軸, pyxel.width  - 8   )
        self.座標_Y軸 = max(self.座標_Y軸, 0                  )
        self.座標_Y軸 = min(self.座標_Y軸, pyxel.height - 8   )
        #│
        #◇┐弾の発射間隔を制限する
        if self.残り時間_発射 > 0:
        #　├→（）
            #○発射可能までの時間を減らす
            self.残り時間_発射 -= 1
            #┴
        #│
        #◇┐弾を発射する
        if pyxel.btn(pyxel.KEY_SPACE) and self.残り時間_発射 == 0:
        #　├→（発射可能で、スペースキーを押した場合）
            #○弾を生成する
            class弾(
                self.objGame,
                self.座標_X軸, self.座標_Y軸 - 3,
                class弾.定数_所有者_自機,
                -90, 5
                )
            #│
            #○弾発射音を鳴らす
            pyxel.play(3, 0)
            #│
            #○発射可能までの時間をリセットする
            self.残り時間_発射 = class自機.定数_発射間隔
            #┴
        #　└┐（その他）
        #┴　┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self):
		#┬
        #●爆発を生成する
        class爆発(self.objGame, self.座標_X軸 + 4, self.座標_Y軸 + 4)
        #│
        #○BGMを止める
        #○爆発音を鳴らす
        pyxel.stop()
        pyxel.play(0, 2)
        #│
        #●ゲームオーバー画面を表示する
        self.objGame.共通_シーン切替(共通.定数_シーン_終了)
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(self.座標_X軸, self.座標_Y軸, 0, 0, 0, 8, 8, 0)
        #┴
