#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクタ（弾）　※自機・敵機で共用、所有者指定なし
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 仕様の識別、爆発で所有者の指定に必要
#┃　　　│class爆発      ： 衝突処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import class所有者ID    as 所有者ID

from    .FN移動 import classFN移動
from    .FN衝突 import classFN衝突

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│・オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先 ,   #① 生成先のオブジェクト
            引数_所有者 ):  #② 弾の所有者
        #┬
        #□仕様データ(共通)
        self.機種       = None
        self.所有者     = 引数_所有者
        #│
        #□所有者別データ
        if 引数_所有者 == 所有者ID.自機:
            self.撃墜可否   = False
            self.画像取得   = (0, 8, 8, 8) 
            self.格納先     = 引数_生成先.obj弾_自機
        else:
            self.撃墜可否   = True
            self.画像取得   = (8, 8, 8, 8)
            self.格納先     = 引数_生成先.obj弾_敵機
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_X座標      ,   #① 存在位置(X座標)
            引数_Y座標      ):  #② 存在位置(Y座標)
		#┬
        #□動的データ
        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.シールド   = 0
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報（特殊効果）
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報で、特殊効果に関するものを管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┃　　　│（アイテムの効果発動に応じて内容を書き換える）
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
		#┬
        #□特殊効果データ
    def __init__(self):
        self.無敵       = False # True:無敵／False:通常
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class弾:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトの参照用を用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体で用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新3_発射.py → 自機.py または 標的.py
    #┠────┼──────────────────────────────
    #┃解　　説│更新処理を通して、自機または標的がオブジェクト化する
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self       ,
            引数_生成先     ,   #① 生成先のオブジェクト
            引数_所有者     ,   #② 弾の所有者
            引数_X座標      ,	#③ 存在位置(X座標)
            引数_Y座標      ,	#④ 存在位置(Y座標)
            引数_発射角度   ,   #⑤ 発射する方向(角度)
            引数_移動速度   ):  #⑥ 移動速度(XYベクトル)
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_生成先, 引数_所有者)
        #│
        #□データセット(情報)
        self.情報 = class情報(引数_X座標, 引数_Y座標)
        #│
        #□データセット(情報:特殊効果)
        self.特殊効果 =  class特殊効果()
        #│
        #□処理セット
        self.FN移動処理 = None
        self.FN衝突処理 = None
        #┴　┴

		#┬
        #●処理セットをオブジェクト化する
        速度X  = pyxel.cos(引数_発射角度) * 引数_移動速度
        速度Y  = pyxel.sin(引数_発射角度) * 引数_移動速度
        classFN移動(self, 速度X, 速度Y)
        classFN衝突(self, self.GAME, 引数_所有者)
        #│
        #●本体で用意したインスタンスに生成
        self.仕様.格納先.append(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│特になし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●弾を移動する
        self.FN移動処理.処理実行()
        #┴
        
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃４．更新処理(衝突)
    #┠──┬────────────────────────────────
    #┃概要│衝突によりダメージを与える
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新4_衝突.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ = 0 ,   #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 4 ):  #② 爆発半径 ※0：爆発なし
		#┬
        #●衝突処理を実行する
        self.FN衝突処理.処理実行(argダメージ, arg爆発半径 )
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠────┬──────────────────────────────
    #┃概　　要│画面に描画する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py ･･･ 描画処理()
    #┠────┼──────────────────────────────
    #┃解　　説│画像は仕様により異なる
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #〇描画する
        pyxel.blt(
                self.情報.X             ,
                self.情報.Y             ,
                0                       ,
                self.仕様.画像取得[0]   ,
                self.仕様.画像取得[1]   ,
                self.仕様.画像取得[2]   ,
                self.仕様.画像取得[3]   ,
                0                       )
        #┴