#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクタ（弾）　※自機・敵機で共用、所有者指定なし
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 仕様の識別、爆発で所有者の指定に必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import class所有者ID    as 所有者ID
from    ..爆発  import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│・オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_GAME   ,   #① 生成先のオブジェクト
            引数_所有者 ):  #② 弾の所有者
        #┬
        #□仕様データ(共通)
        self.所有者     = 引数_所有者
        #│
        #□所有者別データ
        if 引数_所有者 == 所有者ID.自機:
            self.衝突範囲   = (2, 1, 5, 6)
        else:
            self.衝突範囲   = (2, 2, 5, 5)
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN衝突:
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 参照用の本体オブジェクトを用意
    #┃　　│② 参照用の生成先オブジェクトを用意
    #┃　　│③ 必要なデータセットをオブジェクトで用意
    #┃　　│④ 生成先のインスタンスにオブジェクト化
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py → 自機.py または 標的.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#② 生成先のオブジェクト
            引数_GAME   ,	#① 生成先のオブジェクト
            引数_所有者 ):  #③ 弾の所有者
		#┬
        #□本体オブジェクト(参照用)
        #□自機オブジェクト(参照用)
        self.GAME   = 引数_GAME
        self.弾     = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様( self.GAME, 引数_所有者 )
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.弾.FN衝突処理  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．更新処理(衝突)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┃　　　　│① ダメージ量を算出
    #┃        │② 爆発オブジェクトを生成
    #┃        │③ オブジェクトを消失
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・引数指定により、無条件破壊(クリティカルヒット)が可
    #┃　・特殊効果により、ダメージを受けなことが可
    #┃　・引数指定により、爆破オブジェクトの有無を制御可
    #┃　・シールドが切れると、このオブジェクトを消失させる
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self,
            argダメージ = 0 ,   #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 4 ):  #② 爆発半径 ※0：爆発なし
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.弾.情報.シールド = 0
            #┴
        elif self.特殊効果.無敵:
        #　├┐（無敵モードの場合）
            #↓
            #▼処理を中断する
            return
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.弾.情報.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発(
                    self.GAME       ,
                    所有者ID.なし   ,
                    self.弾.情報.X + 4 ,
                    self.弾.情報.Y + 4 ,
                    arg爆発半径     ,
                    False           )
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.情報.シールド <= 0:
        #│├┐（シールド切れの場合）
            #↓
            #○オブジェクトを削除する
            self.弾.仕様.格納先.remove(self)
            #┴
        #│└┐（その他）
        #┴　#┴