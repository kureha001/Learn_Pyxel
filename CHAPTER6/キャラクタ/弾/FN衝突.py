#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：弾：衝突機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import main.DB
from  ..爆発  import 爆発開始

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ,   #① 個体の仕様
            引数_威力   ):  #② 相手に与えるダメージ

        self.威力     = 引数_威力
        
        キー = 引数_仕様.所有者ID
        if キー == main.DB.所有者ID.自機: self.衝突範囲 = (2,1,5,6)
        else                            : self.衝突範囲 = (2,2,5,5)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self       ,
                 引数_個体  ,   #① 個体オブジェクト
                 引数_威力  ):  #② 威力
		#┬
        #〇個体オブジェクトのリファレンスを用意する
        self._個体  = 引数_個体
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様, 引数_威力)
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self           ,
            argダメージ = 0 ,   #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 0 ):  #② 爆発半径 ※0：爆発なし
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self._情報.シールド = 0
            #┴
        elif not self._仕様.貫通弾区分:
        #　├┐（通常弾の場合）
            #↓
            #○ダメージを与える
            self._情報.シールド -= argダメージ
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐爆破する
        r = arg爆発半径 + max( (self.仕様.威力 - 2), 0 )
        if arg爆発半径 > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する ※音なし
            所有者 = main.DB.所有者ID.なし
            x = self._情報.X + 4
            y = self._情報.Y + 4
            爆発開始(所有者, x, y, r, False)
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self._情報.シールド <= 0 and not self._仕様.貫通弾区分:
        #│├┐（シールド切れの場合）
            #↓
            #●格納先から削除する
            self._仕様.格納先.remove(self._個体)
            #┴
        #│└┐（その他）
        #┴　┴