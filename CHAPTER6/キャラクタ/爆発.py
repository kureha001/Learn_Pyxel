#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクタ（爆発）　※自機・敵機で共用、所有者指定あり
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：仕様(種類ID)
#┠───┬─────────────────────────────────
#┃概　要│※必要な情報が無いので、この処理は不要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class種類:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│・オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_所有者     ,   #① 爆発の所有者
            引数_X座標,         #② 存在位置(X座標)
            引数_Y座標,         #③ 存在位置(Y座標)
            引数_最大半径   ):  #④ 爆発の範囲(半径)
        #┬
        #□仕様データ(共通)
        self.所有者     = 引数_所有者
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.最大半径   = 引数_最大半径
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_X座標  ,   #① 存在位置(X座標)
            引数_Y座標  ):  #② 存在位置(Y座標)
		#┬
        #□動的データ
        self.X      = 引数_X座標
        self.Y      = 引数_Y座標
        self.半径   = 1
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報（特殊効果）
#┠───┬─────────────────────────────────
#┃概　要│※特殊効果はないので、この処理は不要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class爆発:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトの参照用を用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体で用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新3_発射.py → 自機.py または 標的.py
    #┠────┼──────────────────────────────
    #┃解　　説│更新処理を通して、自機または標的がオブジェクト化する
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_生成先,        #① 生成先のオブジェクト
            引数_所有者,        #② 爆発の所有者
            引数_X座標,         #③ 存在位置(X座標)
            引数_Y座標,         #④ 存在位置(Y座標)
            引数_最大半径,      #⑤ 爆発の範囲(半径)
            引数_爆発音有無 ):  #⑥ 爆発音の有無
		#┬
        #□本体オブジェクト(参照用)
        self.GAME	    = 引数_生成先
            #┴
        #│
        #□データセット(情報)
        self.仕様 = class仕様(
                引数_所有者     = 引数_所有者   ,
                引数_X座標      = 引数_X座標    ,
                引数_Y座標      = 引数_Y座標    ,
                引数_最大半径   = 引数_最大半径 )
        #│
        #□データセット(情報:特殊効果)
        self.情報 = class情報(
                引数_X座標  = 引数_X座標    ,
                引数_Y座標  = 引数_Y座標    )
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.GAME.obj爆発.append(self)
        #│
        #○爆発音を鳴らす
        if 引数_爆発音有無:
            pyxel.play( 0, 2, resume = True ) 
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│座標移動はなく、爆発の大きさを変化させる
    #┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #○描画タイミングを確認する
        if pyxel.frame_count % 2 != 0: return
        #│＼（描画するターンではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○半径を大きくする
        self.情報.半径 += 1
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃２．更新処理(除外)
    #┠────┬──────────────────────────────
    #┃概　　要│最大限に爆発したのちに消滅する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新2_除外.py
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
    #┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 除外処理(self):
		#┬
        #○爆発状況を確認する
        if self.情報.半径 <= self.仕様.最大半径: return
        #│＼（爆発中の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○消滅する
        self.GAME.obj爆発.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．更新処理(発射)
    #┠────┬──────────────────────────────
    #┃概　　要│※弾を発射しないので、この処理は不要
    #┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
        pass

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．更新処理(衝突)
    #┠────┬──────────────────────────────
    #┃概　　要│※衝突しないので、この処理は不要
    #┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self):
        pass

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠────┬──────────────────────────────
    #┃概　　要│画面に描画する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py ･･･ 描画処理()
    #┠────┼──────────────────────────────
    #┃解　　説│描画サイズは移動処理で大きくする
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.circ (self.情報.X, self.情報.Y, self.情報.半径,  7)
        pyxel.circb(self.情報.X, self.情報.Y, self.情報.半径, 10)
        #┴
