#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┃キャラクター・モジュール（敵機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
from .弾	    import class弾
from 演出	    import class爆発
from キャラクタ	import class自機

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ.定数
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classターゲット:

    #┬
    #□機種Ａ
    #□機種Ｂ
    #□機種Ｃ
    定数_機種A  = 0
    定数_機種B  = 1
    定数_機種C  = 2

    #□機雷
    #□救急箱
    #□弾薬庫
    定数_機雷   = 3
    定数_救急箱 = 4
    定数_弾薬庫 = 5
    #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
        引数_生成先,	#① 生成先のオブジェクト
        引数_X座標,		#② Ｘ座標
        引数_Y座標,		#③ Ｙ座標
        引数_機種,      #② 機種
        引数_難易度     #③ 難易度
        ):

		#┬
        #□└┐パラメータ
            #□生成先のオブジェクト
            #□Ｘ座標
            #□Ｙ座標
            #□機種
            #□難易度
        self.GAME	    = 引数_生成先
        self.座標_X軸   = 引数_X座標
        self.座標_Y軸   = 引数_Y座標
        self.機種       = 引数_機種
        self.難易度     = 引数_難易度
            #┴
        #│
        #□└┐基本データ
            #□衝突範囲
            #□シールド
            #□経過時間
            #□衝突有無
        self.衝突範囲   = (0, 0, 7, 7)
        self.シールド   = self.難易度 - 1
        self.経過時間   = 0
        self.衝突有無   = False
        #┴　┴

		#┬
        #◇┐ターゲットを生成する
        if self.Fn判定_分類() == 1: self.GAME.obj敵機.append(self)
        if self.Fn判定_分類() == 2: self.GAME.objアイテム.append(self)
        #　├┐（敵機の場合）
            #↓
            #〇敵機を生成する
            #┴
        #　├┐（アイテムの場合）
            #↓
            #〇アイテムを生成する
            #┴
        #　└┐（その他）
        #┴　┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 更新処理(self):
		#┬
        #○経過時間をカウントする
        self.経過時間 += 1
        #│
        #◇┐ターゲットを更新する
        if self.Fn判定_分類() == 1: self.更新処理_敵機()
        if self.Fn判定_分類() == 2: self.更新処理_アイテム()
        #　├┐（敵機の場合）
            #↓
            #●敵機を更新する
            #┴
        #　├┐（アイテムの場合）
            #↓
            #●アイテムを更新する
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐後処理
        if (self.座標_Y軸 >= pyxel.height):
        #　├┐（画面から消え、ターゲットが存在する場合）
            #↓
            #○ターゲットを抹消する
            if self.Fn判定_分類() == 1: self.GAME.obj敵機.remove(self)
            if self.Fn判定_分類() == 2: self.GAME.objアイテム.remove(self)
            #　└┐（その他）
            #┴　┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────
    def 更新処理_アイテム(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 0.5
        #│
        #◇┐左右に移動する
        if self.経過時間 // 20 % 2 == 0:
        #　├┐（折返しタイミングの場合）
            #↓
            #○右に移動する
            self.座標_X軸 += 1.5
            #┴

        else:
        #　└┐（その他）
            #↓
            #○左に移動する
            self.座標_X軸 -= 1.5
        #┴　┴

	#────────────────────────────────────
    def 更新処理_敵機(self):
        #◇┐敵機を更新する
        if   self.機種 == self.定数_機種A: self.更新処理_敵機A()
        #　├┐（機種Aの場合）
            #↓
            #●敵機(機種A)を更新する
            #┴

        elif self.機種 == self.定数_機種B: self.更新処理_敵機B()
        #　├┐（機種Bの場合）
            #↓
            #●敵機(機種B)を更新する
            #┴

        elif self.機種 == self.定数_機種C: self.更新処理_敵機C()
        #　├┐（機種Cの場合）
            #↓
            #●敵機(機種C)を更新する
            #┴

        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────
    def 更新処理_敵機A(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 1.2
        #│
        #○発射タイミングを調べる
        if self.経過時間 % 50 != 0:
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼処理を中断する
            return
        #│
        #●自機の角度を求める
        発射角度 = self.Fn発射角度()
        #│
        #●弾を生成する
        class弾(
            self.GAME,
            self.座標_X軸, self.座標_Y軸,
            self.GAME.定数_所有者_敵機,
            発射角度, 2
            )
        #┴　┴
	#────────────────────────────────────
    def 更新処理_敵機B(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 1
        #│
        #◇┐左右に移動する
        if self.経過時間 // 30 % 2 == 0:
        #　├┐（左右入れ替えタイミングの場合）
            #↓
            #○右に移動する
            self.座標_X軸 += 1.2
            #┴

        else:
        #　└┐（その他）
            #↓
            #○左に移動する
            self.座標_X軸 -= 1.2
        #┴　┴
	#────────────────────────────────────
    def 更新処理_敵機C(self):
		#┬
        #○座標を変更する
        self.座標_Y軸 += 0.8
        #│
        #○発射タイミングを調べる
        if self.経過時間 % 40 != 0:
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼処理を中断する
            return
        #│
        #◎└┐４方向に発射する
        for tmpCnt in range(4):
            # ＼（すべて処理した場合）
            #　↓
            #　▼繰り返し処理を抜ける
            #│
            #●弾を生成する
            class弾(
                self.GAME,
                self.座標_X軸, self.座標_Y軸,
                self.GAME.定数_所有者_敵機,
                tmpCnt * 45 + 22, 2
                )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射角度(self):
		#┬
        #○自機を参照する
        tmpObj = self.GAME.obj自機
        #│
        #◇┐角度を求める
        if tmpObj is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            return 90

        else:
		#　└┐（その他）
            #↓
            #▼自機の方角を返す
            return pyxel.atan2(
                tmpObj.座標_Y軸 - self.座標_Y軸,
                tmpObj.座標_X軸 - self.座標_X軸
                )
        #┴
	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
        arg無条件破壊   = False,    #① True：無条件爆破
        arg爆発アニメ   = True      #② 爆発アニメーション有無
        ):
		#┬
        #◇┐無条件に爆破される状態にする
        if arg無条件破壊:
        #　├┐（機雷がさく裂した場合）
            #↓
            #○シールドをゼロにする
            self.シールド = 0
            #┴
        #│
        #◇┐ターゲットを衝突する
        if self.シールド > 0:
        #　├┐（シールドが残っている場合）
            #↓
            #○シールドを減らす
            #○ダメージ有無を『あり』にする
            #○被弾音を鳴らす
            self.シールド   -= 1
            self.衝突有無 = True
            pyxel.play(2, 1, resume=True)
            #┴

        else:
        #　└┐（その他）
            #↓
            #●アイテムを発動する
            #●ターゲットを抹消する
            #▼機雷炸裂有無を返す
            機雷爆破 = self.衝突処理_特殊効果発動()
            self.衝突処理_抹消(arg爆発アニメ)
            return 機雷爆破
        #┴　┴
	#────────────────────────────────────	
    def 衝突処理_特殊効果発動(self):
 		#┬
        #◇┐アイテムを機能する
        if self.機種 == self.定数_機雷:
        #　├┐（機雷の場合）
            #↓
            #〇すべての弾(敵機)を消滅する
            #▼機雷炸裂有無を『あり』で返す
            self.GAME.obj弾_敵機.clear
            return True

        elif self.機種 == self.定数_救急箱:
        #　├┐（救急箱の場合）
            #↓
            #〇シールドを満タンにする
            #〇すべての弾(敵機)を消滅する
            self.GAME.obj自機.シールド = pyxel.width
            self.GAME.obj弾_敵機.clear

        elif self.機種 == self.定数_弾薬庫:
        #　├┐（弾薬の場合）
            #↓
            #〇弾を満タンにする
            self.GAME.obj自機.弾数 = class自機.定数_積載量
        #　└┐（その他）
            #┴
        #│
        #▼機雷炸裂有無を『なし』で返す
        return False
	#────────────────────────────────────	
    def 衝突処理_抹消(self,
        arg爆発アニメ     #① 爆発アニメーション有無
        ):
 		#┬
        #◇┐爆発を追加する
        if arg爆発アニメ:
            #●爆発を生成する
            class爆発(
                self.GAME,
                self.座標_X軸 + 4, self.座標_Y軸 + 4, 8,
                self.GAME.定数_所有者_敵機
                )
            #│
            #○爆発音を鳴らす
            pyxel.play(2, 2, resume=True) 
        #　└┐（その他）
            #┴
        #│
        #○スコアを加算する
        self.GAME.得点 += self.難易度 * 10
        #│
        #○ターゲットを抹消する
        if self.Fn判定_分類() == 1: self.GAME.obj敵機.remove(self)
        if self.Fn判定_分類() == 2: self.GAME.objアイテム.remove(self)
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○ターゲットを描画する
        pyxel.blt(
            self.座標_X軸, self.座標_Y軸,
            0, self.機種 * 8 + 8, 0,
            8, 8,
            0
            )
        #┴

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn判定_分類(self):
    #【戻り値】1:機体／2:アイテム／0:エラー
        if (self.機種 == self.定数_機種A    ): return 1
        if (self.機種 == self.定数_機種B    ): return 1
        if (self.機種 == self.定数_機種C    ): return 1
        if (self.機種 == self.定数_機雷     ): return 2
        if (self.機種 == self.定数_救急箱   ): return 2
        if (self.機種 == self.定数_弾薬庫   ): return 2
        return 0

	#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def Fn判定_対応法(self):
    #【戻り値】1:破壊型／2:回収型／0:エラー
        if (self.機種 == self.定数_機種A    ): return 1
        if (self.機種 == self.定数_機種B    ): return 1
        if (self.機種 == self.定数_機種C    ): return 1
        if (self.機種 == self.定数_機雷     ): return 1
        if (self.機種 == self.定数_救急箱   ): return 2
        if (self.機種 == self.定数_弾薬庫   ): return 2
        return 0
