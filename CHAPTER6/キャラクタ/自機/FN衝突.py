#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：衝突機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
from 処理   import *
from ..DB   import 効果ID
from ..爆発 import 爆発開始

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    衝突範囲    = (1, 1, 6, 6)
    破壊力      = 3

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体): #① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス()
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self           ,
            argダメージ = 0 ,   #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8 ):  #② 爆発半径 ※0：爆発なし
		#┬
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.個体.情報.シールド = 0
            ダメージ倍率 = 1
            #┴
        else:
        #　└┐（その他）
            #↓
            #●ダメージ倍率を求める
            発動状況 = self.個体.FN特殊.情報.発動
            キー   = 効果ID.防御UP
            ダメージ倍率 = (発動状況[キー][1]) if キー in 発動状況 else (1)
            #│
            #○ダメージを与える
            シールド消費 = argダメージ * ダメージ倍率
            self.個体.情報.シールド -= シールド消費
            #┴
        #│
        #◇┐爆破する ※爆発音は相手オブジェクトで鳴らす
        x = self.個体.情報.X
        y = self.個体.情報.Y
        r = max( int(arg爆発半径 * ダメージ倍率) , 0 )
        所有者 = 所有者ID.自機
        if r > 0:
        #　├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する ※音あり
            爆発開始(所有者, x + 4, y + 4, 0, 0, r, True)
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐自機を破壊する
        r = int(arg爆発半径 * 1.8)
        if self.個体.情報.シールド <= 0:
        #　├┐（シールドが切れた場合）
            #↓
            #●追加の爆発を生成する
            爆発開始(所有者, x + 10, y + 10, 0, 0, r, True)
            爆発開始(所有者, x -  2, y -  2, 0, 0, r, True)
        #┴　┴