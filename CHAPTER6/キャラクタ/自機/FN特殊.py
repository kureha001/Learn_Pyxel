#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：特殊効果
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    ..アイテム  import アイテムID

class 効果ID():

    追加速度     = 1
    連射         = 2
    防御UP       = 3
    貫通弾       = 4
    発射数       = 5
    発射方向     = 6

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    def __init__(self):

        #・キー：効果ＩＤ
        #・値　：リスト（持続時間，値）
        #　　　　・持続時間：秒単位（ただしゼロ値は永続となる）
        #　　　　・値　　　：効果ＩＤによる
        self.発動 = {}

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 特殊クラス():
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト
		#┬
        #〇リファレンスを用意する
        self.基底   = 引数_生成先
        #│
        #〇└┐データセットを用意する
            #≫仕様
            #≫情報
        self.仕様   = None
        self.情報   = 情報クラス()
        self.ID     = 効果ID()
            #┴
        #│
        #〇生成先のインスタンスに実体化する
        self.基底.FN特殊  = self
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 時間経過(self):
		#┬
        #○プレイ時間を確認する
        if self.基底.GAME.情報.プレイ時間 % 30 != 0: return
        #│＼（発射タイミングではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #〇無期限,まだ時間があるものを残す
        self.情報.発動 = {キー: 値 for キー, 値 in self.情報.発動.items() if 値[0] != 1}
        #│
        #◎無期限以外のものに対し、残り時間を減らす
        for 対象値, 値 in self.情報.発動.items():
            if any(対象値 != 0 for 対象値 in 値):
                self.情報.発動[対象値] = [対象値 - 1 for 対象値 in 値]
        #┴　┴　┴

    #┌───────────────────────────────────
    #│アイテム取得
    #└───────────────────────────────────
    def アイテム取得(self, 引数_アイテム ): #① アイテムのオブジェクト
		#┬
        #○アイテム種類IDと持続時間を退避する
        種類ID      = 引数_アイテム.仕様.種類ID
        持続時間    = 引数_アイテム.仕様.持続時間
            #┴
        #│
        #◇┐アイテム区分を照会し効果を発動する
        if 持続時間 < 0:
        #　├┐（退避した持続時間が『マイナス』の場合）
            #↓
            #●補給系の効果を発動する
            self.Fn補給(種類ID)
            #┴
        else:
        #　└┐（その他）
            #●持続系の効果を発動する
            self.Fn発動(種類ID, 持続時間)
            #┴

	#────────────────────────────────────	
    def Fn補給(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #◇┐アイテムIDを照会し補給する
        if 引数_種類ID == アイテムID.弾薬回復:
        #　├┐（アイテムIDが『弾薬』の場合）
            #↓
            #○弾数を最大まで回復する
            self.基底.FN発射.情報.弾数 = self.基底.FN発射.仕様.積載量
            #┴
        elif 引数_種類ID == アイテムID.シールド回復:
        #　├┐（アイテムIDが『シールド』の場合）
            #↓
            #○シールドを最大まで回復する
            self.基底.情報.シールド = pyxel.width
            #┴
        #　└┐（その他）
        #┴　┴
               
	#────────────────────────────────────	
    def Fn発動(self         ,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #● 『速度』     に関する効果を発動する
        #● 『連射』     に関する効果を発動する
        #● 『防御率』   に関する効果を発動する
        #● 『発射数』   に関する効果を発動する
        #● 『発射方向』 に関する効果を発動する
        self.Fn発動_速度    ( 引数_種類ID , 引数_持続時間 )
        self.Fn発動_連射    ( 引数_種類ID , 引数_持続時間 )
        self.Fn発動_防御率  ( 引数_種類ID , 引数_持続時間 )
        self.Fn発動_発射数  ( 引数_種類ID , 引数_持続時間 )
        self.Fn発動_発射方向( 引数_種類ID , 引数_持続時間 )
        #┴

	#────────────────────────────────────	
    def Fn発動済を削除(self, 引数_効果ID ): #① 効果を識別するID
		#┬
        #○アイテムIDを確認する
        if 引数_効果ID not in self.情報.発動: return None
        #│＼（未発動の場合）
        #│ ↓
        #│ ▼対象外を返す
        #│
        #○ 発動済の値を退避する
        #○ 発動済を削除する
        #▼ 退避した値を返す
        値 = self.情報.発動[引数_効果ID][1]
        del self.情報.発動[引数_効果ID]
        return 値

	#────────────────────────────────────	
    def Fn発動_速度(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #○アイテムIDを確認する
        if 引数_種類ID != アイテムID.速度UP: return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類(連射)の発動済を削除する
        #○発射数を『元の値＋0.5』で用意する ※最大３まで
        #●効果を発動する ※発動値：ダミー値
        値 = self.Fn発動済を削除(効果ID.追加速度)
        値 = 0.5 if 値 is not None else max(値 + 0.5 , 3)
        self.情報.発動[効果ID.追加速度] = (引数_持続時間, 値)
        #┴

	#────────────────────────────────────	
    def Fn発動_連射(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #○アイテムIDを確認する
        if 引数_種類ID != アイテムID.発射_連射: return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類(連射)の発動済を削除する
        #●効果を発動する ※発動値：ダミー値
        値 = self.Fn発動済を削除(効果ID.連射)
        self.情報.発動[効果ID.連射] = (引数_持続時間, True)
        #┴

	#────────────────────────────────────	
    def Fn発動_防御率(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #○アイテムIDを確認する
        if 引数_種類ID < アイテムID.ダメージ無し: return
        if 引数_種類ID > アイテムID.ダメージ吸収: return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類(防御UP)の発動済を削除する
        値 = self.Fn発動済を削除(効果ID.防御UP)
        #│
        #◇┐アイテムIDを照会し防御率を用意する
        防御率 = 1
        if 引数_種類ID == アイテムID.ダメージ無し:
        #　├┐（シールドが切れた場合）
            #↓
            #○防御率を『ノーダメージ』で用意する
            防御率 = 0
            #┴
        elif 引数_種類ID == アイテムID.ダメージ半分:
        #　├┐（シールドが切れた場合）
            #↓
            #○防御率を『ダメージ半減』で用意する
            防御率 = 0.5
            #┴
        elif 引数_種類ID == アイテムID.ダメージ吸収: 
        #　├┐（シールドが切れた場合）
            #○防御率を『自分のシールドに転嫁』で用意する
            防御率 = -1
            #┴
        #　└┐（その他）
            #┴
        #│
        #●効果を発動する ※発動値：防御率
        self.情報.発動[効果ID.防御UP] = (引数_持続時間, 防御率)
        #┴　┴

	#────────────────────────────────────	
    def Fn発動_貫通弾(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間

		#┬
        #○アイテムIDを確認する
        if 引数_種類ID != アイテムID.貫通弾:return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類(発射数)の発動済を削除する
        #●効果を発動する ※発動値：ダミー値
        値 = self.Fn発動済を削除(効果ID.貫通弾)
        self.情報.発動[効果ID.貫通弾] = (引数_持続時間, True)
        #┴

	#────────────────────────────────────	
    def Fn発動_発射数(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #○アイテムIDを確認する
        if 引数_種類ID != アイテムID.発射_弾数UP: return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類(発射数)の発動済を削除する
        #○発射数を『元の値＋1』で用意する ※最大４まで
        #●効果を発動する ※発動値：発射する弾数
        発射数 = self.Fn発動済を削除(効果ID.発射数)
        発射数 = 2 if 発射数 is not None else max((発射数 + 1),4)
        self.情報.発動[効果ID.発射数] = (引数_持続時間, 発射数)
        #┴

	#────────────────────────────────────	
    def Fn発動_発射方向(self,
             引数_種類ID    ,   #① アイテムを識別するID
             引数_持続時間  ):  #② 効果を持続する時間
		#┬
        #○アイテムIDを確認する
        if 引数_種類ID < アイテムID.発射_上下方向   :return
        if 引数_種類ID > アイテムID.発射_8方向      :return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●同類の発動済を削除する
        値 = self.Fn発動済を削除(効果ID.発射方向)
        #│
		#◎└┐アイテムIDを照会し発動する
        発射数 = 0
        for tmpID in range(アイテムID.発射_上下方向,アイテムID.発射_8方向):
			#│＼（すべての照会を終えた場合）
            #│ ↓
            #│ ▼照会を抜ける
            #│
            #○発射数を1つ増やして用意する 
            発射数 += 1
            #│
            #◇┐照会中のアイテムで発動を試みる
            if 引数_種類ID == tmpID:
            #　├┐（照会中のアイテムIDと一致した場合）
                #↓
                #●効果を発動する ※発動値：発射する弾数
                #▼照会を中断する
                self.情報.発動[効果ID.発射方向] = (引数_持続時間 , 発射数)
                break
            #　└┐（その他）
        #┴　┴　┴
