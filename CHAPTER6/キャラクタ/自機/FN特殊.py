#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：特殊効果
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    ..アイテム  import アイテムID

class 効果ID():

    追加速度     = 1
    連射         = 2
    防御UP       = 3
    貫通弾       = 4
    発射数       = 5
    発射方向     = 6

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    def __init__(self):

        self.発動 = {}

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 特殊クラス():
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_生成先 ): #① 生成先のオブジェクト
		#┬
        #〇リファレンスを用意する
        self.基底   = 引数_生成先
        #│
        #〇└┐データセットを用意する
            #≫仕様
            #≫情報
        self.仕様   = None
        self.情報   = 情報クラス()
        self.ID     = 効果ID()
            #┴
        #│
        #〇生成先のインスタンスに実体化する
        self.基底.FN特殊  = self
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 時間経過(self, 引数_経過時間):

		#┬
        if 引数_経過時間 % 30 != 0: return
        #│
        #〇無期限,まだ時間があるものを残す
        self.情報.発動 = {キー: 値 for キー, 値 in self.情報.発動.items() if 値[0] != 1}
        #│
        #◎無期限以外のものに対し、残り時間を減らす
        for 対象値, 値 in self.情報.発動.items():
            if any(対象値 != 0 for 対象値 in 値):
                self.情報.発動[対象値] = [対象値 - 1 for 対象値 in 値]
        #┴　┴　┴

    #┌───────────────────────────────────
    #│アイテム取得
    #└───────────────────────────────────
    def アイテム取得(self, 引数_アイテム ):

        種類ID      = 引数_アイテム.仕様.種類ID
        持続時間    = 引数_アイテム.仕様.持続時間

        if 種類ID == アイテムID.弾薬回復:
            self.基底.FN発射.情報.弾数 = self.基底.FN発射.仕様.積載量

        elif 種類ID == アイテムID.シールド回復:
            self.基底.情報.シールド = pyxel.width

        else:
            self.Fn登録_速度    ( 種類ID , 持続時間 )
            self.Fn登録_連射    ( 種類ID , 持続時間 )
            self.Fn登録_防御率  ( 種類ID , 持続時間 )
            self.Fn登録_発射数  ( 種類ID , 持続時間 )
            self.Fn登録_発射方向( 種類ID , 持続時間 )

	#────────────────────────────────────	
    def Fn登録_速度(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID != アイテムID.速度UP: return

        値 = self.Fn削除と値取得(効果ID.追加速度)
        値 = 0.5 if 値 is not None else max(値 + 0.5 , 3)
        self.情報.発動[効果ID.追加速度] = (引数_持続時間, 値)
        #┴
	#────────────────────────────────────	
    def Fn登録_連射(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID != アイテムID.発射_連射: return

        値 = self.Fn削除と値取得(効果ID.連射)
        self.情報.発動[効果ID.連射] = (引数_持続時間, True)
        #┴
	#────────────────────────────────────	
    def Fn登録_防御率(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID < アイテムID.ダメージ無し: return
        if 引数_ID > アイテムID.ダメージ吸収: return

        値 = self.Fn削除と値取得(効果ID.防御UP)

        if 引数_ID == アイテムID.ダメージ無し:
        #　├┐（シールドが切れた場合）
            #↓
            self.情報.発動[効果ID.防御UP    ] = (引数_持続時間, 0   )

        elif 引数_ID == アイテムID.ダメージ半分:
        #　├┐（シールドが切れた場合）
            #↓
            self.Fn削除と値取得(self.ID.防御UP)
            self.情報.発動[効果ID.防御UP    ] = (引数_持続時間, 0.5 )

        elif 引数_ID == アイテムID.ダメージ吸収: 
        #　├┐（シールドが切れた場合）
            #↓
            self.情報.発動[効果ID.防御UP    ] = (引数_持続時間, -1  )
	#────────────────────────────────────	
    def Fn登録_貫通弾(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID != アイテムID.貫通弾:return

        値 = self.Fn削除と値取得(効果ID.貫通弾)
        self.情報.発動[効果ID.貫通弾] = (引数_持続時間, True)
        #┴
	#────────────────────────────────────	
    def Fn登録_発射数(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID != アイテムID.発射_弾数UP: return

        値 = self.Fn削除と値取得(効果ID.発射数)
        値 = 2 if 値 is not None else max((値 + 1),4)
        self.情報.発動[効果ID.発射数] = (引数_持続時間, 値 )
        #┴
	#────────────────────────────────────	
    def Fn登録_発射方向(self,
            引数_ID,
            引数_持続時間 ):

        if 引数_ID < アイテムID.発射_上下方向:return
        if 引数_ID > アイテムID.発射_8方向:return

        値 = self.Fn削除と値取得(効果ID.発射方向)

        for i in range(アイテムID.発射_上下方向,アイテムID.発射_8方向):
            #◇┐発射方向を変える
            if 引数_ID == i:
            #　├┐（上下方向の場合）
                #↓
                self.情報.発動[効果ID.発射方向] = (引数_持続時間 , i)
        #┴　┴　┴

	#────────────────────────────────────	
    def Fn削除と値取得(self,
            引数_ID ):

        if 引数_ID in self.情報.発動:
        #　├┐（登録済みの場合）
            #↓
            値 = self.情報.発動[引数_ID][1]
            del self.情報.発動[引数_ID]
            return 値
        else:
            return None
        #┴　┴

