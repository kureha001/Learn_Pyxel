#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：特殊効果
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  処理.DB
from    ..DB    import アイテムID, 効果ID, アイテムDB

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    #・キー：効果ＩＤ
    #・値　：リスト（持続時間，値）
    #　　　　・持続時間：秒単位（ただしゼロ値は永続となる）
    #　　　　・値　　　：効果ＩＤによる
    発動 = {}

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 特殊クラス():
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体 ): #① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = None
        self.情報   = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 時間経過(self):
		#┬
        #○プレイ時間を確認する
        if 処理.DB.プレイ時間 % 30 != 0: return
        #│＼（発射タイミングではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎無期限以外のものに対し、残り時間を減らす
        tmp辞書 = {}
        for key, (残り時間, 値) in self.情報.発動.items():
            if 残り時間 == 1: continue
            if 残り時間 >  1: 残り時間 -= 1
            tmp辞書[key] = (残り時間, 値)

        self.情報.発動 = tmp辞書

    #┌───────────────────────────────────
    #│アイテム取得
    #└───────────────────────────────────
    def アイテム取得(self, 引数_アイテム ): #① アイテムのオブジェクト
		#┬
        #○アイテム種類IDと持続時間を退避する
        アイテムID  = 引数_アイテム.仕様.種類ID
        効果ID    = アイテムDB[ アイテムID ][0]
        #│
        #◇┐アイテム区分を照会し効果を発動する
        if 効果ID == 効果ID.補給:
        #　├┐（退避した持続時間が『マイナス』の場合）
            #↓
            #●補給系の効果を発動する
            self.Fn補給( アイテムID )
            #┴
        else:
        #　└┐（その他）
            #● 効果を発動する
            self.Fn効果発動( アイテムID )
            #┴
	#────────────────────────────────────	
    def Fn補給(self, 引数_アイテムID): #① アイテムを識別するID
		#┬
        #◇┐アイテムIDを照会し補給する
        if 引数_アイテムID == アイテムID.弾薬:
        #　├┐（アイテムIDが『弾薬』の場合）
            #↓
            #○弾数を最大まで回復する
            self.個体.FN発射.情報.弾数 = self.個体.FN発射.仕様.積載量
            #┴
        elif 引数_アイテムID == アイテムID.シールド:
        #　├┐（アイテムIDが『シールド』の場合）
            #↓
            #○シールドを最大まで回復する
            self.個体.情報.シールド = pyxel.width
            #┴
        #　└┐（その他）
        #┴　┴
	#────────────────────────────────────	
    def Fn効果発動(self, 引数_アイテムID): #① アイテムを識別するID
		#┬
        #○DBより各種パラメータを取得する
        効果ID      = アイテムDB[ 引数_アイテムID ][0]
        持続時間    = アイテムDB[ 引数_アイテムID ][2][0]
        登録内容    = アイテムDB[ 引数_アイテムID ][2][1]
        #│
        #◇┐既存値(登録済みの値)を求める
        if 効果ID in self.情報.発動:
        #　├┐（登録済みの場合）
            #↓
            #○登録情報から、同じ効果のエントリ値を取得する
            #○同じ効果のエントリを、登録情報から削除する
            既存値 = self.情報.発動[ 効果ID ][1]
            del self.情報.発動[ 効果ID ]
            #┴
        else:
        #　└┐（その他）
            #↓
            #○既存値なし(ゼロ値)でセットする
            既存値 = 0
            #┴
        #│
        #◇┐登録値を用意する
        if 登録内容 is list:
        #　├┐（登録内容パラメータが『加算型(リスト)』の場合）
            #↓
            #○上限を超えない範囲で登録値を用意する
            追加値 = 登録内容[0]
            上限値 = 登録内容[1]
            登録値 = (既存値) if 既存値 == 0 else (min((既存値 + 追加値),上限値))
        else:
            #○登録内容をそのまま登録値で用意する
            登録値 = 登録内容
        #│
        #●効果を発動する
        self.情報.発動[ 効果ID ] = ( 持続時間 , 登録値 )
        #┴