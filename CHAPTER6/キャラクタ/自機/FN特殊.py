#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：特殊効果
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  処理._情報
from    .DB    import *

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    def __init__(self):

        #・キー：効果ＩＤ
        #・値　：リスト（持続時間，値）
        #　　　　・持続時間：秒単位（ただしゼロ値は永続となる）
        #　　　　・値　　　：効果ＩＤによる
        self.発動 = {}

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 特殊クラス():
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体 ): #① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = None
        self.情報   = 情報クラス()
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 時間経過(self):
		#┬
        #○プレイ時間を確認する
        if 処理._情報.プレイ時間 % 30 != 0: return
        #│＼（発射タイミングではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◎無期限以外のものに対し、残り時間を減らす
        tmp辞書 = {}
        for key, (残り時間, 値) in self.情報.発動.items():
            if 残り時間 == 1: continue
            if 残り時間 >  1: 残り時間 -= 1
            tmp辞書[key] = (残り時間, 値)

        self.情報.発動 = tmp辞書

    #┌───────────────────────────────────
    #│アイテム取得
    #└───────────────────────────────────
    def アイテム取得(self, 引数_アイテム ): #① アイテムのオブジェクト
		#┬
        #○アイテム種類IDと持続時間を退避する
        種類ID      = 引数_アイテム.仕様.種類ID
        持続時間    = DB.アイテム[ 種類ID ][1][0]
            #┴
        #│
        #◇┐アイテム区分を照会し効果を発動する
        if 持続時間 < 0:
        #　├┐（退避した持続時間が『マイナス』の場合）
            #↓
            #●補給系の効果を発動する
            self.Fn補給( 種類ID )
            #┴
        else:
        #　└┐（その他）
            #● 効果を発動する
            self.Fn発動_速度    ( 種類ID )
            self.Fn発動_連射    ( 種類ID )
            self.Fn発動_貫通弾  ( 種類ID )
            self.Fn発動_発射数  ( 種類ID )
            self.Fn発動_発射方向( 種類ID )
            self.Fn発動_防御率  ( 種類ID )
            #┴

	#────────────────────────────────────	
    def Fn補給(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #◇┐アイテムIDを照会し補給する
        if 引数_種類ID == アイテムID.弾薬回復:
        #　├┐（アイテムIDが『弾薬』の場合）
            #↓
            #○弾数を最大まで回復する
            self.個体.FN発射.情報.弾数 = self.個体.FN発射.仕様.積載量
            #┴
        elif 引数_種類ID == アイテムID.シールド回復:
        #　├┐（アイテムIDが『シールド』の場合）
            #↓
            #○シールドを最大まで回復する
            self.個体.情報.シールド = pyxel.width
            #┴
        #　└┐（その他）
        #┴　┴
               
	#────────────────────────────────────	
    def Fn発動_速度(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_加算型(
                引数_種類ID         ,
                アイテムID.速度UP   ,
                効果ID.追加速度     )
        #┴
	#────────────────────────────────────	
    def Fn発動_連射(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_単純型(
                引数_種類ID         ,
                アイテムID.発射_連射,
                アイテムID.発射_連射,
                効果ID.連射         )
        #┴
	#────────────────────────────────────	
    def Fn発動_貫通弾(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_単純型(
                引数_種類ID             ,
                アイテムID.発射_貫通弾  ,
                アイテムID.発射_貫通弾  ,
                効果ID.貫通弾           )
        #┴
	#────────────────────────────────────	
    def Fn発動_発射数(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_加算型(
                引数_種類ID             ,
                アイテムID.発射_弾数UP  ,
                効果ID.発射数           )
        #┴
	#────────────────────────────────────	
    def Fn発動_発射方向(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_単純型(
                引数_種類ID             ,
                アイテムID.発射_上下方向,
                アイテムID.発射_8方向   ,
                効果ID.発射方向         )
        #┴
	#────────────────────────────────────	
    def Fn発動_防御率(self, 引数_種類ID): #① アイテムを識別するID
		#┬
        #●防御力UOを発動する
        self.Fn登録_単純型(
                引数_種類ID             ,
                アイテムID.ダメージ半減 ,
                アイテムID.ダメージ吸収 ,
                効果ID.防御UP           )
        #┴

	#────────────────────────────────────	
    def Fn登録_単純型(self,
             引数_種類ID  ,     #① アイテムを識別するID
             引数_対象下限    , #② 対象とする種類IDの下限
             引数_対象上限    , #③ 対象とする種類IDの上限
             引数_効果ID  ):    #④ 効果を識別するID
		#┬
        #○アイテムIDを確認する
        種類ID      = 引数_種類ID
        if ( 種類ID < 引数_対象下限 ) or ( 種類ID > 引数_対象上限 ): return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○基本情報を用意する
        持続時間    = DB.アイテム[ 種類ID ][1][0]
        固有値      = DB.アイテム[ 種類ID ][1][1]
        #│
        #●発動済の同類効果を削除する
        self.Fn発動済を削除( 引数_効果ID )
        #│
        #●効果を発動する
        self.情報.発動[ 引数_効果ID ] = ( 持続時間 , 固有値 )
        #┴
	#────────────────────────────────────	
    def Fn登録_加算型(self,
             引数_種類ID  ,     #① アイテムを識別するID
             引数_対象ID  ,     #② 対象とする種類ID
             引数_効果ID  ):    #③ 効果を識別するID
		#┬
        #│
        #○アイテムIDを確認する
        種類ID      = 引数_種類ID
        if 種類ID != 引数_対象ID: return
        #│＼（アイテムIDが対象外の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○基本情報を用意する
        持続時間    = DB.アイテム[ 種類ID ][1][0]
        追加値      = DB.アイテム[ 種類ID ][1][1][0]
        上限値      = DB.アイテム[ 種類ID ][1][1][1]
        #│
        #●同類(連射)の発動済を削除する
        既存値 = self.Fn発動済を削除( 引数_効果ID )
        #│
        #○登録値を求める
        登録値 = (既存値) if 登録値 == 0 else (min((既存値 + 追加値),上限値))
        #│
        #●効果を発動する
        self.情報.発動[ 引数_効果ID ] = ( 持続時間, 登録値 )
        #┴

	#────────────────────────────────────	
    def Fn発動済を削除(self, 引数_効果ID ): #① 効果を識別するID
		#┬
        #○アイテムIDを確認する
        if 引数_効果ID not in self.情報.発動: return 0
        #│＼（未発動の場合）
        #│ ↓
        #│ ▼対象外を返す
        #│
        #○ 発動済の値を退避する
        #○ 発動済を削除する
        #▼ 退避した値を返す
        既存値 = self.情報.発動[ 引数_効果ID ][1]
        del self.情報.発動[ 引数_効果ID ]
        return 既存値