#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：発射機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    特殊効果    import 効果ID
from    ..弾        import 弾発射
from    共通	    import class入力操作    as 入力 

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発射クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体 ):	#① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = None
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #○基本情報を用意する
        共通仕様 = main.DB.obj自機共通.仕様
        共通情報 = main.DB.obj自機共通.情報
        #│
        #◇┐弾を補充する
        if pyxel.frame_count % 共通仕様.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            共通情報.弾数 = min( 共通情報.弾数 + 1,共通仕様.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn可否確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●発射数を求める
        発動中 = main.DB.obj特殊効果.情報.発動中
        キー = 効果ID.発射数
        発射数 = (発動中[キー][1] + 1) if キー in 発動中 else (1)
        #│
        #◇┐発射する
        if 発射数 == 1:
        #　├┐（１発の場合）
            #↓
            #●１つ発射する
            self.Fn実行(+0,-3)

        elif 発射数 == 2:
        #　├┐（２発の場合）
            #↓
            #●２つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)

        elif 発射数 == 3:
        #　├┐（３発の場合）
            #↓
            #●３つ発射する
            self.Fn実行(+0,-3)
            self.Fn実行(+5,-0)
            self.Fn実行(-5,-0)

        elif 発射数 >= 4:
        #　├┐（４発の場合）
            #↓
            #●４つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)
            self.Fn実行(+8,-0)
            self.Fn実行(-8,-0)

        #　└┐（その他）
            #┴
        #│
        #○弾を減らす
        共通情報.弾数 -= (1) if main.DB.人数 == 0 else (0.85)
        #┴
	#────────────────────────────────────	
    def Fn可否確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.IDボタン_キー[self.個体.仕様.番号],
            入力.IDボタン_パッド[self.個体.仕様.番号]
            )
        #│
        #●発射方法を求める
        発射法 = (1) if 効果ID.連射 in main.DB.obj特殊効果.情報.発動中 else (-1)
        #│
        if 結果[1][3] != 発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        共通情報 = main.DB.obj自機共通.情報
        共通情報.発射制限 = max(共通情報.発射制限 - 1, 0)
        if  発射法 == 1 and 共通情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if 共通情報.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn実行(self,
            argオフセットX,
            argオフセットY):
		#┬
        共通仕様 = main.DB.obj自機共通.仕様
        共通情報 = main.DB.obj自機共通.情報
        #│
        #○弾を生成する
        x = self.個体.情報.X + argオフセットX
        y = self.個体.情報.Y + argオフセットY
        徹甲弾区分 = 効果ID.貫通弾 in main.DB.obj特殊効果.情報.発動中
        威力 = 共通仕様.威力_弾
        弾発射( main.DB.所有者ID.自機, x, y, -90, 5, 徹甲弾区分, 威力 )
        #│
        #○発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        共通情報.発射制限 = 共通仕様.発射間隔
        #┴