#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　　│class弾        ： 発射処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	    import class入力操作    as 入力 
from    処理        import class所有者ID    as 所有者ID 
from    ..弾        import class弾

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
    #┬
    #□仕様データ
    発射間隔   = 5
    補充間隔   = 12
    積載量     = 25
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self ):
		#┬
        #□動的データ
        self.発射制限   = 0
        self.弾数       = 10
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN発射:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 参照用の本体オブジェクトを用意
    #┃　　│② 参照用の生成先オブジェクトを用意
    #┃　　│③ 必要なデータセットをオブジェクトで用意
    #┃　　│④ 生成先のインスタンスにオブジェクト化
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py → 自機.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_GAME   ):	#② 本体のオブジェクト
		#┬
        #□本体オブジェクト(参照用)
        #□自機オブジェクト(参照用)
        self.GAME = 引数_GAME
        self.自機 = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様()
        #│
        #□データセット(情報)
        self.情報 = class情報()
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.自機.FN発射処理  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．更新処理(発射)
    #┠──┬────────────────────────────────
    #┃概要│弾を発射する
    #┃　　│① 発射条件を満たすかを確認
    #┃    │② 残量に応じて(一度の)発射量を調整し発射
    #┃    │③ 残量を減らす
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py → 自機.py
    #┠──┼────────────────────────────────
    #┃解説│・発射指示はキーボードかゲームパッドを用いる
    #┃    │・特殊効果により、連射することが出来る
    #┃    │・一度の発射量は特殊効果と残量で決める
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self):
		#┬
        #◇┐弾を補充する
        if pyxel.frame_count % self.仕様.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.情報.弾数 = min( self.情報.弾数 + 1,self.仕様.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐発射数を求める
        if self.自機.FN特殊効果.ID.発射数 in self.自機.FN特殊効果.情報:
        #　├┐（特殊効果が登録されている場合）
            #↓
            発射数 = self.自機.特殊効果.情報[特殊効果.ID.発射数]
        else:
        #　└┐（その他）
            #↓
            発射数 = 1
            #┴
        #│
        #◎└┐発射数を絞る(1/16,1/8,1/4.1/2毎に減らす)
        for i in range(4,1,-1):
            #◇┐弾の残量に合わせて減らす
            if self.情報.弾数 < int(self.仕様.積載量/(2**i) + 3):
            #　├┐（特殊効果がある場合）
                #↓
                #○発射数を1つ減らす
                発射数 = max( 発射数 - 1 , 1 )
            #┴
        #│
        #◇┐発射する
        if 発射数 == 1:
        #　├┐（１発の場合）
            #↓
            #●１つ発射する
            self.Fn実行(+0,-3)

        elif 発射数 == 2:
        #　├┐（２発の場合）
            #↓
            #●２つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)

        elif 発射数 == 3:
        #　├┐（３発の場合）
            #↓
            #●３つ発射する
            self.Fn実行(+0,-3)
            self.Fn実行(+5,-0)
            self.Fn実行(-5,-0)

        elif 発射数 >= 4:
        #　├┐（４発の場合）
            #↓
            #●４つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)
            self.Fn実行(+8,-0)
            self.Fn実行(-8,-0)

        #　└┐（その他）
            #┴
        #│
        #○弾を減らす
        self.情報.弾数 -= 1
        #┴
	#────────────────────────────────────	
    def Fn確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.IDボタン_キー[0],
            入力.IDボタン_パッド[0]
            )
        
        #●特殊効果が登録状況をを調べる
        発射法 = (1) if self.自機.FN特殊効果.ID.連射 in self.自機.FN特殊効果.情報 else (-1)

        if 結果[1][3] != 発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.情報.発射制限 = max(self.情報.発射制限 - 1, 0)
        if  発射法 == 1 and self.情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.情報.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn実行(self,
            argオフセットX,
            argオフセットY):
		#┬
        #○弾を生成する
        class弾(
                self.GAME,
                所有者ID.自機,
                self.自機.情報.X + argオフセットX,
                self.自機.情報.Y + argオフセットY,
                -90, 5 )
        #│
        #○弾発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        self.情報.発射制限 = self.仕様.発射間隔
        #┴