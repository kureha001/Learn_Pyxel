#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：発射
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	import class入力操作    as 入力 
from    処理    import 所有者ID
from    ..弾    import 弾発射
from    .FN特殊 import 効果ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    発射間隔   = 5
    補充間隔   = 12
    積載量     = 25

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    def __init__(self ):

        self.発射制限   = 0
        self.弾数       = 10

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発射クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_ゲーム ):	#② ゲームのオブジェクト
		#┬
        #〇└┐リファレンスを用意する
            #〇機能の生成先を用意する
            #〇弾の生成先を用意する
        self.基底           = 引数_生成先
            #┴
        #│
        #〇└┐データセットを用意する
            #≫仕様
            #≫情報
        self.仕様           = 仕様クラス()
        self.情報           = 情報クラス()
            #┴
        #│
        #〇生成先のインスタンスに実体化する
        self.基底.FN発射    = self
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #◇┐弾を補充する
        if pyxel.frame_count % self.仕様.補充間隔 == 0:
        #　├┐（補充タイミングの場合）
            #↓
            #○積載量を超えない範囲で補充する
            self.情報.弾数 = min( self.情報.弾数 + 1,self.仕様.積載量 )
        #　└┐（その他）
            #┴
        #│
        #●発射可否を確認する
        if self.Fn確認(): return
        #│＼（『発射不可』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐発射数を求める
        発動リスト = self.基底.FN特殊.情報.発動
        if 効果ID.発射数 in 発動リスト:
        #　├┐（特殊効果が登録されている場合）
            #↓
            発射数 = 発動リスト[効果ID.発射数]
        else:
        #　└┐（その他）
            #↓
            発射数 = 1
            #┴
        #│
        #◎└┐発射数を絞る(1/16,1/8,1/4.1/2毎に減らす)
        for i in range(4,1,-1):
            #◇┐弾の残量に合わせて減らす
            if self.情報.弾数 < int(self.仕様.積載量/(2**i) + 3):
            #　├┐（特殊効果がある場合）
                #↓
                #○発射数を1つ減らす
                発射数 = max( 発射数 - 1 , 1 )
            #┴
        #│
        #◇┐発射する
        if 発射数 == 1:
        #　├┐（１発の場合）
            #↓
            #●１つ発射する
            self.Fn実行(+0,-3)

        elif 発射数 == 2:
        #　├┐（２発の場合）
            #↓
            #●２つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)

        elif 発射数 == 3:
        #　├┐（３発の場合）
            #↓
            #●３つ発射する
            self.Fn実行(+0,-3)
            self.Fn実行(+5,-0)
            self.Fn実行(-5,-0)

        elif 発射数 >= 4:
        #　├┐（４発の場合）
            #↓
            #●４つ発射する
            self.Fn実行(+3,-3)
            self.Fn実行(-3,-3)
            self.Fn実行(+8,-0)
            self.Fn実行(-8,-0)

        #　└┐（その他）
            #┴
        #│
        #○弾を減らす
        self.情報.弾数 -= 1
        #┴
	#────────────────────────────────────	
    def Fn確認(self):
		#┬
        #●発射指示を確認する
        結果 = 入力.Fun走査(
            入力.IDボタン_キー[0],
            入力.IDボタン_パッド[0]
            )
        
        #●特殊効果が登録状況をを調べる
        発動リスト = self.基底.FN特殊.情報.発動
        発射法 = (1) if 効果ID.連射 in 発動リスト else (-1)

        if 結果[1][3] != 発射法: return True
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○発射制限時間を縮める
        self.情報.発射制限 = max(self.情報.発射制限 - 1, 0)
        if  発射法 == 1 and self.情報.発射制限 > 0: return True
        #│＼（まだ発射制限時間がある場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #○弾切れを確認する
        if self.情報.弾数 <= 0: return True
        #│＼（弾切れの場合）
        #│ ↓
        #│ ▼発射『不可能』で返す
        #│
        #▼発射『可能』で返す
        return False
        #┴
	#────────────────────────────────────	
    def Fn実行(self,
            argオフセットX,
            argオフセットY):
		#┬
        #○弾を生成する
        x = self.基底.情報.X + argオフセットX
        y = self.基底.情報.Y + argオフセットY
        弾発射(
                self.基底.GAME  ,
                所有者ID.自機   ,
                x, y, -90, 5    )
        #│
        #○弾発射音を鳴らす
        pyxel.play(3, 0)
        #│
        #○発射可能までの時間をリセットする
        self.情報.発射制限 = self.仕様.発射間隔
        #┴