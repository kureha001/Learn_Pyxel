#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　　│class爆発      ： 衝突処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel

from    共通	    import class入力操作    as 入力 
from    処理        import class所有者ID    as 所有者ID 

from    ..アイテム  import class種類ID      as アイテムID
from    ..アイテム  import class仕様        as アイテム仕様
from    ..爆発      import class爆発

# 自機が持つ機能を実現するクラス
from    .FN移動     import classFN移動
from    .FN衝突     import classFN衝突
from    .FN特殊効果 import classFN特殊効果
from    .FN発射     import classFN発射

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠───┬─────────────────────────────────
#┃概　要│進行とともに変化する情報を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self       ,
            引数_X座標      ,   #① 存在位置(X座標)
            引数_Y座標      ,   #② 存在位置(Y座標)
            引数_シールド   ):  #⑤ シールドの残量
		#┬
        #□動的データ
        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.シールド   = 引数_シールド
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class自機:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトの参照用を用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体で用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新5_出現.py
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_X座標  ,	#② 存在位置(X座標)
            引数_Y座標  ):  #③ 存在位置(Y座標)
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(情報)
        self.情報 = class情報(
                引数_X座標      = 引数_X座標                ,
                引数_Y座標      = 引数_Y座標                ,
                引数_シールド   = int(pyxel.width * 0.7)    )
        #│
        #□処理セット
        self.FN移動処理 = None
        self.FN衝突処理 = None
        self.FN特殊効果 = None
        self.FN発射処理 = None
        #┴　┴

		#┬
        #●処理セットをオブジェクト化する
        classFN移動     (self)
        classFN衝突     (self, self.GAME)
        classFN特殊効果 (self)
        classFN発射     (self, self.GAME)
        #│
        #●本体で用意したインスタンスに生成
        self.GAME.obj自機  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・移動指示はキーボードかゲームパッドを用いる
 	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●自機を移動する
        self.FN移動処理.処理実行()
        #│
        #◇特殊効果の持続時間を減らす
        if self.GAME.情報.プレイ時間 % 30 == 0:
            self.FN特殊効果.Fn時間経過()
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃３．更新処理(発射)
    #┠────┬──────────────────────────────
    #┃概　　要│弾を発射する
    #┃　　　　│① 発射条件を満たすかを確認
    #┃        │② 残量に応じて(一度の)発射量を調整し発射
    #┃        │③ 残量を減らす
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新3_発射.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・発射指示はキーボードかゲームパッドを用いる
    #┃　・特殊効果により、連射することが出来る
    #┃　・一度の発射量は特殊効果と残量で決める
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #●弾を発射する
        self.FN発射処理.処理実行()
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃４．更新処理(衝突)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┃　　　　│① ダメージ量を算出
    #┃        │② 爆発オブジェクトを生成
    #┃        │③ オブジェクトを消失
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・引数指定により、無条件破壊(クリティカルヒット)が可
    #┃　・特殊効果により、ダメージを受けなことが可
    #┃　・引数指定により、爆破オブジェクトの有無を制御可
    #┃　・シールドが切れると、このオブジェクトを消失させる
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ,        #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径 ※0：爆発なし
		#┬
        #●衝突処理を実行する
        self.FN衝突処理.処理実行(argダメージ, arg爆発半径 )
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．更新処理(アイテム発動)
    #┠────┬──────────────────────────────
    #┃概　　要│衝突によりダメージを与える
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新4_衝突.py
    #┠────┼──────────────────────────────
    #┃解　　説│
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 効果発動処理(self,
            引数_アイテム ):

        機種ID = 引数_アイテム.仕様.機種

        if 機種ID == アイテムID.弾薬回復:
            self.FN発射処理.情報.弾数 = self.FN発射処理.仕様.積載量

        elif 機種ID == アイテムID.シールド回復:
            self.情報.シールド = pyxel.width

        else:
            self.FN特殊効果.処理実行(引数_アイテム)

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠────┬──────────────────────────────
    #┃概　　要│画面に描画する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py ･･･ 描画処理()
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○自機を描画する
        pyxel.blt(
                self.情報.X,
                self.情報.Y,
                0,
                0,
                0,
                8,
                8,
                0 )
        #┴