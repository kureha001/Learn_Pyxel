#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：自機：移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    特殊効果    import 効果ID
from    共通        import class入力操作 as 入力 

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体 ): #① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = None
        self.情報   = None
        #┴
    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #●前進(下方に移動)する
        self.Fn移動()
        #│
        #●場外は消滅する
        self.Fn場外()
        #┴
	#────────────────────────────────────
    def Fn移動(self):
		#┬
        #●操作状況を確認する
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[self.個体.仕様.番号],
            入力.定数_移動_パッド[self.個体.仕様.番号]
            )
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●特殊効果から、追加速度を求める
        発動状況 = main.DB.obj特殊効果.情報.発動中
        キー    = 効果ID.速度
        追加速度 = (発動状況[キー][1]) if キー in 発動状況 else (0)
        #│
        #◇┐移動予定の座標を求める
        x = self.個体.情報.X
        y = self.個体.情報.Y
        v = main.DB.obj自機共通.仕様.移動速度 + 追加速度
        if 結果[1][0]: y -= v
        #　├┐（移動指示が『上』の場合）
            #↓
            #○現在のY座標から、速度分マイナスする
            #┴
        if 結果[1][1]: y += v
        #　├┐（移動指示が『下』の場合）
            #↓
            #○現在のY座標から、速度分プラスする
            #┴
        if 結果[1][2]: x -= v
        #　├┐（移動指示が『左』の場合）
            #↓
            #○現在のX座標から、速度分マイナスする
            #┴
        if 結果[1][3]: x += v
        #　├┐（移動指示が『右』の場合）
            #↓
            #○現在のX座標から、速度分プラスする
            #┴
        #　└┐（その他）
            #┴
        #│
        #○移動予定の座標で確定する
        self.個体.情報.X = x
        self.個体.情報.Y = y
        #┴
	#────────────────────────────────────
    def Fn場外(self):
		#┬
        #○補正予定の座標を用意する
        x = self.個体.情報.X
        y = self.個体.情報.Y
        #│
        #○画面内に収めるよう補正する
        x = max(x, 0)
        x= min(x, pyxel.width  - 8)
        y = max(y, 10) 
        y = min(y, pyxel.height - 20)
        #│
        #○補正予定の座標で確定する
        self.個体.情報.X = x
        self.個体.情報.Y = y
        #┴