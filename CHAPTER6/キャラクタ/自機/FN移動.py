#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（自機）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠───┬─────────────────────────────────
#┃概　要│pyxel          ：
#┃　　　│class入力操作  ： 発射指示でユーザ操作が必要
#┃　　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　　│class爆発      ： 衝突処理で必要
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	    import class入力操作    as 入力 

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
    #┬
    #□仕様データ
    移動速度   = 2
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN移動:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┃　　　　│① 本体オブジェクトの参照用を用意
    #┃　　　　│② 必要なデータセットをオブジェクトで用意
    #┃　　　　│③ 本体で用意したインスタンスに生成
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新5_出現.py
    #┠────┼──────────────────────────────
    #┃解　　説│とくになし
	#┗━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ):	#① 生成先のオブジェクト
		#┬
        #□本体オブジェクト(参照用)
        self.自機     = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様()
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.自機.FN移動処理  = self
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃１．更新処理(移動)
    #┠────┬──────────────────────────────
    #┃概　　要│画面座標を移動する
    #┠────┼──────────────────────────────
    #┃コール元│ゲーム.py → 更新1_移動.py
    #┠────┼──────────────────────────────
    #┃解　　説│
    #┠────┘
    #┃　・移動指示はキーボードかゲームパッドを用いる
 	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self):
		#┬
        #●操作状況を確認する
        結果 = 入力.Fun走査(
            入力.定数_移動_キー[0],
            入力.定数_移動_パッド[0]
            )
        if not 結果[0][0]: return
        #│＼（押されたものが『ない』場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○操作状況から座標を求める
        if 結果[1][0]: self.自機.情報.Y -= self.仕様.移動速度
        if 結果[1][1]: self.自機.情報.Y += self.仕様.移動速度
        if 結果[1][2]: self.自機.情報.X -= self.仕様.移動速度
        if 結果[1][3]: self.自機.情報.X += self.仕様.移動速度
        #│
        #○座標を補正する
        self.自機.情報.X = max(self.自機.情報.X, 0                )
        self.自機.情報.X = min(self.自機.情報.X, pyxel.width  - 8 )
        self.自機.情報.Y = max(self.自機.情報.Y, 10               ) 
        self.自機.情報.Y = min(self.自機.情報.Y, pyxel.height - 20)
        #┴