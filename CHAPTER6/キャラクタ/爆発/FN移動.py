#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：弾：移動機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    def __init__(self       ,
            引数_速度X      ,   #① 発射する方向(角度)
            引数_速度Y      ,   #② 移動速度(XYベクトル)
            引数_最大半径   ):  #③ 爆発の範囲(半径)

        self.速度X      = 引数_速度X
        self.速度Y      = 引数_速度Y
        self.最大半径   = 引数_最大半径

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 移動クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self       ,
            引数_生成先     ,   #① 生成先のオブジェクト
            引数_速度X      ,   #② 発射する方向(角度)
            引数_速度Y      ,   #③ 移動速度(XYベクトル)
            引数_最大半径   ):  #④ 爆発の範囲(半径)

		#┬
        #〇リファレンスを用意する
        self.基底           = 引数_生成先
        #│
        #〇└┐データセットを用意する
            #≫仕様
            #≫情報
        self.仕様           = 仕様クラス(引数_速度X, 引数_速度Y, 引数_最大半径)
        self.情報           = 情報クラス()
            #┴
        #│
        #〇生成先のインスタンスに実体化する
        self.基底.FN移動    = self
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #○座標を更新する
        self.基底.情報.X += self.仕様.速度X
        self.基底.情報.Y += self.仕様.速度Y
        #│
        #●座標を確認する
        x = self.基底.情報.X
        y = self.基底.情報.Y
        r = self.仕様.最大半径
        if ((x < -r or x > r + pyxel.width) or (y < -r or y > r + pyxel.height) ):
        #│ ＼（画面内の場合）
            #↓
            #●格納先から削除する
            #▼処理を中断する
            self.基底.格納先.remove(self.基底)
            return
        #│
        #○描画タイミングを確認する
        if pyxel.frame_count % 2 != 0: return
        #│＼（描画するターンではない場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #○半径を大きくする
        self.基底.情報.半径 += 1
        #│
        #○爆発状況を確認する
        if self.基底.情報.半径 > self.仕様.最大半径:
        #│ ＼（画面内の場合）
            #↓
            #●格納先から削除する ※存在しなければ処理をスキップする
            self.基底.格納先.remove(self.基底)
        #┴ ┴