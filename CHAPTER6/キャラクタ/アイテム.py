#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠──┬──────────────────────────────────
#┃概要│pyxel          ：
#┃　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　│class弾        ： 発射処理で必要
#┃　　│class爆発      ： 衝突処理で必要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    enum import IntEnum, auto

from    処理    import class所有者ID    as 所有者ID
from    .弾     import class弾
from    .爆発   import class爆発


#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：仕様(種類ID)
#┠──┬──────────────────────────────────
#┃概要│このオブジェクトの扱で必要なIDを管理
#┠──┼──────────────────────────────────
#┃解説│とくになし
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class種類ID(IntEnum):
    #┬
    #□└┐機体
    _開始           = 0    
    速度UP	        = auto()
    弾薬回復	    = auto()
    シールド回復	= auto()
    ダメージ無し	= auto()
    ダメージ半分	= auto()
    ダメージ吸収    = auto()
    発射_連射   	= auto()
    発射_弾数UP   	= auto()
    発射_貫通弾	    = auto()
    発射_上下方向   = auto()
    発射_左右方向   = auto()
    発射_4方向   	= auto()
    発射_8方向   	= auto()
    _終了           = auto()
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠──┬──────────────────────────────────
#┃概要│このオブジェクトの仕様を管理
#┠──┼──────────────────────────────────
#┃解説│・オブジェクト生成後は、原則この内容は書き換えない
#┃　　│・オブジェクトのパターンごとの情報をデータベースで持つ
#┃　　│・仕様データベースより、指定した機種の仕様をセットする
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

    #□仕様データベース
        #○更新処理のリストを作る
        #・グループID   ： 0=多重可能／その他=その番号で択一
        #・出現制限     ： 難易度がこの数値異常で出現する 
        #・持続時間     ： 効果が続く時間(単位：秒)
        #───────────────────────────
    仕様DB = {
        class種類ID.速度UP	        : (   0,  0,),
        class種類ID.弾薬回復	    : (   0,  0 ),
        class種類ID.シールド回復	: (   0,  0 ),
        class種類ID.発射_連射   	: (   0,  0 ),
        class種類ID.発射_弾数UP   	: (   0,  0 ),
        class種類ID.ダメージ無し	: ( 100, 10 ),
        class種類ID.ダメージ半分	: ( 100, 10 ),
        class種類ID.ダメージ吸収    : ( 100, 10 ),
        class種類ID.発射_貫通弾	    : ( 200, 10 ),
        class種類ID.発射_上下方向   : ( 210, 10 ),
        class種類ID.発射_左右方向   : ( 210, 10 ),
        class種類ID.発射_4方向   	: ( 220, 10 ),
        class種類ID.発射_8方向   	: ( 220, 10 )}

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_種類ID):     #① 生成するアイテムの種類ID
        #┬
        #□仕様データ
        self.機種       = 引数_種類ID

        self.衝突範囲   = (0, 0, 7, 7)
        self.画像X      = (引数_種類ID - 1) * 8
        self.画像Y      = 16
        self.速度X      = 0.8
        self.速度Y      = 0.5
        self.反転間隔   = 40

        self.グループID = self.仕様DB[ 引数_種類ID ][0]
        self.持続時間   = self.仕様DB[ 引数_種類ID ][1]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報
#┠──┬──────────────────────────────────
#┃概要│進行とともに変化する情報を管理
#┠──┼──────────────────────────────────
#┃解説│オブジェクト生成後は、更新処理を通して内容を書き換える
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class情報:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self       ,
            引数_X座標      ,   #① 存在位置(X座標)
            引数_Y座標      ):  #② 存在位置(Y座標)
		#┬
        #□動的データ
        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.経過時間   = 0
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．エンティティ・クラス：情報（特殊効果）
#┠──┬──────────────────────────────────
#┃概要│こレ自体がアイテムなのでこの処理は不要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class特殊効果:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classアイテム:
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 本体オブジェクトのリファレンスを用意
    #┃　　│② 必要なデータセットをオブジェクトで用意
    #┃　　│③ 本体に用意したインスタンスに生成
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新5_出現.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_種類ID ,  #④ 担当する機種
            引数_X座標  ,   #② 存在位置(X座標)
            引数_Y座標  ):	#③ 存在位置(Y座標)
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_種類ID)
        #│
        #□データセット(情報)
        self.情報 = class情報(
                引数_X座標      = 引数_X座標    ,
                引数_Y座標      = 引数_Y座標    )
        #┴　┴

		#┬
        #●本体で用意したインスタンスに生成
        self.GAME.objアイテム.append(self)
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃１．更新処理(移動)
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新1_移動.py
    #┠──┼────────────────────────────────
    #┃解説│・移動には、前進と横移動の2種類がある
    #┃　　│（移動パターンは仕様で決まる）
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #○経過時間をカウントする
        self.情報.経過時間 += 1
        #│
        #○座標Yを変更する
        self.情報.Y += self.仕様.速度Y
        #│
        #◇┐座標Xを移動する
        if self.情報.経過時間 // self.仕様.反転間隔 % 2 == 0:
        #　├┐（折返しタイミングの場合）
            #↓
            #○座標Xを右に移動する
            self.情報.X += self.仕様.速度X
            #┴
        else:
        #　└┐（その他）
            #↓
            #○座標Xを左に移動する
            self.情報.X -= self.仕様.速度X
        #┴　┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃２．更新処理(除外)
    #┠──┬────────────────────────────────
    #┃概要│画面外にはみ出した場合に抹消する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新2_除外.py
    #┠──┼────────────────────────────────
    #┃解説│・Ｙ座標だけで判断する
    #┃　　│（画面外から戻る場合があるので、Ｘ座標はチェックしない）
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 除外処理(self):
		#┬
        #○位置を確認する
        if (self.情報.Y < pyxel.height): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾を消滅する
        self.GAME.objアイテム.remove(self)
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃３．更新処理(発射)
    #┠──┬────────────────────────────────
    #┃概要│発射しないのでこの処理は不要
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
        pass

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃４．更新処理(衝突)
    #┠──┬────────────────────────────────
    #┃概要│衝突により効果を発動する
    #┃　　│① 効果を発動すする
    #┃　　│③ オブジェクトを消失
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新4_衝突.py
    #┠──┼────────────────────────────────
    #┃解説│
    #┃　　│
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self):
        #○オブジェクトを削除する
        self.GAME.objアイテム.remove(self)
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠──┬────────────────────────────────
    #┃概要│画面に描画する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py ･･･ 描画処理()
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.blt(
                self.情報.X     ,
                self.情報.Y     ,
                0               ,
                self.仕様.画像X ,
                self.仕様.画像Y ,
                8               ,
                8               ,
                0               )
        #┴