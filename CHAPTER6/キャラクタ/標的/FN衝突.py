#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠──┬──────────────────────────────────
#┃概要│pyxel          ：
#┃　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　│class爆発      ： 衝突処理で必要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import class所有者ID    as 所有者ID 
from    ..爆発  import class爆発

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠───┬─────────────────────────────────
#┃概　要│このオブジェクトの仕様を管理
#┠───┼─────────────────────────────────
#┃解　説│オブジェクト生成後は、原則この内容は書き換えない
#┗━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:
    #┬
    #□仕様データ
    衝突範囲   = (1, 1, 6, 6)
    #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN衝突:
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 参照用の本体オブジェクトを用意
    #┃　　│② 参照用の生成先オブジェクトを用意
    #┃　　│③ 必要なデータセットをオブジェクトで用意
    #┃　　│④ 生成先のインスタンスにオブジェクト化
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新5_出現.py → 標的.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_GAME   ):	#② 本体のオブジェクト
		#┬
        #□本体オブジェクト(参照用)
        #□自機オブジェクト(参照用)
        self.GAME = 引数_GAME
        self.標的 = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様()
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.標的.FN衝突処理  = self
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃４．更新処理(衝突)
    #┠──┬────────────────────────────────
    #┃概要│衝突によりダメージを与える
    #┃　　│① ダメージ量を算出
    #┃　　│② 爆発オブジェクトを生成
    #┃　　│③ オブジェクトを消失
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新4_衝突.py → 標的.py
    #┠──┼────────────────────────────────
    #┃解説│・引数指定により、無条件破壊(クリティカルヒット)が可
    #┃　　│・引数指定により、爆破オブジェクトの有無を制御可
    #┃　　│・シールドが切れると、このオブジェクトを消失させる
    #┃　　│・消失する際、得点を加算する
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self,
            argダメージ = 0,    #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径 ※0：爆発なし
        #◇┐ダメージを与える
        if argダメージ == 0:
        #　├┐（クリティカルヒット指定がある場合）
            #↓
            #○シールドをゼロにする
            self.標的.情報.シールド = 0
            #┴
        elif self.標的.特殊効果.無敵:
        #　├┐（無敵モードの場合）
            #↓
            #▼処理を中断する
            return
        else:
        #　└┐（その他）
            #↓
            #○ダメージを与える
            self.標的.情報.シールド -= argダメージ
            #┴
        #│
        #◇┐爆破する
        x = self.標的.情報.X
        y = self.標的.情報.Y
        r = arg爆発半径
        所有者 = 所有者ID.自機
        if arg爆発半径 > 0:
        #│├┐（爆破指定がある場合）
            #↓
            #●爆発を生成する
            class爆発( self.GAME, 所有者, x + 4, y + 4, r, True )
            #│
            #○被弾音を鳴らす
            pyxel.play(2, 1, resume=True)
            #┴
        #　└┐（その他）
            #┴
        #│
        #◇┐消滅する
        if self.標的.情報.シールド <= 0:
        #　├┐（シールド切れの場合）
            #↓
            #○スコアを加算する
            self.GAME.情報.得点 += self.標的.仕様.点数
            #│
            #○オブジェクトを削除する
            self.GAME.obj敵機.remove(self.標的)
            #┴
        #　└┐（その他）
        #┴　┴
