#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠──┬──────────────────────────────────
#┃概要│pyxel          ：
#┃　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　│class弾        ： 発射処理で必要
#┃　　│class爆発      ： 衝突処理で必要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理        import class所有者ID    as 所有者ID
from    ..弾        import class弾
from    ..爆発      import class爆発

from    .DB         import *
from    .ID         import class敵機ID      as 敵機ID
from    .FN移動     import classFN移動
from    .FN衝突     import classFN衝突
from    .FN発射     import classFN発射

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃標的クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class標的:
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 本体オブジェクトのリファレンスを用意
    #┃　　│② 必要なデータセットをオブジェクトで用意
    #┃　　│③ 本体に用意したインスタンスに生成
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新5_出現.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_X座標  ,   #② 存在位置(X座標)
            引数_Y座標  ,	#③ 存在位置(Y座標)
            引数_機種   ,   #④ 担当する機種
            引数_難易度 ):  #⑤ 難易度 ※シールド量に影響
		#┬
        #□本体オブジェクト(参照用)
        self.GAME = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_生成先, 引数_機種)
        #│
        #□データセット(情報)
        self.情報 = class情報(
                引数_X座標      = 引数_X座標                ,
                引数_Y座標      = 引数_Y座標                ,
                引数_シールド   = min(引数_難易度 * 4, 36)  )
        #│
        #□データセット(情報:特殊効果)
        self.特殊効果 =  class特殊効果()
        #│
        #□処理セット
        self.FN移動処理 = None
        self.FN衝突処理 = None
        self.FN発射処理 = None
        #┴　┴

		#┬
        #●処理セットをオブジェクト化する
        classFN移動(self, 引数_機種)
        classFN衝突(self, self.GAME)
        classFN発射(self, self.GAME, 引数_機種)
        #│
        #●本体で用意したインスタンスに生成
        self.GAME.obj敵機.append(self)
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃１．更新処理(移動)
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新1_移動.py
    #┠──┼────────────────────────────────
    #┃解説│・移動には、前進と横移動の2種類がある
    #┃　　│（移動パターンは仕様で決まる）
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 移動処理(self):
		#┬
        #●移動する
        self.FN移動処理.処理実行()
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃３．更新処理(発射)
    #┠──┬────────────────────────────────
    #┃概要│弾を発射する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 発射処理(self):
		#┬
        #●弾を発射する
        self.FN発射処理.処理実行()
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃４．更新処理(衝突)
    #┠──┬────────────────────────────────
    #┃概要│衝突によりダメージを与える
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新4_衝突.py
    #┠──┼────────────────────────────────
    #┃解説│特になし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 衝突処理(self,
            argダメージ = 0,    #① ダメージ ※0：クリティカルヒット
            arg爆発半径 = 8):   #② 爆発半径 ※0：爆発なし
		#┬
        #●衝突処理を実行する
        self.FN衝突処理.処理実行(argダメージ, arg爆発半径 )
        #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃５．描画処理
    #┠──┬────────────────────────────────
    #┃概要│画面に描画する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py ･･･ 描画処理()
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 描画処理(self):
		#┬
        #○描画する
        pyxel.blt(
                self.情報.X             ,
                self.情報.Y             ,
                0                       ,
                self.仕様.機種 * 8 + 8  ,
                0                       ,
                8                       ,
                8                       ,
                0                       )
        #┴