#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠──┬──────────────────────────────────
#┃概要│pyxel          ：
#┃　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　│class弾        ： 発射処理で必要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    共通	import class入力操作    as 入力 
from    処理    import class所有者ID    as 所有者ID 
from    ..弾    import class弾
from    .ID     import class敵機ID      as 敵機ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠──┬──────────────────────────────────
#┃概要│このオブジェクトの仕様を管理
#┠──┼──────────────────────────────────
#┃解説│・オブジェクト生成後は、原則この内容は書き換えない
#┃　　│・オブジェクトのパターンごとの情報をデータベースで持つ
#┃　　│・仕様データベースより、指定した機種の仕様をセットする
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

    #┬
    #□仕様データベース
    #・間隔： fpsで指定(0:発射しない)
    #・弾数： 同時に発射する弾数(0:発射しない/1/2/4)
    #・速度： 移動速度(0:発射しない)
    仕様DB = {
            敵機ID.戦闘機1 : ( 40, 2, 1.6 ) , 
            敵機ID.戦闘機2 : ( 40, 1, 2.0 ) , 
            敵機ID.戦闘機3 : ( 80, 4, 1.3 ) , 
            敵機ID.機雷    : (  0, 0, 0.0 ) }
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_機種):     #① 担当する機種
        #┬
        #□仕様データ
        self.機種       = 引数_機種
        self.衝突範囲   = (0, 0, 7, 7)
        self.間隔   = self.仕様DB[ 引数_機種 ][0]
        self.弾数   = self.仕様DB[ 引数_機種 ][1]
        self.速度   = self.仕様DB[ 引数_機種 ][2]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN発射:
	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 参照用の本体オブジェクトを用意
    #┃　　│② 参照用の生成先オブジェクトを用意
    #┃　　│③ 必要なデータセットをオブジェクトで用意
    #┃　　│④ 生成先のインスタンスにオブジェクト化
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py → 標的.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_GAME   ,	#② 生成先のオブジェクト
            引数_機種   ):  #③ 担当する機種
		#┬
        #□本体オブジェクト(参照用)
        #□自機オブジェクト(参照用)
        self.GAME = 引数_GAME
        self.標的 = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_機種)
        #┴

		#┬
        #●本体で用意したインスタンスに生成
        self.標的.FN発射処理  = self
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃３．更新処理(発射)
    #┠──┬────────────────────────────────
    #┃概要│弾を発射する
    #┃　　│① 発射条件を満たすかを確認
    #┃　　│② 発射パターンい従い発射
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新3_発射.py → 標的.py
    #┠──┼────────────────────────────────
    #┃解説│・発射は複数パターンあり仕様で決まる
    #┃　　│・単発発射の場合は自機に向けて角度を調整する
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self):
		#┬
        #●発射できるか確認する
        if self.Fn発射_確認(): return
        #　 ＼（『発射不可』の場合）
            #↓
        #　 ▼処理を中断する
        #│
        #◇┐発射する  
        if self.仕様.弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #○仕様を確認する
        if (self.仕様.弾数 * self.仕様.間隔 * self.仕様.速度) == 0:
        #　＼（標的が『弾を発射しない』タイプの場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #○発射タイミングを確認する
        if self.標的.情報.経過時間 % self.仕様.間隔 != 0: return True
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
        #│
        #▼『発射不可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
		#┬
        #◇┐角度を求める
        if self.GAME.obj自機 is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            発射角度 = 90
            #┴
        else:
        #　└┐（その他）
            #↓
            #▼自機の方角を返す
            発射角度 = pyxel.atan2(
                    self.GAME.obj自機.情報.Y - self.標的.情報.Y  ,
                    self.GAME.obj自機.情報.X - self.標的.情報.X  )
            #┴
        #│
        #●弾を生成する
        class弾(
                self.GAME                       ,
                所有者ID.標的                   ,
                self.標的.情報.X                     ,
                self.標的.情報.Y                     ,
                発射角度, self.仕様.速度    )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_複数発(self):
		#┬
        #◎└┐多方向に発射する
        分割角度 = 180 / (self.仕様.弾数 - 1)
        for tmp弾数 in range(self.仕様.弾数):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp弾数 * 分割角度
            #│
            #●弾を生成する
            class弾(
                    self.GAME                   ,
                    所有者ID.標的               ,
                    self.標的.情報.X            ,
                    self.標的.情報.Y            ,
                    発射角度, self.仕様.速度    )
        #┴　┴