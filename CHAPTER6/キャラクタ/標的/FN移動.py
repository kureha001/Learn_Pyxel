#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃技術評論社 ゲームで学ぶPython！ CHAPTER6:MAGA WING
#┠─────────────────────────────────────
#┃キャラクター（標的）
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅰ.インポート
#┠──┬──────────────────────────────────
#┃概要│pyxel          ：
#┃　　│class所有者ID  ： 弾・爆発で、所有者の指定に必要
#┃　　│class弾        ： 発射処理で必要
#┃　　│class爆発      ： 衝突処理で必要
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理        import class所有者ID    as 所有者ID
from    .ID         import class敵機ID      as 敵機ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅱ．クラス：仕様
#┠──┬──────────────────────────────────
#┃概要│このオブジェクトの仕様を管理
#┠──┼──────────────────────────────────
#┃解説│・オブジェクト生成後は、原則この内容は書き換えない
#┃　　│・オブジェクトのパターンごとの情報をデータベースで持つ
#┃　　│・仕様データベースより、指定した機種の仕様をセットする
#┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class class仕様:

    #┬
    #□仕様データベース
    #・発速度Y      ： 0～
    #・速度X        ： 0～(0:横移動なし)
    #・方向反転間隔 ： 左右反転の間隔をfpsで指定(0:反転しない)
    仕様DB = {
            敵機ID.戦闘機1 : ( 1.2, 0.0,  0 ) , 
            敵機ID.戦闘機2 : ( 1.0, 1.2, 30 ) , 
            敵機ID.戦闘機3 : ( 0.8, 0.0,  0 ) , 
            敵機ID.機雷    : ( 0.7, 1.5, 20 ) }
    #┴

	#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	#┃０．初期化処理 
	#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self,
            引数_機種):     #① 担当する機種
        #┬
        #□仕様データ
        self.機種       = 引数_機種
        self.速度Y      = self.仕様DB[ 引数_機種 ][0]
        self.速度X      = self.仕様DB[ 引数_機種 ][1]
        self.反転間隔   = self.仕様DB[ 引数_機種 ][2]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃Ⅲ．メイン・クラス
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class classFN移動:
    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃０．初期化処理 
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┃　　│① 本体オブジェクトのリファレンスを用意
    #┃　　│② 必要なデータセットをオブジェクトで用意
    #┃　　│③ 本体に用意したインスタンスに生成
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新5_出現.py
    #┠──┼────────────────────────────────
    #┃解説│とくになし
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def __init__(self   ,
            引数_生成先 ,	#① 生成先のオブジェクト
            引数_機種   ):  #④ 担当する機種
		#┬
        #□本体オブジェクト(参照用)
        self.標的     = 引数_生成先
        #│
        #□データセット(仕様)
        self.仕様 = class仕様(引数_機種)
        #┴
		#┬
        #●本体で用意したインスタンスに生成
        self.標的.FN移動処理  = self
        #┴

    #┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    #┃１．更新処理(移動)
    #┠──┬────────────────────────────────
    #┃概要│画面座標を移動する
    #┠──┼────────────────────────────────
    #┃流れ│ゲーム.py → 更新1_移動.py
    #┠──┼────────────────────────────────
    #┃解説│・移動には、前進と横移動の2種類がある
    #┃　　│（移動パターンは仕様で決まる）
    #┗━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    def 処理実行(self):
		#┬
        #○経過時間をカウントする
        self.標的.情報.経過時間 += 1
        #│
        #●前進(下方に移動)する
        self.Fn前進()
        #│
        #●横に移動する
        self.Fn横移動()
        #│
        #●横に移動する
        self.Fn場外()
        #┴
	#────────────────────────────────────
    def Fn前進(self):
		#┬
        #○座標Yを変更する
        self.標的.情報.Y += self.仕様.速度Y
        #┴
	#────────────────────────────────────
    def Fn横移動(self):
		#┬
        #○仕様を確認する
        if (self.仕様.速度Y * self.仕様.反転間隔) == 0: return
        #　＼（対象外の場合）
        #　 ↓
        #　 ▼処理を中断する
        #│
        #◇┐座標Xを移動する
        if self.標的.情報.経過時間 // self.仕様.反転間隔 % 2 == 0:
        #　├┐（折返しタイミングの場合）
            #↓
            #○座標Xを右に移動する
            self.標的.情報.X += self.仕様.速度X
            #┴
        else:
        #　└┐（その他）
            #↓
            #○座標Xを左に移動する
            self.標的.情報.X -= self.仕様.速度X
        #┴　┴
	#────────────────────────────────────
    def Fn場外(self):
		#┬
        #○位置を確認する
        if (self.標的.情報.Y < pyxel.height): return
        #│＼（画面内の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #●弾を消滅する
        if self in self.標的.仕様.格納先:
                self.標的.仕様.格納先.remove(self)
        #┴