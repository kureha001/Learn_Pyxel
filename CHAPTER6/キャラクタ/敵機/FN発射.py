#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機：発射機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.DB
from   .DB  import 機体ID, 敵機DB, ボスDB
from   ..弾 import 弾発射

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 個体の仕様
        #┬
        #○衝突範囲を初期化する  
        self.衝突範囲   = (0, 0, 7, 7)
        #│
        #○DBの検索キーを用意する  
        キー = (機体ID.アイテム) if 引数_仕様.アイテム区分 else (引数_仕様.種類ID)
        #│
        #◇┐用意したキーで、発射の間隔・速度・数・角度・威力を初期化する  
        if 引数_仕様.ボス区分:
        #　├┐（ボス区分がＯＮの場合）
            #↓
            #○ボスＤＢの内容で初期化する
            self.間隔 = ボスDB[ キー ][2][0]
            self.速度 = ボスDB[ キー ][2][1]
            self.弾数 = ボスDB[ キー ][2][2]
            self.角度 = ボスDB[ キー ][2][3]
            self.威力 = ボスDB[ キー ][3][0]
            #┴
        else:
        #　└┐（その他）
            #↓
            #○敵機ＤＢの内容で初期化する
            self.間隔 = 敵機DB[ キー ][2][0]
            self.速度 = 敵機DB[ キー ][2][1]
            self.弾数 = 敵機DB[ キー ][2][2]
            self.角度 = 敵機DB[ キー ][2][3]
            self.威力 = 敵機DB[ キー ][3][0]
        #┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発射クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
        #┬
        #◇┐ボスの狙い撃ちを発射する
        発射間隔 = max(17 - int(main.DB.難易度/2), 10)
        if self._仕様.ボス区分 and not self.Fn発射禁止( 発射間隔 ):
        #　├┐（ボスで発射タイミングの場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        #　└┐（その他）
            #┴
        #│
        #●発射できるか確認する
        if self.Fn発射禁止( self.仕様.間隔 ): return
        #│＼（敵機が『弾を発射しない』タイプの場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        #◇┐仕様に従い発射する  
        if self.仕様.弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴

	#────────────────────────────────────	
    def Fn発射禁止(self ,
            引数_間隔   ):  #① 発射間隔
        #┬
        #○仕様を確認する
        if (self.仕様.弾数 * 引数_間隔 * self.仕様.速度) == 0: return True
        #│＼（『弾を発射しない』タイプの場合）
        #│ ↓
        #│ ▼『発射不可能』を返す
        #│
        #○発射タイミングを確認する
        if self._情報.経過時間 % 引数_間隔 != 0: return True
        #│＼（発射タイミングではない場合）
        #│ ↓
        #│ ▼『発射不可能』を返す
        #│
        #▼『発射可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
        #┬
        #○時期の状況を確認する
        if not main.DB.obj自機: return
        #│＼（自機が『存在しない』の場合）
        #│ ↓
        #│ ▼処理を中断する
        #│
        x1 = self._情報.X + self._仕様.オフセット
        y1 = self._情報.Y + self._仕様.オフセット
        #│
        #◎└┐自機に向けて発射する
        for tmp自機 in main.DB.obj自機:
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #〇自機への発射角を求める
            x2 = tmp自機.情報.X
            y2 = tmp自機.情報.Y
            発射角度 = pyxel.atan2((y2 - y1), (x2 - x1))
            #┴
        #│
        #●弾を生成する
        弾発射(
                main.DB.所有者ID.敵機   ,
                x1, y1                  ,
                発射角度                ,
                self.仕様.速度          ,
                False                   ,
                self.仕様.威力          )
        #┴　┴　┴
	#────────────────────────────────────	
    def Fn発射_複数発(self):
        #┬
        #○基本情報を用意する
        x1 = self._情報.X + self._仕様.オフセット
        y1 = self._情報.Y + self._仕様.オフセット
        分割角度 = 360 / self.仕様.弾数
        #│
        #◎└┐多方向に発射する
        for tmp弾数 in range(self.仕様.弾数):
            #│＼（すべての処理を終えた場合）
            #│ ↓
            #│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp弾数 * 分割角度 - self.仕様.角度
            #│
            #●弾を生成する
            弾発射(
                    main.DB.所有者ID.敵機   ,
                    x1, y1                  ,
                    発射角度                ,
                    self.仕様.速度          ,
                    False                   ,
                    self.仕様.威力          )
        #┴　┴