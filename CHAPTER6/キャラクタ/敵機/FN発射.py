#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機：発射機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
import  main.DB
from    .DB     import 機体ID, 敵機DB
from    ..弾    import 弾発射

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    def __init__(self, 引数_仕様 ): #① 個体の仕様

        if 引数_仕様.アイテム区分   : キー = (機体ID.アイテム) 
        else                        : キー = (引数_仕様.種類ID)

        self.衝突範囲   = (0, 0, 7, 7)
        self.間隔       = 敵機DB[ キー ][2][0]
        self.速度       = 敵機DB[ キー ][2][1]
        self.弾数       = 敵機DB[ キー ][2][2]
        self.角度       = 敵機DB[ キー ][2][3]
        self.破壊力     = 敵機DB[ キー ][3][0]

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発射クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_個体 ): #① 個体オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_個体
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self.個体.仕様)
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #●発射できるか確認する
        if self.Fn可否確認(): return
        #　 ＼（『発射不可』の場合）
            #↓
        #　 ▼処理を中断する
        #│
        #◇┐発射する  
        if self.仕様.弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴
	#────────────────────────────────────	
    def Fn可否確認(self):
		#┬
        #○仕様を確認する
        if (self.仕様.弾数 * self.仕様.間隔 * self.仕様.速度) == 0:
        #　＼（敵機が『弾を発射しない』タイプの場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #○発射タイミングを確認する
        if self.個体.情報.経過時間 % self.仕様.間隔 != 0: return True
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
        #│
        #▼『発射不可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
		#┬
        x1 = self.個体.情報.X
        y1 = self.個体.情報.Y
        破壊力 = self.仕様.破壊力

        #◇┐角度を求める
        if main.DB.obj自機 is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            発射角度 = 90
            #┴
        else:
        #　└┐（その他）
            #↓
            #◎└┐自機に向けて発射する
            for tmp自機 in main.DB.obj自機:
                #│＼（すべての処理を終えた場合）
                #│ ↓
                #│ ▼繰り返し処理を抜ける
                #│
                #〇自機への発射角を求める
                x2 = tmp自機.情報.X
                y2 = tmp自機.情報.Y
                発射角度 = pyxel.atan2((y2 - y1), (x2 - x1))
                #│
                #●弾を生成する
                弾発射(
                        main.DB.所有者ID.敵機   ,
                        x1, y1                  ,
                        発射角度                ,
                        self.仕様.速度          ,
                        False                   ,
                        破壊力                  )
        #┴　┴　┴
	#────────────────────────────────────	
    def Fn発射_複数発(self):
		#┬
        分割角度 = 360 / self.仕様.弾数
        破壊力 = self.仕様.破壊力
        #│
        #◎└┐多方向に発射する
        for tmp弾数 in range(self.仕様.弾数):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp弾数 * 分割角度 - self.仕様.角度
            #│
            #●弾を生成する
            弾発射(
                    main.DB.所有者ID.敵機   ,
                    self.個体.情報.X        ,
                    self.個体.情報.Y        ,
                    発射角度                ,
                    self.仕様.速度          ,
                    False                   ,
                    破壊力                  )
        #┴　┴