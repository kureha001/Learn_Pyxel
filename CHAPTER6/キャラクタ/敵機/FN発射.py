#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：標的：発射機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  pyxel
from    処理    import 所有者ID
from    ..弾    import 弾発射
from    ._ID    import ID

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    #・間隔： fpsで指定(0:発射しない)
    #・弾数： 同時に発射する弾数(0:発射しない/1/2/4)
    #・速度： 移動速度(0:発射しない)
    パラメータ = {
            ID.戦闘機1 : ( 40, 2, 1.6 ) , 
            ID.戦闘機2 : ( 40, 1, 2.0 ) , 
            ID.戦闘機3 : ( 80, 4, 1.3 ) , 
            ID.機雷    : (  0, 0, 0.0 ) }

    def __init__(self,
            引数_種類ID):     #① 担当する機種
        #┬
        #□仕様データ
        self.機種ID     = 引数_種類ID
        self.衝突範囲   = (0, 0, 7, 7)
        self.間隔       = self.パラメータ[ 引数_種類ID ][0]
        self.弾数       = self.パラメータ[ 引数_種類ID ][1]
        self.速度       = self.パラメータ[ 引数_種類ID ][2]
        #┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:
    pass

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 発射クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self, 引数_親OBJ ): #① 親オブジェクト
		#┬
        #〇参照先を用意する
        self.個体   = 引数_親OBJ
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self.個体.仕様.種類ID)
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self):
		#┬
        #●発射できるか確認する
        if self.Fn発射_確認(): return
        #　 ＼（『発射不可』の場合）
            #↓
        #　 ▼処理を中断する
        #│
        #◇┐発射する  
        if self.仕様.弾数 == 1:
        #　├┐（タイプが『１発・狙い撃ち』の場合）
            #↓
            #●単発で発射する
            self.Fn発射_単発()
            #┴
        else:
        #　└┐（その他）
            #↓
            #●複数発で発射する  
            self.Fn発射_複数発()
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_確認(self):
		#┬
        #○仕様を確認する
        if (self.仕様.弾数 * self.仕様.間隔 * self.仕様.速度) == 0:
        #　＼（標的が『弾を発射しない』タイプの場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
            return True
        #│
        #○発射タイミングを確認する
        if self.個体.情報.経過時間 % self.仕様.間隔 != 0: return True
        #　＼（発射タイミングではない場合）
        #　 ↓
        #　 ▼『発射不可能』を返す
        #│
        #▼『発射不可能』を返す
        return False
	#────────────────────────────────────	
    def Fn発射_単発(self):
		#┬
        x1 = self.個体.情報.X
        y1 = self.個体.情報.Y

        #◇┐角度を求める
        if self.個体.参照.自機 is None: 
        #　├┐（自機が存在しない場合）
            #↓
            #▼90度を返す
            発射角度 = 90
            #┴
        else:
        #　└┐（その他）
            #↓
            #▼自機の方角を返す
            x2 = self.個体.参照.自機.情報.X
            y2 = self.個体.参照.自機.情報.Y
            発射角度 = pyxel.atan2((y2 - y1), (x2 - x1))
            #┴
        #│
        #●弾を生成する
        弾発射(
                self.個体.参照.GAME ,
                所有者ID.標的       ,
                x1, y1              ,
                発射角度            ,
                self.仕様.速度      )
        #┴　┴
	#────────────────────────────────────	
    def Fn発射_複数発(self):
		#┬
        #◎└┐多方向に発射する
        分割角度 = 180 / (self.仕様.弾数 - 1)
        for tmp弾数 in range(self.仕様.弾数):
			#│＼（すべての処理を終えた場合）
            #│ ↓
			#│ ▼繰り返し処理を抜ける
            #│
            #●発射角度を求める
            発射角度 = tmp弾数 * 分割角度
            #│
            #●弾を生成する
            弾発射(
                    self.個体.参照.GAME         ,
                    所有者ID.標的               ,
                    self.個体.情報.X            ,
                    self.個体.情報.Y            ,
                    発射角度, self.仕様.速度    )
        #┴　┴