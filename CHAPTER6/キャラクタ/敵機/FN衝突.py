#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクタ：敵機：衝突機能
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import pyxel
import main.DB
from   .DB    import 機体ID, 敵機DB, ボスDB
from   ..爆発 import 爆発開始

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:
    def __init__(self   ,
            引数_仕様   ):  #① 個体の仕様
        #┬
        #◇┐衝突範囲を初期化する  
        if 引数_仕様.アイテム区分:
        #　├┐（アイテム区分がＯＮの場合）
            #↓
            #○アイテム用の内容で初期化する
            self.衝突範囲   = (0,0, 7,7)
            #┴
        else:
        #　└┐（その他）
            #↓
            #○敵機用の内容で初期化する
            d = 引数_仕様.オフセット
            self.衝突範囲   = (d,d, 6+d,6+d)
            #┴
        #│
        #○DBの検索キーを用意する  
        キー = (機体ID.アイテム) if 引数_仕様.アイテム区分 else (引数_仕様.種類ID)
        #│
        #◇┐用意したキーで、点数・威力(体当たり)を初期化する  
        if 引数_仕様.ボス区分:
        #　├┐（ボス区分がＯＮの場合）
            #↓
            #○ボスＤＢの内容で初期化する
            self.点数 = ボスDB[ キー ][0][2]
            self.威力 = ボスDB[ キー ][3][1]
            #┴
        else:
        #　└┐（その他）
            #↓
            #○敵機ＤＢの内容で初期化する
            self.点数 = 敵機DB[ キー ][0][2]
            self.威力 = 敵機DB[ キー ][3][1]
            if self.威力 == None:  self.威力 = 1000
        #┴　┴

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 衝突クラス:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self   ,
            引数_個体   ):  #① 個体オブジェクト
        #┬
        #〇個体オブジェクトのリファレンスを用意する
        self._個体  = 引数_個体
        self._仕様  = 引数_個体.仕様
        self._情報  = 引数_個体.情報
        #│
        #≫データセットを用意する
        self.仕様   = 仕様クラス(self._仕様)
        self.情報   = None
        #┴

    #┌───────────────────────────────────
    #│機能実行
    #└───────────────────────────────────
    def 実行(self,
            argダメージ = 0 ):  #① 受けるダメージ   ※0：強制破壊
        #┬
        #〇シールドにダメージを与える
        破壊判定 = (argダメージ == 0)
        self._情報.シールド = (0) if 破壊判定 else (self._情報.シールド - argダメージ)
        #│
        #◇┐消滅する
        if self._仕様.アイテム区分 and not 破壊判定:
        #　├┐（アイテムで強制破壊以外の場合）
            #↓
            #●格納先から削除する
            self._仕様.格納先.remove(self._個体)
            #┴
        elif self._情報.シールド <= 0:
        #　├┐（シールド切れの場合）
            #↓
            #●爆発する
            #○スコアを加算する
            #●格納先から削除する
            self.Fn爆発()
            main.DB.得点 += self.仕様.点数
            self._仕様.格納先.remove(self._個体)
            #┴
        #│
        #◇┐爆発音を鳴らす
        if not self._仕様.アイテム区分: main.DB.Fn爆発音()
        #　├┐（アイテム以外の場合）
            #↓
            #●爆発音を鳴らす
            #┴
        #┴

    #────────────────────────────────────
    def Fn爆発(self):
        #┬
        #●基本情報を用意する
        所有者 = main.DB.所有者ID.敵機
        d = self._仕様.オフセット
        x = self._情報.X + 4 + d
        y = self._情報.Y + 4 + d
        #│
        #◇┐個体を破壊する
        if self._仕様.ボス区分:
        #　├┐（ボスの場合）
            #↓
            #◎└┐複数爆発する
            for i in range(1,10):
                #│＼（すべての処理を終えた場合）
                #│ ↓
                #│ ▼繰り返し処理を抜ける
                #│
                #≫ランダムな位置・大きさで爆発する
                xr = pyxel.rndi(-22,22)
                yr = pyxel.rndi(-22,22)
                r = pyxel.rndi(6,12)
                爆発開始(所有者, (x + xr), (y + yr), r)
                #┴
            #│
            #○ボスの確認する
            if len(main.DB.obj敵機) == 1: main.DB.ボスシーン = None
            #　 ＼（最後の１機の場合）
                #↓
                #○ボスシーンを終了する
            #┴　┴

        else:
        #　└┐（その他）
            #↓
            #≫爆発する
            爆発開始(所有者, x, y, 8)
        #┴　┴