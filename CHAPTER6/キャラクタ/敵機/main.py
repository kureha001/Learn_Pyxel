#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃キャラクター：敵機
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
import  処理.DB
from    .FN移動 import 移動クラス
from    .FN衝突 import 衝突クラス
from    .FN発射 import 発射クラス
from    .FN描画 import 描画クラス

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃仕様
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 仕様クラス:

    def __init__(self   ,
            引数_種類ID ,   #① 種類を識別するID
            引数_難易度 ):  #② 難易度 ※0:アイテム/1～:敵機

        self.種類ID = 引数_種類ID
        self.アイテム区分 = (True) if 引数_難易度 == 0 else (False)

        if self.アイテム区分: self.格納先 = 処理.DB.objアイテム
        else                : self.格納先 = 処理.DB.obj敵機

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃情報
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 情報クラス:

    def __init__(self   ,
            引数_X座標  ,   #① 存在位置(X座標)
            引数_Y座標  ,   #② 存在位置(Y座標)
            引数_難易度 ):  #④ シールドの残量

        self.X          = 引数_X座標
        self.Y          = 引数_Y座標
        self.経過時間   = 0
        self.シールド   = min(引数_難易度 * 4, 36)

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#┃メイン
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
class 本体:
    #┌───────────────────────────────────
    #│初期化
    #└───────────────────────────────────
    def __init__(self       ,
            引数_X座標      ,   #② 存在位置(X座標)
            引数_Y座標      ,   #③ 存在位置(Y座標)
            引数_種類ID     ,   #④ 出現する種類のID
            引数_難易度 = 0 ):  #⑤ 難易度 ※0:アイテム/1～:敵機

        #┬
        #≫データセットを用意する
        self.仕様 = 仕様クラス(引数_種類ID, 引数_難易度)
        self.情報 = 情報クラス(引数_X座標, 引数_Y座標, 引数_難易度)
        #│
        #≫処理セットを用意する
        self.FN移動 = 移動クラス(self)
        self.FN衝突 = 衝突クラス(self)
        self.FN特殊 = None
        self.FN発射 = 発射クラス(self)
        self.FN描画 = 描画クラス(self)
        #│
        #●格納先インスタンス(リスト)にオブジェクト化する
        self.仕様.格納先.append(self)
        #┴